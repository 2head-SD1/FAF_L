package com;
import com.Absyn.*;
/*** BNFC-Generated Visitor Design Pattern Skeleton. ***/
/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use. 
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramExprsVisitor<R,A> implements ProgramExprs.Visitor<R,A>
  {
    public R visit(com.Absyn.Program p, A arg)
    { /* Code For Program Goes Here */
      for (Expr x: p.listexpr_)
      { /* ... */ }
      return null;
    }
  }
  public class ExprVisitor<R,A> implements Expr.Visitor<R,A>
  {
    public R visit(com.Absyn.Plus p, A arg)
    { /* Code For Plus Goes Here */
      for (Params x: p.listparams_)
      { /* ... */ }
      return null;
    }    public R visit(com.Absyn.Minus p, A arg)
    { /* Code For Minus Goes Here */
      for (Params x: p.listparams_)
      { /* ... */ }
      return null;
    }    public R visit(com.Absyn.Assign p, A arg)
    { /* Code For Assign Goes Here */
      //p.ident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ParamsVisitor<R,A> implements Params.Visitor<R,A>
  {
    public R visit(com.Absyn.ParametersInteger p, A arg)
    { /* Code For ParametersInteger Goes Here */
      //p.integer_;
      return null;
    }    public R visit(com.Absyn.ParametersFunctions p, A arg)
    { /* Code For ParametersFunctions Goes Here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class TypeVisitor<R,A> implements Type.Visitor<R,A>
  {
    public R visit(com.Absyn.BoolType p, A arg)
    { /* Code For BoolType Goes Here */
      return null;
    }    public R visit(com.Absyn.IntType p, A arg)
    { /* Code For IntType Goes Here */
      return null;
    }    public R visit(com.Absyn.StringType p, A arg)
    { /* Code For StringType Goes Here */
      return null;
    }
  }
}