comment "//";
comment "/*" "*/";

Program. ProgramExprs ::= [Expr];
separator Expr ";";

--Setq Rules
SetqSimple.         Expr ::= "setq" Ident ":" Type Expr;
SetqStruct.         Expr ::= "setq" Ident ":" Ident Args;
IntConst.           Expr ::= Integer;
DoubleConst.        Expr ::= Double;
BoolConst.          Expr ::= Bool;
BoolTrue.           Bool ::= "true";
BoolFalse.          Bool ::= "false";
StringConst.        Expr ::= String;
Id.                 Expr ::= Ident;

--Func rules
FuncCall.           Expr ::= "call" Ident "("[Expr]")";
Define.             Expr ::= "define" Ident "("[ATypedArg]")" "->" AFuncReturnType "{" Expr "}";
separator           ATypedArg ",";
separator           Expr ",";
FuncReturnType.     AFuncReturnType ::= Type;
_.                  Expr ::= "(" Expr ")";

--Struct rules
StructInit.         Expr ::= "struct" Ident "("[ATypedArg]")";
StructConstructor.  Expr ::= Ident "("[Expr]")";
separator           ATypedArg ",";
StructField.        Expr ::= Expr "." Ident;

--If rules
If.                 Expr ::= "if" Expr "then" Expr "else" Expr;

--Lambda rules
Lambda.             Expr ::= "lambda" "("[ATypedArg]")" "->" AFuncReturnType "{" Expr "}";

--Dict rules
DictPair.           Pair ::= "(" Expr "." Expr ")";
separator           Pair ",";
DictConstructor.    Expr ::= "dict" Ident "<" Type "," Type ">" "(" [Pair] ")";
DictSet.            Expr ::= "dict-set" "(" Expr "," Pair ")";
DictGet.            Expr ::= "dict-get" "(" Expr "," Expr ")";
DictRemove.         Expr ::= "dict-remove" "(" Expr "," Expr ")";
DictKeys.           Expr ::= "dict-keys" "(" Expr ")";
DictValues.         Expr ::= "dict-values" "(" Expr ")";
DictLength.         Expr ::= "dict-length" "(" Expr ")";

--Array rules
ArrayConstructor.   Expr ::= Type "["Expr"]" "{"[Expr]"}";
First.              Expr ::= "first" "("Expr")";
Last.               Expr ::= "last" "("Expr")";
ArrayGet.                Expr ::= "get" "(" Expr "," Expr ")";
ArraySet.                Expr ::= "array-set" "(" Expr "," Expr "," Expr ")";
ArrayLength.             Expr ::= "array-length" "("Expr")";

--Exception rules
RaiseEx.            Expr ::= "raise" "Exception" "("String")";
TryCatch.           Expr ::= "try" Expr "catch" "("Expr")";

--Base rules
----Arithmetic rules
Plus.               Expr ::= "plus" "("[Expr]")";
Minus.              Expr ::= "minus" "("[Expr]")";
Mul.                Expr ::= "mul" "("[Expr]")";
Div.                Expr ::= "div" "("[Expr]")";

----Bool predicates rules
Equals.             Expr ::= "equals" "(" Expr "," Expr ")";
IsLess.             Expr ::= "isless" "("Expr "," Expr")";
IsGreater.          Expr ::= "isgreater" "("Expr "," Expr")";
And.                Expr ::= "and" "("Expr "," Expr")";
Or.                 Expr ::= "or" "("Expr "," Expr")";

----IO rules
ReadLine.           Expr ::= "readline";
PrintLine.          Expr ::= "printline" String;

--Arguments rules
TypedArg.           ATypedArg ::= Ident ":" Type;
Arguments.          Args ::= [Arg];
separator           Arg ",";
NameArg.            Arg ::= Ident;
ExprArg.            Arg ::= Expr;

--Type rules
BoolType.           Type1 ::= "Bool";
IntType.            Type1 ::= "Int";
DoubleType.         Type1 ::= "Double";
StringType.         Type1 ::= "String";
ArrayType.          Type1 ::= "["Type"]";
StructType.         Type1 ::= "<"Ident">";
DictType.           Type1 ::= "<" Type "," Type ">";
StructFieldType.    Type ::= "{"Type"}";
FuncType.           Type ::= Type1 "->" Type;
_.                  Type ::= Type1;
_.                  Type1 ::= "(" Type ")";
