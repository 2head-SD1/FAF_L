// This JLex file was machine-generated by the BNF converter
package fafl;
import java_cup.runtime.*;


public class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() {return new String(yy_buffer,yy_buffer_index,10).trim();}
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = {
		0,
		159,
		161,
		161,
		161,
		163,
		165
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NO_ANCHOR,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NO_ANCHOR,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NO_ANCHOR,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NO_ANCHOR,
		/* 169 */ YY_NO_ANCHOR,
		/* 170 */ YY_NO_ANCHOR,
		/* 171 */ YY_NO_ANCHOR,
		/* 172 */ YY_NO_ANCHOR,
		/* 173 */ YY_NO_ANCHOR,
		/* 174 */ YY_NO_ANCHOR,
		/* 175 */ YY_NO_ANCHOR,
		/* 176 */ YY_NO_ANCHOR,
		/* 177 */ YY_NO_ANCHOR,
		/* 178 */ YY_NO_ANCHOR,
		/* 179 */ YY_NO_ANCHOR,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NO_ANCHOR,
		/* 182 */ YY_NO_ANCHOR,
		/* 183 */ YY_NO_ANCHOR,
		/* 184 */ YY_NO_ANCHOR,
		/* 185 */ YY_NO_ANCHOR,
		/* 186 */ YY_NO_ANCHOR,
		/* 187 */ YY_NO_ANCHOR,
		/* 188 */ YY_NO_ANCHOR,
		/* 189 */ YY_NO_ANCHOR,
		/* 190 */ YY_NO_ANCHOR,
		/* 191 */ YY_NO_ANCHOR,
		/* 192 */ YY_NO_ANCHOR,
		/* 193 */ YY_NO_ANCHOR,
		/* 194 */ YY_NO_ANCHOR,
		/* 195 */ YY_NO_ANCHOR,
		/* 196 */ YY_NO_ANCHOR,
		/* 197 */ YY_NO_ANCHOR,
		/* 198 */ YY_NO_ANCHOR,
		/* 199 */ YY_NO_ANCHOR,
		/* 200 */ YY_NO_ANCHOR,
		/* 201 */ YY_NO_ANCHOR,
		/* 202 */ YY_NO_ANCHOR,
		/* 203 */ YY_NO_ANCHOR,
		/* 204 */ YY_NO_ANCHOR,
		/* 205 */ YY_NO_ANCHOR,
		/* 206 */ YY_NO_ANCHOR,
		/* 207 */ YY_NO_ANCHOR,
		/* 208 */ YY_NO_ANCHOR,
		/* 209 */ YY_NO_ANCHOR,
		/* 210 */ YY_NO_ANCHOR,
		/* 211 */ YY_NO_ANCHOR,
		/* 212 */ YY_NO_ANCHOR,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NO_ANCHOR,
		/* 215 */ YY_NO_ANCHOR,
		/* 216 */ YY_NO_ANCHOR,
		/* 217 */ YY_NO_ANCHOR,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NO_ANCHOR,
		/* 220 */ YY_NO_ANCHOR,
		/* 221 */ YY_NO_ANCHOR,
		/* 222 */ YY_NO_ANCHOR,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NO_ANCHOR,
		/* 225 */ YY_NO_ANCHOR,
		/* 226 */ YY_NO_ANCHOR,
		/* 227 */ YY_NO_ANCHOR,
		/* 228 */ YY_NO_ANCHOR,
		/* 229 */ YY_NO_ANCHOR,
		/* 230 */ YY_NO_ANCHOR,
		/* 231 */ YY_NO_ANCHOR,
		/* 232 */ YY_NO_ANCHOR,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NO_ANCHOR,
		/* 235 */ YY_NO_ANCHOR,
		/* 236 */ YY_NOT_ACCEPT,
		/* 237 */ YY_NO_ANCHOR,
		/* 238 */ YY_NO_ANCHOR,
		/* 239 */ YY_NO_ANCHOR,
		/* 240 */ YY_NO_ANCHOR,
		/* 241 */ YY_NO_ANCHOR,
		/* 242 */ YY_NOT_ACCEPT,
		/* 243 */ YY_NO_ANCHOR,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NO_ANCHOR,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NO_ANCHOR,
		/* 248 */ YY_NOT_ACCEPT,
		/* 249 */ YY_NO_ANCHOR,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NO_ANCHOR,
		/* 252 */ YY_NO_ANCHOR,
		/* 253 */ YY_NO_ANCHOR,
		/* 254 */ YY_NO_ANCHOR,
		/* 255 */ YY_NO_ANCHOR,
		/* 256 */ YY_NO_ANCHOR,
		/* 257 */ YY_NO_ANCHOR,
		/* 258 */ YY_NO_ANCHOR,
		/* 259 */ YY_NO_ANCHOR,
		/* 260 */ YY_NO_ANCHOR,
		/* 261 */ YY_NO_ANCHOR,
		/* 262 */ YY_NO_ANCHOR,
		/* 263 */ YY_NO_ANCHOR,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NO_ANCHOR,
		/* 266 */ YY_NOT_ACCEPT,
		/* 267 */ YY_NO_ANCHOR,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"49:9,56,47,49,56,46,49:18,56,49,50,49:4,55,3,4,48,49,10,5,11,45,52:10,2,1,1" +
"2,49,6,49:2,34,35,53,36,38,53:3,40,53:9,41,42,53:6,31,51,32,49,55,49,26,37," +
"15,13,18,43,19,30,14,54,24,27,21,29,22,33,44,20,17,16,28,23,54,39,25,54,7,9" +
",8,49:66,53:23,49,53:7,54:24,49,54:8,49:65280,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,270,
"0,1:12,2,1:4,3,1,4:2,1,4:7,1,5,6,4:10,7,4:15,1:2,4,1,4,1:3,4:2,1:16,8,9,10," +
"11,12,13,14,15,16,17,18,19,20,4,10,21,22,23,24,25,26,27,28,29,30,31,32,33,3" +
"4,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,5" +
"9,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,8" +
"4,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106," +
"107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125" +
",126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,14" +
"4,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,1" +
"63,164,165,166,167,168,169,170,4,171,172,173,174,175,176,177,178,179,180,18" +
"1,182,183,184,185,186,187,188,189")[0];

	private int yy_nxt[][] = unpackFromString(190,57,
"1,2,3,4,5,85,6,7,8,9,10,11,12,13,86,211,231,241,247,250,251,252,90,250:3,25" +
"3,254,250:3,14,15,255,256,257,258,250,259,250,260,261,262,263,250,89,16:2,-" +
"1:2,17,-1,18,250:2,-1,16,-1:70,250,92,250:3,94,250:3,96,250:8,-1:2,250,98:3" +
",250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:12,93,-1:40,18,-1:17,250:18,-1:2" +
",250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,95,-1:33,31,-1:9,97," +
"-1:7,250:18,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:6,105,-" +
"1:7,250:18,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:7,19,-1:" +
"63,250:4,100,250:11,102,250,-1:2,250,98:3,250,98,250,98:3,20,250,-1:7,98:2," +
"250,98,-1:53,87,-1:49,76,-1:56,91,-1:2,22,-1:21,250:7,21,250:10,-1:2,250,98" +
":3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:2,91:46,30,91:9,-1:13,250:2,14" +
"0,250:7,23,250:7,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:53" +
",31,-1:17,250:18,-1:2,250,98:3,250,98,250,98:3,235,250,-1:7,98:2,250,98,-1:" +
"6,99,-1:46,87,-1:17,250:15,142,250:2,-1:2,250,98:3,250,98,250,98:3,250:2,-1" +
":7,98:2,250,98,-1:18,101,-1,213,233,-1:2,103,242,-1:2,248,-1:42,250:6,249,2" +
"50:7,214,250:3,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,1" +
"09,-1:51,250:3,24,250:14,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250," +
"98,-1:27,115,-1:43,250:3,220,250:10,144,250:3,-1:2,250,98:3,250,98,250,98:3" +
",250:2,-1:7,98:2,250,98,-1:20,121,-1:7,218,-1:42,250:12,25,250:2,146,250:2," +
"-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:18,236,-1,244,-1:7," +
"269,-1:42,250:18,-1:2,221,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:17" +
",59,-1:53,250:5,148,250:12,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,25" +
"0,98,-1:17,60,-1:53,250:7,150,250:10,-1:2,250,98:3,250,98,250,98:3,250:2,-1" +
":7,98:2,250,98,-1:22,123,-1:48,250:3,152,250:14,-1:2,250,98:3,250,98,250,98" +
":3,250:2,-1:7,98:2,250,98,-1:28,125,-1:42,250:4,154,250:13,-1:2,250,98:3,25" +
"0,98,250,98:3,250:2,-1:7,98:2,250,98,-1:26,127,-1:44,250:8,219,250:4,158,25" +
"0:4,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:30,129,-1:40,25" +
"0,160,250:16,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,131" +
",-1:51,250:16,162,250,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98," +
"-1:23,139,-1:47,250:14,26,250:3,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98" +
":2,250,98,-1:29,141,-1:41,27,250:17,-1:2,250,98:3,250,98,250,98:3,250:2,-1:" +
"7,98:2,250,98,-1:18,62,-1:52,28,250:17,-1:2,250,98:3,250,98,250,98:3,250:2," +
"-1:7,98:2,250,98,-1:20,143,-1:50,250:4,164,250:3,222,250:9,-1:2,250,98:3,25" +
"0,98,250,98:3,250:2,-1:7,98:2,250,98,-1:17,64,-1:53,250:9,169,250:8,-1:2,25" +
"0,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:30,145,-1:40,250:2,170,250" +
":15,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:17,65,-1:53,250" +
":3,29,250:14,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:17,66," +
"-1:53,250:14,238,250:3,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98" +
",-1:24,147,-1:46,250:3,32,250:14,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,9" +
"8:2,250,98,-1:19,149,-1:51,250:18,-1:2,250,98:3,172,98,250,98:3,250:2,-1:7," +
"98:2,250,98,-1:17,151,-1:53,250:14,33,250:3,-1:2,250,98:3,250,98,250,98:3,2" +
"50:2,-1:7,98:2,250,98,-1:20,153,-1:50,250:5,34,250:12,-1:2,250,98:3,250,98," +
"250,98:3,250:2,-1:7,98:2,250,98,-1:19,69,-1:51,250:16,35,250,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:18,70,-1:52,250,239,250:13,175,25" +
"0:2,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:31,71,-1:39,250" +
":18,-1:2,250,98:3,250,98,250,98:3,250,36,-1:7,98:2,250,98,-1:17,155,-1:53,2" +
"50:5,37,250:12,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:31,7" +
"2,-1:39,250:13,228,250:4,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250," +
"98,-1:31,73,-1:39,240,250:17,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2," +
"250,98,-1,1,74:45,-1,75,88,74:8,-1:13,250:4,177,250:13,-1:2,250,98:3,250,98" +
",250,98:3,250:2,-1:7,98:2,250,98,-1,1,-1:69,250:15,178,250:2,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1,1,77:45,-1:2,77:2,78,79,77:5,-1:1" +
"3,250:3,38,250:14,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1,1" +
",80:15,81,80:12,82,80:16,-1:2,80:2,83,84,80:5,-1:13,250:16,181,250,-1:2,250" +
",98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:4,39,250:13,-1:2,250" +
",98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:9,40,250:8,-1:2,250," +
"98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,41,250:3,-1:2,250," +
"98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,182,250:12,-1:2,250" +
",98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250,183,250:16,-1:2,250," +
"98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,188,250:3,-1:2,250" +
",98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:17,42,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,43,250:12,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:2,192,250:15,-1:2,250,98:3" +
",250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:10,194,250:7,-1:2,250,98:" +
"3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,44,250:12,-1:2,250,98:" +
"3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:4,45,250:13,-1:2,250,98:" +
"3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:12,196,250:5,-1:2,250,98" +
":3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,197,250:17,-1:2,250,98:3,25" +
"0,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,198,250:14,-1:2,250,98:3,2" +
"50,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:18,-1:2,200,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:16,201,250,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,46,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,47,250:14,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,48,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,49,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,50,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:13,229,250:4,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:4,51,250:13,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:6,52,250:11,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,53,250:14,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:4,54,250:13,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,55,250:12,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250,202,250:16,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:6,107,-1:7,250:18,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:13,56,250:4,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:14,203,250:3,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,57,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,230,250:14,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:6,58,250:11,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:16,205,250,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250,206,250:16,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:5,208,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,61,250:12,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:16,209,250,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:9,210,250:8,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:7,63,250:10,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:5,67,250:12,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:14,250:16,68,250,-1:2,250,98:3,250,98,250,98:" +
"3,250:2,-1:7,98:2,250,98,-1:14,250:13,104,250:4,-1:2,250,98:3,250,98,250,98" +
":3,250:2,-1:7,98:2,250,98,-1:14,250:15,156,250:2,-1:2,250,98:3,250,98,250,9" +
"8:3,250:2,-1:7,98:2,250,98,-1:19,111,-1:51,250:5,245,250:12,-1:2,250,98:3,2" +
"50,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:7,224,250:10,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,168,250:14,-1:2,250,98:3" +
",250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250,166,250:16,-1:2,250,98:3," +
"250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,133,-1:51,250:9,176,250:8,-1:2" +
",250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:2,173,250:15,-1:" +
"2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,174,250:3,-1" +
":2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:18,-1:2,250,98" +
":3,180,98,250,98:3,250:2,-1:7,98:2,250,98,-1:17,157,-1:53,250:13,179,250:4," +
"-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:4,185,250:13" +
",-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:16,187,250," +
"-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,189,250:12" +
",-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,193,250:" +
"3,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:3,204,250:" +
"14,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250,207,250:1" +
"6,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:7,106,250:" +
"7,108,250,110,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,25" +
"0:15,167,250:2,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,1" +
"13,-1:51,250:7,171,250:10,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250" +
",98,-1:14,250,226,250:16,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250," +
"98,-1:19,135,-1:51,250:14,184,250:3,-1:2,250,98:3,250,98,250,98:3,250:2,-1:" +
"7,98:2,250,98,-1:14,250:4,186,250:13,-1:2,250,98:3,250,98,250,98:3,250:2,-1" +
":7,98:2,250,98,-1:14,250:16,191,250,-1:2,250,98:3,250,98,250,98:3,250:2,-1:" +
"7,98:2,250,98,-1:14,250:14,195,250:3,-1:2,250,98:3,250,98,250,98:3,250:2,-1" +
":7,98:2,250,98,-1:14,250:3,112,250,114,250:12,-1:2,250,98:3,250,98,250,98:3" +
",250:2,-1:7,98:2,250,98,-1:19,117,-1:51,250:7,225,250:10,-1:2,250,98:3,250," +
"98,250,98:3,250:2,-1:7,98:2,250,98,-1:19,137,-1:51,250:4,190,250:13,-1:2,25" +
"0,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,199,250:3,-1:2,2" +
"50,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:14,116,250:3,-1:2," +
"250,98:3,250,98,250,98:3,250,212,-1:7,98:2,250,98,-1:19,119,-1:51,250:7,227" +
",250:10,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:14,250:5,11" +
"8,250:7,120,250:4,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,250,98,-1:1" +
"4,250,122,250:13,124,250:2,-1:2,250,98:3,250,98,250,98:3,250:2,-1:7,98:2,25" +
"0,98,-1:14,126,250:6,215,250:8,128,250,-1:2,250,98:3,250,98,250,98:3,250:2," +
"-1:7,98:2,250,98,-1:14,250:13,130,250:4,-1:2,250,98:3,250,98,250,98:3,250:2" +
",-1:7,98:2,250,98,-1:14,250:7,217,250:6,232,250:3,-1:2,250,98:3,250,98,250," +
"98:3,250:2,-1:7,98:2,250,98,-1:14,250:15,216,250:2,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:9,132,250:8,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:9,267,250:8,-1:2,250,98:3,250,98,250" +
",98:3,250:2,-1:7,98:2,250,98,-1:14,250:18,-1:2,250,98:3,250,98,134,98:3,250" +
":2,-1:7,98:2,250,98,-1:14,250:16,136,250,-1:2,250,98:3,250,98,250,98:3,250:" +
"2,-1:7,98:2,250,98,-1:14,250:3,234,250:14,-1:2,250,98:3,250,98,250,98:3,250" +
":2,-1:7,98:2,250,98,-1:14,250:15,264,250:2,-1:2,250,98:3,250,98,250,98:3,25" +
"0:2,-1:7,98:2,250,98,-1:14,250,243,250:11,138,250:4,-1:2,250,98:3,250,98,25" +
"0,98:3,250:2,-1:7,98:2,250,98,-1:14,250:18,-1:2,237,98:3,250,98,250,98:3,25" +
"0:2,-1:7,98:2,250,98,-1:14,250:18,-1:2,250,98:3,246,98,250,98:3,250:2,-1:7," +
"98:2,250,98,-1:20,223,-1:50,250:15,265,250:2,-1:2,250,98:3,250,98,250,98:3," +
"250:2,-1:7,98:2,250,98,-1:30,266,-1:45,268,-1:38");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym._SYMB_0); }
					case -3:
						break;
					case 3:
						{ return new Symbol(sym._SYMB_1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym._SYMB_2); }
					case -5:
						break;
					case 5:
						{ return new Symbol(sym._SYMB_3); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym._SYMB_11); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym._SYMB_5); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym._SYMB_6); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym._SYMB_7); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym._SYMB_8); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym._SYMB_9); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym._SYMB_10); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym._SYMB_18); }
					case -15:
						break;
					case 15:
						{ return new Symbol(sym._SYMB_19); }
					case -16:
						break;
					case 16:
						{ /* ignore white space. */ }
					case -17:
						break;
					case 17:
						{ yybegin(STRING); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym._SYMB_4); }
					case -20:
						break;
					case 20:
						{ return new Symbol(sym._SYMB_44); }
					case -21:
						break;
					case 21:
						{ return new Symbol(sym._SYMB_52); }
					case -22:
						break;
					case 22:
						{ yybegin(COMMENT); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym._SYMB_38); }
					case -24:
						break;
					case 24:
						{ return new Symbol(sym._SYMB_45); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym._SYMB_63); }
					case -26:
						break;
					case 26:
						{ return new Symbol(sym._SYMB_51); }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym._SYMB_32); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym._SYMB_33); }
					case -29:
						break;
					case 29:
						{ return new Symbol(sym._SYMB_29); }
					case -30:
						break;
					case 30:
						{ /* BNFC single-line comment */ }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym._SYMB_37); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym._SYMB_34); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym._SYMB_62); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym._SYMB_61); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym._SYMB_58); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym._SYMB_40); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym._SYMB_49); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym._SYMB_53); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym._SYMB_25); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym._SYMB_26); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym._SYMB_35); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym._SYMB_64); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym._SYMB_55); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym._SYMB_50); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym._SYMB_31); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym._SYMB_43); }
					case -48:
						break;
					case 48:
						{ return new Symbol(sym._SYMB_42); }
					case -49:
						break;
					case 49:
						{ return new Symbol(sym._SYMB_36); }
					case -50:
						break;
					case 50:
						{ return new Symbol(sym._SYMB_39); }
					case -51:
						break;
					case 51:
						{ return new Symbol(sym._SYMB_47); }
					case -52:
						break;
					case 52:
						{ return new Symbol(sym._SYMB_59); }
					case -53:
						break;
					case 53:
						{ return new Symbol(sym._SYMB_60); }
					case -54:
						break;
					case 54:
						{ return new Symbol(sym._SYMB_41); }
					case -55:
						break;
					case 55:
						{ return new Symbol(sym._SYMB_57); }
					case -56:
						break;
					case 56:
						{ return new Symbol(sym._SYMB_48); }
					case -57:
						break;
					case 57:
						{ return new Symbol(sym._SYMB_27); }
					case -58:
						break;
					case 58:
						{ return new Symbol(sym._SYMB_30); }
					case -59:
						break;
					case 59:
						{ return new Symbol(sym._SYMB_12); }
					case -60:
						break;
					case 60:
						{ return new Symbol(sym._SYMB_13); }
					case -61:
						break;
					case 61:
						{ return new Symbol(sym._SYMB_56); }
					case -62:
						break;
					case 62:
						{ return new Symbol(sym._SYMB_15); }
					case -63:
						break;
					case 63:
						{ return new Symbol(sym._SYMB_46); }
					case -64:
						break;
					case 64:
						{ return new Symbol(sym._SYMB_23); }
					case -65:
						break;
					case 65:
						{ return new Symbol(sym._SYMB_21); }
					case -66:
						break;
					case 66:
						{ return new Symbol(sym._SYMB_20); }
					case -67:
						break;
					case 67:
						{ return new Symbol(sym._SYMB_54); }
					case -68:
						break;
					case 68:
						{ return new Symbol(sym._SYMB_28); }
					case -69:
						break;
					case 69:
						{ return new Symbol(sym._SYMB_14); }
					case -70:
						break;
					case 70:
						{ return new Symbol(sym._SYMB_16); }
					case -71:
						break;
					case 71:
						{ return new Symbol(sym._SYMB_17); }
					case -72:
						break;
					case 72:
						{ return new Symbol(sym._SYMB_24); }
					case -73:
						break;
					case 73:
						{ return new Symbol(sym._SYMB_22); }
					case -74:
						break;
					case 74:
						{ }
					case -75:
						break;
					case 75:
						{ }
					case -76:
						break;
					case 76:
						{ yybegin(YYINITIAL); }
					case -77:
						break;
					case 77:
						{ pstring += yytext(); }
					case -78:
						break;
					case 78:
						{ String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
					case -79:
						break;
					case 79:
						{ yybegin(ESCAPED); }
					case -80:
						break;
					case 80:
						{ pstring += yytext(); yybegin(STRING); }
					case -81:
						break;
					case 81:
						{ pstring += "\t"; yybegin(STRING); }
					case -82:
						break;
					case 82:
						{ pstring +=  "\n"; yybegin(STRING); }
					case -83:
						break;
					case 83:
						{ pstring += "\""; yybegin(STRING); }
					case -84:
						break;
					case 84:
						{ pstring += "\\"; yybegin(STRING); }
					case -85:
						break;
					case 86:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -86:
						break;
					case 87:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -87:
						break;
					case 88:
						{ }
					case -88:
						break;
					case 90:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -89:
						break;
					case 92:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -90:
						break;
					case 94:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -91:
						break;
					case 96:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -92:
						break;
					case 98:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -93:
						break;
					case 100:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -94:
						break;
					case 102:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -95:
						break;
					case 104:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -96:
						break;
					case 106:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -97:
						break;
					case 108:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -98:
						break;
					case 110:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -99:
						break;
					case 112:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -100:
						break;
					case 114:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -101:
						break;
					case 116:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -102:
						break;
					case 118:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -103:
						break;
					case 120:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -104:
						break;
					case 122:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -105:
						break;
					case 124:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -106:
						break;
					case 126:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -107:
						break;
					case 128:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -108:
						break;
					case 130:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -109:
						break;
					case 132:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -110:
						break;
					case 134:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -111:
						break;
					case 136:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -112:
						break;
					case 138:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -113:
						break;
					case 140:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -114:
						break;
					case 142:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -115:
						break;
					case 144:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -116:
						break;
					case 146:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -117:
						break;
					case 148:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -118:
						break;
					case 150:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -119:
						break;
					case 152:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -120:
						break;
					case 154:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -121:
						break;
					case 156:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -122:
						break;
					case 158:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -123:
						break;
					case 160:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -124:
						break;
					case 162:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -125:
						break;
					case 164:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -126:
						break;
					case 166:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -127:
						break;
					case 167:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -128:
						break;
					case 168:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -129:
						break;
					case 169:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -130:
						break;
					case 170:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -131:
						break;
					case 171:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -132:
						break;
					case 172:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -133:
						break;
					case 173:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -134:
						break;
					case 174:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -135:
						break;
					case 175:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -136:
						break;
					case 176:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -137:
						break;
					case 177:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -138:
						break;
					case 178:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -139:
						break;
					case 179:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -140:
						break;
					case 180:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -141:
						break;
					case 181:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -142:
						break;
					case 182:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -143:
						break;
					case 183:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -144:
						break;
					case 184:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -145:
						break;
					case 185:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -146:
						break;
					case 186:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -147:
						break;
					case 187:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -148:
						break;
					case 188:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -149:
						break;
					case 189:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -150:
						break;
					case 190:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -151:
						break;
					case 191:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -152:
						break;
					case 192:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -153:
						break;
					case 193:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -154:
						break;
					case 194:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -155:
						break;
					case 195:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -156:
						break;
					case 196:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -157:
						break;
					case 197:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -158:
						break;
					case 198:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -159:
						break;
					case 199:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -160:
						break;
					case 200:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -161:
						break;
					case 201:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -162:
						break;
					case 202:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -163:
						break;
					case 203:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -164:
						break;
					case 204:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -165:
						break;
					case 205:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -166:
						break;
					case 206:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -167:
						break;
					case 207:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -168:
						break;
					case 208:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -169:
						break;
					case 209:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -170:
						break;
					case 210:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -171:
						break;
					case 211:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -172:
						break;
					case 212:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -173:
						break;
					case 214:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -174:
						break;
					case 215:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -175:
						break;
					case 216:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -176:
						break;
					case 217:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -177:
						break;
					case 219:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -178:
						break;
					case 220:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -179:
						break;
					case 221:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -180:
						break;
					case 222:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -181:
						break;
					case 224:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -182:
						break;
					case 225:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -183:
						break;
					case 226:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -184:
						break;
					case 227:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -185:
						break;
					case 228:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -186:
						break;
					case 229:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -187:
						break;
					case 230:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -188:
						break;
					case 231:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -189:
						break;
					case 232:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -190:
						break;
					case 234:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -191:
						break;
					case 235:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -192:
						break;
					case 237:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -193:
						break;
					case 238:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -194:
						break;
					case 239:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -195:
						break;
					case 240:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -196:
						break;
					case 241:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -197:
						break;
					case 243:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -198:
						break;
					case 245:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -199:
						break;
					case 246:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -200:
						break;
					case 247:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -201:
						break;
					case 249:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -202:
						break;
					case 250:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -203:
						break;
					case 251:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -204:
						break;
					case 252:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -205:
						break;
					case 253:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -206:
						break;
					case 254:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -207:
						break;
					case 255:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -208:
						break;
					case 256:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -209:
						break;
					case 257:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -210:
						break;
					case 258:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -211:
						break;
					case 259:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -212:
						break;
					case 260:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -213:
						break;
					case 261:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -214:
						break;
					case 262:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -215:
						break;
					case 263:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -216:
						break;
					case 264:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -217:
						break;
					case 265:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -218:
						break;
					case 267:
						{ return new Symbol(sym._IDENT_, yytext().intern()); }
					case -219:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
