// This JLex file was machine-generated by the BNF converter
package fafl;

import java_cup.runtime.*;
%%
%cup
%unicode
%line
%public
%{
  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() {return new String(yy_buffer,yy_buffer_index,10).trim();}
%}
LETTER = ({CAPITAL}|{SMALL})
CAPITAL = [A-Z\xC0-\xD6\xD8-\xDE]
SMALL = [a-z\xDF-\xF6\xF8-\xFF]
DIGIT = [0-9]
IDENT = ({LETTER}|{DIGIT}|['_])
%state COMMENT
%state CHAR
%state CHARESC
%state CHAREND
%state STRING
%state ESCAPED
%%
<YYINITIAL>; { return new Symbol(sym._SYMB_0); }
<YYINITIAL>: { return new Symbol(sym._SYMB_1); }
<YYINITIAL>\( { return new Symbol(sym._SYMB_2); }
<YYINITIAL>\) { return new Symbol(sym._SYMB_3); }
<YYINITIAL>-> { return new Symbol(sym._SYMB_4); }
<YYINITIAL>\{ { return new Symbol(sym._SYMB_5); }
<YYINITIAL>\} { return new Symbol(sym._SYMB_6); }
<YYINITIAL>, { return new Symbol(sym._SYMB_7); }
<YYINITIAL>\. { return new Symbol(sym._SYMB_8); }
<YYINITIAL>< { return new Symbol(sym._SYMB_9); }
<YYINITIAL>> { return new Symbol(sym._SYMB_10); }
<YYINITIAL>dict-set { return new Symbol(sym._SYMB_11); }
<YYINITIAL>\[ { return new Symbol(sym._SYMB_12); }
<YYINITIAL>\] { return new Symbol(sym._SYMB_13); }
<YYINITIAL>array-set { return new Symbol(sym._SYMB_14); }
<YYINITIAL>Bool { return new Symbol(sym._SYMB_15); }
<YYINITIAL>Double { return new Symbol(sym._SYMB_16); }
<YYINITIAL>Exception { return new Symbol(sym._SYMB_17); }
<YYINITIAL>Int { return new Symbol(sym._SYMB_18); }
<YYINITIAL>String { return new Symbol(sym._SYMB_19); }
<YYINITIAL>and { return new Symbol(sym._SYMB_20); }
<YYINITIAL>catch { return new Symbol(sym._SYMB_21); }
<YYINITIAL>define { return new Symbol(sym._SYMB_22); }
<YYINITIAL>dict { return new Symbol(sym._SYMB_23); }
<YYINITIAL>div { return new Symbol(sym._SYMB_24); }
<YYINITIAL>else { return new Symbol(sym._SYMB_25); }
<YYINITIAL>equals { return new Symbol(sym._SYMB_26); }
<YYINITIAL>false { return new Symbol(sym._SYMB_27); }
<YYINITIAL>first { return new Symbol(sym._SYMB_28); }
<YYINITIAL>get { return new Symbol(sym._SYMB_29); }
<YYINITIAL>if { return new Symbol(sym._SYMB_30); }
<YYINITIAL>isgreater { return new Symbol(sym._SYMB_31); }
<YYINITIAL>isless { return new Symbol(sym._SYMB_32); }
<YYINITIAL>lambda { return new Symbol(sym._SYMB_33); }
<YYINITIAL>length { return new Symbol(sym._SYMB_34); }
<YYINITIAL>minus { return new Symbol(sym._SYMB_35); }
<YYINITIAL>mul { return new Symbol(sym._SYMB_36); }
<YYINITIAL>or { return new Symbol(sym._SYMB_37); }
<YYINITIAL>plus { return new Symbol(sym._SYMB_38); }
<YYINITIAL>printline { return new Symbol(sym._SYMB_39); }
<YYINITIAL>raise { return new Symbol(sym._SYMB_40); }
<YYINITIAL>readline { return new Symbol(sym._SYMB_41); }
<YYINITIAL>setq { return new Symbol(sym._SYMB_42); }
<YYINITIAL>struct { return new Symbol(sym._SYMB_43); }
<YYINITIAL>then { return new Symbol(sym._SYMB_44); }
<YYINITIAL>true { return new Symbol(sym._SYMB_45); }
<YYINITIAL>try { return new Symbol(sym._SYMB_46); }
<YYINITIAL>"//"[^\n]*\n { /* BNFC single-line comment */ }
<YYINITIAL>"/*" { yybegin(COMMENT); }
<COMMENT>"*/" { yybegin(YYINITIAL); }
<COMMENT>. { }
<COMMENT>[\n] { }



<YYINITIAL>"\"" { yybegin(STRING); }
<STRING>\\ { yybegin(ESCAPED); }
<STRING>\" { String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
<STRING>.  { pstring += yytext(); }
<ESCAPED>n { pstring +=  "\n"; yybegin(STRING); }
<ESCAPED>\" { pstring += "\""; yybegin(STRING); }
<ESCAPED>\\ { pstring += "\\"; yybegin(STRING); }
<ESCAPED>t  { pstring += "\t"; yybegin(STRING); }
<ESCAPED>.  { pstring += yytext(); yybegin(STRING); }


<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)? { return new Symbol(sym._DOUBLE_, new Double(yytext())); }
<YYINITIAL>{DIGIT}+ { return new Symbol(sym._INTEGER_, new Integer(yytext())); }
<YYINITIAL>{LETTER}{IDENT}* { return new Symbol(sym._IDENT_, yytext().intern()); }
<YYINITIAL>[ \t\r\n\f] { /* ignore white space. */ }
