
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\007\000\002\004\014\000\002\004\016\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\003\000" +
    "\002\004\010\000\002\004\013\000\002\004\014\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\011" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\012\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\007\000\002\004" +
    "\010\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\003\000\002\006\002\000\002\006\003" +
    "\000\002\006\005\000\002\006\002\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\010\005\000\002" +
    "\011\007\000\002\012\002\000\002\012\003\000\002\012" +
    "\005\000\002\013\005\000\002\014\003\000\002\015\002" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\007" +
    "\000\002\017\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\152\002\uffff\006\027\011\026\016\023\020" +
    "\017\021\015\022\013\023\011\024\010\025\005\026\004" +
    "\030\070\031\065\032\063\033\062\034\060\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\043\043\044\042" +
    "\046\041\047\040\050\037\051\036\053\035\054\025\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\012" +
    "\064\007\065\006\066\072\067\071\070\067\071\066\072" +
    "\064\073\061\075\056\076\055\077\052\100\034\101\033" +
    "\102\075\103\030\001\002\000\026\006\133\011\026\016" +
    "\023\026\004\035\057\036\054\037\051\040\047\041\046" +
    "\042\044\001\002\000\004\006\u010c\001\002\000\004\006" +
    "\u0107\001\002\000\004\006\u0104\001\002\000\004\006\u0101" +
    "\001\002\000\004\006\376\001\002\000\004\006\373\001" +
    "\002\000\004\006\366\001\002\000\004\006\363\001\002" +
    "\000\004\006\356\001\002\000\004\006\346\001\002\000" +
    "\004\006\341\001\002\000\004\006\334\001\002\000\004" +
    "\006\327\001\002\000\150\006\027\011\026\016\023\020" +
    "\017\021\015\022\013\023\011\024\010\025\005\026\004" +
    "\030\070\031\065\032\063\033\062\034\060\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\043\043\044\042" +
    "\046\041\047\040\050\037\051\036\053\035\054\025\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\012" +
    "\064\007\065\006\066\072\067\071\070\067\071\066\072" +
    "\064\073\061\075\056\076\055\077\052\100\034\101\033" +
    "\102\075\103\030\001\002\000\030\006\133\011\026\016" +
    "\023\026\004\035\057\036\054\037\051\040\047\041\046" +
    "\042\044\103\315\001\002\000\004\006\311\001\002\000" +
    "\026\002\uffca\004\uffca\007\uffca\012\uffca\014\uffca\015\uffca" +
    "\027\uffca\045\uffca\052\uffca\074\uffca\001\002\000\026\006" +
    "\133\011\026\016\023\026\004\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\001\002\000\150\006\027\011" +
    "\026\016\023\020\017\021\015\022\013\023\011\024\010" +
    "\025\005\026\004\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\046\041\047\040\050\037\051\036\053" +
    "\035\054\025\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\012\064\007\065\006\066\072\067\071\070" +
    "\067\071\066\072\064\073\061\075\056\076\055\077\052" +
    "\100\034\101\033\102\075\103\030\001\002\000\030\002" +
    "\ufff3\004\ufff3\006\142\007\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\027\ufff3\045\ufff3\052\ufff3\074\ufff3\001\002\000\004\002" +
    "\303\001\002\000\166\006\uffaa\007\uffaa\010\301\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\102\uffaa\103\uffaa\001\002\000\026\002\ufff7\004\ufff7\007" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\027\ufff7\045\ufff7\052\ufff7" +
    "\074\ufff7\001\002\000\026\002\ufff4\004\ufff4\007\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\027\ufff4\045\ufff4\052\ufff4\074\ufff4" +
    "\001\002\000\004\006\274\001\002\000\004\006\271\001" +
    "\002\000\004\006\266\001\002\000\004\103\245\001\002" +
    "\000\004\103\226\001\002\000\004\103\222\001\002\000" +
    "\004\006\215\001\002\000\166\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\001\002\000\004\002\000\001" +
    "\002\000\166\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\001\002\000\166\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\001\002\000\014\002\ufffe\004\211" +
    "\007\ufffe\012\ufffe\014\212\001\002\000\166\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\001\002\000\004" +
    "\006\206\001\002\000\026\002\uffec\004\uffec\007\uffec\012" +
    "\uffec\014\uffec\015\204\027\uffec\045\uffec\052\uffec\074\uffec" +
    "\001\002\000\166\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\026\002\uffcb\004\uffcb" +
    "\007\uffcb\012\uffcb\014\uffcb\015\uffcb\027\uffcb\045\uffcb\052" +
    "\uffcb\074\uffcb\001\002\000\166\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\001\002\000\004\006\174\001" +
    "\002\000\004\103\162\001\002\000\004\006\155\001\002" +
    "\000\004\006\152\001\002\000\004\103\130\001\002\000" +
    "\004\006\121\001\002\000\026\002\uffcd\004\uffcd\007\uffcd" +
    "\012\uffcd\014\uffcd\015\uffcd\027\uffcd\045\uffcd\052\uffcd\074" +
    "\uffcd\001\002\000\004\037\115\001\002\000\004\006\110" +
    "\001\002\000\004\100\107\001\002\000\004\006\104\001" +
    "\002\000\004\026\076\001\002\000\026\002\ufff5\004\ufff5" +
    "\007\ufff5\012\ufff5\014\ufff5\015\ufff5\027\ufff5\045\ufff5\052" +
    "\ufff5\074\ufff5\001\002\000\026\002\ufff6\004\ufff6\007\ufff6" +
    "\012\ufff6\014\ufff6\015\ufff6\027\ufff6\045\ufff6\052\ufff6\074" +
    "\ufff6\001\002\000\150\006\027\011\026\016\023\020\017" +
    "\021\015\022\013\023\011\024\010\025\005\026\004\030" +
    "\070\031\065\032\063\033\062\034\060\035\057\036\054" +
    "\037\051\040\047\041\046\042\044\043\043\044\042\046" +
    "\041\047\040\050\037\051\036\053\035\054\025\055\024" +
    "\056\022\057\021\060\020\061\016\062\014\063\012\064" +
    "\007\065\006\066\072\067\071\070\067\071\066\072\064" +
    "\073\061\075\056\076\055\077\052\100\034\101\033\102" +
    "\075\103\030\001\002\000\004\027\100\001\002\000\004" +
    "\011\101\001\002\000\152\006\027\011\026\012\uffff\016" +
    "\023\020\017\021\015\022\013\023\011\024\010\025\005" +
    "\026\004\030\070\031\065\032\063\033\062\034\060\035" +
    "\057\036\054\037\051\040\047\041\046\042\044\043\043" +
    "\044\042\046\041\047\040\050\037\051\036\053\035\054" +
    "\025\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\012\064\007\065\006\066\072\067\071\070\067\071" +
    "\066\072\064\073\061\075\056\076\055\077\052\100\034" +
    "\101\033\102\075\103\030\001\002\000\004\012\103\001" +
    "\002\000\026\002\uffe2\004\uffe2\007\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\027\uffe2\045\uffe2\052\uffe2\074\uffe2\001\002\000" +
    "\152\006\027\007\uffff\011\026\016\023\020\017\021\015" +
    "\022\013\023\011\024\010\025\005\026\004\030\070\031" +
    "\065\032\063\033\062\034\060\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\043\043\044\042\046\041\047" +
    "\040\050\037\051\036\053\035\054\025\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\012\064\007\065" +
    "\006\066\072\067\071\070\067\071\066\072\064\073\061" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\030\001\002\000\004\007\106\001\002\000\026\002\uffd7" +
    "\004\uffd7\007\uffd7\012\uffd7\014\uffd7\015\uffd7\027\uffd7\045" +
    "\uffd7\052\uffd7\074\uffd7\001\002\000\026\002\uffcc\004\uffcc" +
    "\007\uffcc\012\uffcc\014\uffcc\015\uffcc\027\uffcc\045\uffcc\052" +
    "\uffcc\074\uffcc\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\014\112\001\002" +
    "\000\150\006\027\011\026\016\023\020\017\021\015\022" +
    "\013\023\011\024\010\025\005\026\004\030\070\031\065" +
    "\032\063\033\062\034\060\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\043\043\044\042\046\041\047\040" +
    "\050\037\051\036\053\035\054\025\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\012\064\007\065\006" +
    "\066\072\067\071\070\067\071\066\072\064\073\061\075" +
    "\056\076\055\077\052\100\034\101\033\102\075\103\030" +
    "\001\002\000\004\007\114\001\002\000\026\002\uffdf\004" +
    "\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\027\uffdf\045\uffdf" +
    "\052\uffdf\074\uffdf\001\002\000\004\006\116\001\002\000" +
    "\004\100\117\001\002\000\004\007\120\001\002\000\026" +
    "\002\uffd9\004\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\027" +
    "\uffd9\045\uffd9\052\uffd9\074\uffd9\001\002\000\150\006\027" +
    "\011\026\016\023\020\017\021\015\022\013\023\011\024" +
    "\010\025\005\026\004\030\070\031\065\032\063\033\062" +
    "\034\060\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\043\043\044\042\046\041\047\040\050\037\051\036" +
    "\053\035\054\025\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\012\064\007\065\006\066\072\067\071" +
    "\070\067\071\066\072\064\073\061\075\056\076\055\077" +
    "\052\100\034\101\033\102\075\103\030\001\002\000\004" +
    "\014\123\001\002\000\150\006\027\011\026\016\023\020" +
    "\017\021\015\022\013\023\011\024\010\025\005\026\004" +
    "\030\070\031\065\032\063\033\062\034\060\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\043\043\044\042" +
    "\046\041\047\040\050\037\051\036\053\035\054\025\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\012" +
    "\064\007\065\006\066\072\067\071\070\067\071\066\072" +
    "\064\073\061\075\056\076\055\077\052\100\034\101\033" +
    "\102\075\103\030\001\002\000\004\014\125\001\002\000" +
    "\150\006\027\011\026\016\023\020\017\021\015\022\013" +
    "\023\011\024\010\025\005\026\004\030\070\031\065\032" +
    "\063\033\062\034\060\035\057\036\054\037\051\040\047" +
    "\041\046\042\044\043\043\044\042\046\041\047\040\050" +
    "\037\051\036\053\035\054\025\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\012\064\007\065\006\066" +
    "\072\067\071\070\067\071\066\072\064\073\061\075\056" +
    "\076\055\077\052\100\034\101\033\102\075\103\030\001" +
    "\002\000\004\007\127\001\002\000\026\002\uffde\004\uffde" +
    "\007\uffde\012\uffde\014\uffde\015\uffde\027\uffde\045\uffde\052" +
    "\uffde\074\uffde\001\002\000\004\005\131\001\002\000\030" +
    "\006\133\011\026\016\023\026\004\035\057\036\054\037" +
    "\051\040\047\041\046\042\044\103\134\001\002\000\150" +
    "\006\027\011\026\016\023\020\017\021\015\022\013\023" +
    "\011\024\010\025\005\026\004\030\070\031\065\032\063" +
    "\033\062\034\060\035\057\036\054\037\051\040\047\041" +
    "\046\042\044\043\043\044\042\046\041\047\040\050\037" +
    "\051\036\053\035\054\025\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\012\064\007\065\006\066\072" +
    "\067\071\070\067\071\066\072\064\073\061\075\056\076" +
    "\055\077\052\100\034\101\033\102\075\103\030\001\002" +
    "\000\026\006\133\011\026\016\023\026\004\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\001\002\000\174" +
    "\002\uffbb\004\uffbb\006\027\007\uffbb\011\026\012\uffbb\014" +
    "\uffbb\015\uffbb\016\023\020\017\021\015\022\013\023\011" +
    "\024\010\025\005\026\004\027\uffbb\030\070\031\065\032" +
    "\063\033\062\034\060\035\057\036\054\037\051\040\047" +
    "\041\046\042\044\043\043\044\042\045\uffbb\046\041\047" +
    "\040\050\037\051\036\052\uffbb\053\035\054\025\055\024" +
    "\056\022\057\021\060\020\061\016\062\014\063\012\064" +
    "\007\065\006\066\072\067\071\070\067\071\066\072\064" +
    "\073\061\074\uffbb\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\136\001\002\000\026\002\uffba\004\uffba" +
    "\007\uffba\012\uffba\014\145\015\uffba\027\uffba\045\uffba\052" +
    "\uffba\074\uffba\001\002\000\030\002\ufff3\004\ufff3\006\142" +
    "\007\ufff3\012\ufff3\014\ufff3\015\ufff3\027\ufff3\045\ufff3\052" +
    "\ufff3\074\ufff3\001\002\000\026\002\ufff8\004\ufff8\007\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\027\ufff8\045\ufff8\052\ufff8\074" +
    "\ufff8\001\002\000\026\002\uffb7\004\uffb7\007\uffb7\012\uffb7" +
    "\014\uffb7\015\uffb7\027\uffb7\045\uffb7\052\uffb7\074\uffb7\001" +
    "\002\000\026\002\uffbc\004\uffbc\007\uffbc\012\uffbc\014\uffbc" +
    "\015\uffbc\027\uffbc\045\uffbc\052\uffbc\074\uffbc\001\002\000" +
    "\152\006\027\007\uffff\011\026\016\023\020\017\021\015" +
    "\022\013\023\011\024\010\025\005\026\004\030\070\031" +
    "\065\032\063\033\062\034\060\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\043\043\044\042\046\041\047" +
    "\040\050\037\051\036\053\035\054\025\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\012\064\007\065" +
    "\006\066\072\067\071\070\067\071\066\072\064\073\061" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\030\001\002\000\004\007\144\001\002\000\026\002\uffee" +
    "\004\uffee\007\uffee\012\uffee\014\uffee\015\uffee\027\uffee\045" +
    "\uffee\052\uffee\074\uffee\001\002\000\174\002\uffbb\004\uffbb" +
    "\006\027\007\uffbb\011\026\012\uffbb\014\uffbb\015\uffbb\016" +
    "\023\020\017\021\015\022\013\023\011\024\010\025\005" +
    "\026\004\027\uffbb\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\045\uffbb\046\041\047\040\050\037\051" +
    "\036\052\uffbb\053\035\054\025\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\012\064\007\065\006\066" +
    "\072\067\071\070\067\071\066\072\064\073\061\074\uffbb" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\136\001\002\000\026\002\uffb9\004\uffb9\007\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\027\uffb9\045\uffb9\052\uffb9\074\uffb9\001" +
    "\002\000\004\007\150\001\002\000\166\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\103\uffad\001\002\000\026\002" +
    "\ufff9\004\ufff9\007\ufff9\012\ufff9\014\ufff9\015\ufff9\027\ufff9" +
    "\045\ufff9\052\ufff9\074\ufff9\001\002\000\150\006\027\011" +
    "\026\016\023\020\017\021\015\022\013\023\011\024\010" +
    "\025\005\026\004\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\046\041\047\040\050\037\051\036\053" +
    "\035\054\025\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\012\064\007\065\006\066\072\067\071\070" +
    "\067\071\066\072\064\073\061\075\056\076\055\077\052" +
    "\100\034\101\033\102\075\103\030\001\002\000\004\007" +
    "\154\001\002\000\026\002\uffdd\004\uffdd\007\uffdd\012\uffdd" +
    "\014\uffdd\015\uffdd\027\uffdd\045\uffdd\052\uffdd\074\uffdd\001" +
    "\002\000\150\006\027\011\026\016\023\020\017\021\015" +
    "\022\013\023\011\024\010\025\005\026\004\030\070\031" +
    "\065\032\063\033\062\034\060\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\043\043\044\042\046\041\047" +
    "\040\050\037\051\036\053\035\054\025\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\012\064\007\065" +
    "\006\066\072\067\071\070\067\071\066\072\064\073\061" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\030\001\002\000\004\014\157\001\002\000\150\006\027" +
    "\011\026\016\023\020\017\021\015\022\013\023\011\024" +
    "\010\025\005\026\004\030\070\031\065\032\063\033\062" +
    "\034\060\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\043\043\044\042\046\041\047\040\050\037\051\036" +
    "\053\035\054\025\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\012\064\007\065\006\066\072\067\071" +
    "\070\067\071\066\072\064\073\061\075\056\076\055\077" +
    "\052\100\034\101\033\102\075\103\030\001\002\000\004" +
    "\007\161\001\002\000\026\002\uffdb\004\uffdb\007\uffdb\012" +
    "\uffdb\014\uffdb\015\uffdb\027\uffdb\045\uffdb\052\uffdb\074\uffdb" +
    "\001\002\000\004\006\163\001\002\000\006\007\uffc9\103" +
    "\164\001\002\000\004\005\172\001\002\000\006\007\uffc8" +
    "\014\170\001\002\000\004\007\167\001\002\000\026\002" +
    "\uffef\004\uffef\007\uffef\012\uffef\014\uffef\015\uffef\027\uffef" +
    "\045\uffef\052\uffef\074\uffef\001\002\000\006\007\uffc9\103" +
    "\164\001\002\000\004\007\uffc7\001\002\000\026\006\133" +
    "\011\026\016\023\026\004\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\001\002\000\006\007\uffbd\014\uffbd" +
    "\001\002\000\150\006\027\011\026\016\023\020\017\021" +
    "\015\022\013\023\011\024\010\025\005\026\004\030\070" +
    "\031\065\032\063\033\062\034\060\035\057\036\054\037" +
    "\051\040\047\041\046\042\044\043\043\044\042\046\041" +
    "\047\040\050\037\051\036\053\035\054\025\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\012\064\007" +
    "\065\006\066\072\067\071\070\067\071\066\072\064\073" +
    "\061\075\056\076\055\077\052\100\034\101\033\102\075" +
    "\103\030\001\002\000\004\007\176\001\002\000\026\002" +
    "\uffda\004\uffda\007\uffda\012\uffda\014\uffda\015\uffda\027\uffda" +
    "\045\uffda\052\uffda\074\uffda\001\002\000\004\045\200\001" +
    "\002\000\004\006\201\001\002\000\150\006\027\011\026" +
    "\016\023\020\017\021\015\022\013\023\011\024\010\025" +
    "\005\026\004\030\070\031\065\032\063\033\062\034\060" +
    "\035\057\036\054\037\051\040\047\041\046\042\044\043" +
    "\043\044\042\046\041\047\040\050\037\051\036\053\035" +
    "\054\025\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\012\064\007\065\006\066\072\067\071\070\067" +
    "\071\066\072\064\073\061\075\056\076\055\077\052\100" +
    "\034\101\033\102\075\103\030\001\002\000\004\007\203" +
    "\001\002\000\026\002\uffd8\004\uffd8\007\uffd8\012\uffd8\014" +
    "\uffd8\015\uffd8\027\uffd8\045\uffd8\052\uffd8\074\uffd8\001\002" +
    "\000\004\103\205\001\002\000\026\002\uffed\004\uffed\007" +
    "\uffed\012\uffed\014\uffed\015\uffed\027\uffed\045\uffed\052\uffed" +
    "\074\uffed\001\002\000\152\006\027\007\uffff\011\026\016" +
    "\023\020\017\021\015\022\013\023\011\024\010\025\005" +
    "\026\004\030\070\031\065\032\063\033\062\034\060\035" +
    "\057\036\054\037\051\040\047\041\046\042\044\043\043" +
    "\044\042\046\041\047\040\050\037\051\036\053\035\054" +
    "\025\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\012\064\007\065\006\066\072\067\071\070\067\071" +
    "\066\072\064\073\061\075\056\076\055\077\052\100\034" +
    "\101\033\102\075\103\030\001\002\000\004\007\210\001" +
    "\002\000\026\002\uffdc\004\uffdc\007\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\027\uffdc\045\uffdc\052\uffdc\074\uffdc\001\002\000" +
    "\156\002\uffff\006\027\007\uffff\011\026\012\uffff\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\156\002\uffff\006\027" +
    "\007\uffff\011\026\012\uffff\016\023\020\017\021\015\022" +
    "\013\023\011\024\010\025\005\026\004\030\070\031\065" +
    "\032\063\033\062\034\060\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\043\043\044\042\046\041\047\040" +
    "\050\037\051\036\053\035\054\025\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\012\064\007\065\006" +
    "\066\072\067\071\070\067\071\066\072\064\073\061\075" +
    "\056\076\055\077\052\100\034\101\033\102\075\103\030" +
    "\001\002\000\010\002\ufffa\007\ufffa\012\ufffa\001\002\000" +
    "\010\002\ufffd\007\ufffd\012\ufffd\001\002\000\150\006\027" +
    "\011\026\016\023\020\017\021\015\022\013\023\011\024" +
    "\010\025\005\026\004\030\070\031\065\032\063\033\062" +
    "\034\060\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\043\043\044\042\046\041\047\040\050\037\051\036" +
    "\053\035\054\025\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\012\064\007\065\006\066\072\067\071" +
    "\070\067\071\066\072\064\073\061\075\056\076\055\077" +
    "\052\100\034\101\033\102\075\103\030\001\002\000\004" +
    "\014\217\001\002\000\150\006\027\011\026\016\023\020" +
    "\017\021\015\022\013\023\011\024\010\025\005\026\004" +
    "\030\070\031\065\032\063\033\062\034\060\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\043\043\044\042" +
    "\046\041\047\040\050\037\051\036\053\035\054\025\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\012" +
    "\064\007\065\006\066\072\067\071\070\067\071\066\072" +
    "\064\073\061\075\056\076\055\077\052\100\034\101\033" +
    "\102\075\103\030\001\002\000\004\007\221\001\002\000" +
    "\026\002\uffcf\004\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\027\uffcf\045\uffcf\052\uffcf\074\uffcf\001\002\000\004\006" +
    "\223\001\002\000\152\006\027\007\uffff\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\007\225\001\002" +
    "\000\026\002\ufff2\004\ufff2\007\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\027\ufff2\045\ufff2\052\ufff2\074\ufff2\001\002\000\004" +
    "\006\227\001\002\000\006\007\uffc9\103\164\001\002\000" +
    "\004\007\231\001\002\000\004\010\232\001\002\000\026" +
    "\006\133\011\026\016\023\026\004\035\057\036\054\037" +
    "\051\040\047\041\046\042\044\001\002\000\006\011\uffc3" +
    "\013\uffc3\001\002\000\006\011\236\013\235\001\002\000" +
    "\004\037\241\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\012\240\001\002" +
    "\000\026\002\ufff1\004\ufff1\007\ufff1\012\ufff1\014\ufff1\015" +
    "\ufff1\027\ufff1\045\ufff1\052\ufff1\074\ufff1\001\002\000\004" +
    "\011\242\001\002\000\150\006\027\011\026\016\023\020" +
    "\017\021\015\022\013\023\011\024\010\025\005\026\004" +
    "\030\070\031\065\032\063\033\062\034\060\035\057\036" +
    "\054\037\051\040\047\041\046\042\044\043\043\044\042" +
    "\046\041\047\040\050\037\051\036\053\035\054\025\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\012" +
    "\064\007\065\006\066\072\067\071\070\067\071\066\072" +
    "\064\073\061\075\056\076\055\077\052\100\034\101\033" +
    "\102\075\103\030\001\002\000\004\012\244\001\002\000" +
    "\026\002\ufff0\004\ufff0\007\ufff0\012\ufff0\014\ufff0\015\ufff0" +
    "\027\ufff0\045\ufff0\052\ufff0\074\ufff0\001\002\000\004\016" +
    "\246\001\002\000\026\006\133\011\026\016\023\026\004" +
    "\035\057\036\054\037\051\040\047\041\046\042\044\001" +
    "\002\000\004\014\250\001\002\000\026\006\133\011\026" +
    "\016\023\026\004\035\057\036\054\037\051\040\047\041" +
    "\046\042\044\001\002\000\004\017\252\001\002\000\004" +
    "\006\253\001\002\000\006\006\254\007\uffc0\001\002\000" +
    "\150\006\027\011\026\016\023\020\017\021\015\022\013" +
    "\023\011\024\010\025\005\026\004\030\070\031\065\032" +
    "\063\033\062\034\060\035\057\036\054\037\051\040\047" +
    "\041\046\042\044\043\043\044\042\046\041\047\040\050" +
    "\037\051\036\053\035\054\025\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\012\064\007\065\006\066" +
    "\072\067\071\070\067\071\066\072\064\073\061\075\056" +
    "\076\055\077\052\100\034\101\033\102\075\103\030\001" +
    "\002\000\006\007\uffbf\014\260\001\002\000\004\007\257" +
    "\001\002\000\026\002\uffe9\004\uffe9\007\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\027\uffe9\045\uffe9\052\uffe9\074\uffe9\001\002" +
    "\000\006\006\254\007\uffc0\001\002\000\004\007\uffbe\001" +
    "\002\000\004\015\263\001\002\000\150\006\027\011\026" +
    "\016\023\020\017\021\015\022\013\023\011\024\010\025" +
    "\005\026\004\030\070\031\065\032\063\033\062\034\060" +
    "\035\057\036\054\037\051\040\047\041\046\042\044\043" +
    "\043\044\042\046\041\047\040\050\037\051\036\053\035" +
    "\054\025\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\012\064\007\065\006\066\072\067\071\070\067" +
    "\071\066\072\064\073\061\075\056\076\055\077\052\100" +
    "\034\101\033\102\075\103\030\001\002\000\004\007\265" +
    "\001\002\000\006\007\uffc1\014\uffc1\001\002\000\152\006" +
    "\027\007\uffff\011\026\016\023\020\017\021\015\022\013" +
    "\023\011\024\010\025\005\026\004\030\070\031\065\032" +
    "\063\033\062\034\060\035\057\036\054\037\051\040\047" +
    "\041\046\042\044\043\043\044\042\046\041\047\040\050" +
    "\037\051\036\053\035\054\025\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\012\064\007\065\006\066" +
    "\072\067\071\070\067\071\066\072\064\073\061\075\056" +
    "\076\055\077\052\100\034\101\033\102\075\103\030\001" +
    "\002\000\004\007\270\001\002\000\026\002\uffd4\004\uffd4" +
    "\007\uffd4\012\uffd4\014\uffd4\015\uffd4\027\uffd4\045\uffd4\052" +
    "\uffd4\074\uffd4\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\007\273\001\002" +
    "\000\026\002\uffd3\004\uffd3\007\uffd3\012\uffd3\014\uffd3\015" +
    "\uffd3\027\uffd3\045\uffd3\052\uffd3\074\uffd3\001\002\000\150" +
    "\006\027\011\026\016\023\020\017\021\015\022\013\023" +
    "\011\024\010\025\005\026\004\030\070\031\065\032\063" +
    "\033\062\034\060\035\057\036\054\037\051\040\047\041" +
    "\046\042\044\043\043\044\042\046\041\047\040\050\037" +
    "\051\036\053\035\054\025\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\012\064\007\065\006\066\072" +
    "\067\071\070\067\071\066\072\064\073\061\075\056\076" +
    "\055\077\052\100\034\101\033\102\075\103\030\001\002" +
    "\000\004\014\276\001\002\000\150\006\027\011\026\016" +
    "\023\020\017\021\015\022\013\023\011\024\010\025\005" +
    "\026\004\030\070\031\065\032\063\033\062\034\060\035" +
    "\057\036\054\037\051\040\047\041\046\042\044\043\043" +
    "\044\042\046\041\047\040\050\037\051\036\053\035\054" +
    "\025\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\012\064\007\065\006\066\072\067\071\070\067\071" +
    "\066\072\064\073\061\075\056\076\055\077\052\100\034" +
    "\101\033\102\075\103\030\001\002\000\004\007\300\001" +
    "\002\000\026\002\uffd2\004\uffd2\007\uffd2\012\uffd2\014\uffd2" +
    "\015\uffd2\027\uffd2\045\uffd2\052\uffd2\074\uffd2\001\002\000" +
    "\026\006\133\011\026\016\023\026\004\035\057\036\054" +
    "\037\051\040\047\041\046\042\044\001\002\000\164\006" +
    "\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab" +
    "\070\uffab\071\uffab\072\uffab\073\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\001\002\000\004" +
    "\002\001\001\002\000\004\007\306\001\002\000\006\007" +
    "\150\026\076\001\002\000\026\002\uffc2\004\uffc2\007\uffc2" +
    "\012\uffc2\014\uffc2\015\uffc2\027\uffc2\045\uffc2\052\uffc2\074" +
    "\uffc2\001\002\000\004\012\310\001\002\000\164\006\uffac" +
    "\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\073\uffac\075\uffac\076\uffac\077\uffac" +
    "\100\uffac\101\uffac\102\uffac\103\uffac\001\002\000\150\006" +
    "\027\011\026\016\023\020\017\021\015\022\013\023\011" +
    "\024\010\025\005\026\004\030\070\031\065\032\063\033" +
    "\062\034\060\035\057\036\054\037\051\040\047\041\046" +
    "\042\044\043\043\044\042\046\041\047\040\050\037\051" +
    "\036\053\035\054\025\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\012\064\007\065\006\066\072\067" +
    "\071\070\067\071\066\072\064\073\061\075\056\076\055" +
    "\077\052\100\034\101\033\102\075\103\030\001\002\000" +
    "\004\007\313\001\002\000\026\002\uffe1\004\uffe1\007\uffe1" +
    "\012\uffe1\014\uffe1\015\uffe1\027\uffe1\045\uffe1\052\uffe1\074" +
    "\uffe1\001\002\000\004\014\317\001\002\000\004\017\316" +
    "\001\002\000\166\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102" +
    "\uffaf\103\uffaf\001\002\000\026\006\133\011\026\016\023" +
    "\026\004\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\001\002\000\004\017\321\001\002\000\166\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\uffae\070\uffae\071\uffae\072\uffae\073\uffae\075\uffae\076\uffae" +
    "\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\001\002\000" +
    "\004\074\323\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\052\325\001\002" +
    "\000\150\006\027\011\026\016\023\020\017\021\015\022" +
    "\013\023\011\024\010\025\005\026\004\030\070\031\065" +
    "\032\063\033\062\034\060\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\043\043\044\042\046\041\047\040" +
    "\050\037\051\036\053\035\054\025\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\012\064\007\065\006" +
    "\066\072\067\071\070\067\071\066\072\064\073\061\075" +
    "\056\076\055\077\052\100\034\101\033\102\075\103\030" +
    "\001\002\000\026\002\uffeb\004\uffeb\007\uffeb\012\uffeb\014" +
    "\uffeb\015\uffeb\027\uffeb\045\uffeb\052\uffeb\074\uffeb\001\002" +
    "\000\150\006\027\011\026\016\023\020\017\021\015\022" +
    "\013\023\011\024\010\025\005\026\004\030\070\031\065" +
    "\032\063\033\062\034\060\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\043\043\044\042\046\041\047\040" +
    "\050\037\051\036\053\035\054\025\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\012\064\007\065\006" +
    "\066\072\067\071\070\067\071\066\072\064\073\061\075" +
    "\056\076\055\077\052\100\034\101\033\102\075\103\030" +
    "\001\002\000\004\014\331\001\002\000\150\006\027\011" +
    "\026\016\023\020\017\021\015\022\013\023\011\024\010" +
    "\025\005\026\004\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\046\041\047\040\050\037\051\036\053" +
    "\035\054\025\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\012\064\007\065\006\066\072\067\071\070" +
    "\067\071\066\072\064\073\061\075\056\076\055\077\052" +
    "\100\034\101\033\102\075\103\030\001\002\000\004\007" +
    "\333\001\002\000\026\002\uffd0\004\uffd0\007\uffd0\012\uffd0" +
    "\014\uffd0\015\uffd0\027\uffd0\045\uffd0\052\uffd0\074\uffd0\001" +
    "\002\000\150\006\027\011\026\016\023\020\017\021\015" +
    "\022\013\023\011\024\010\025\005\026\004\030\070\031" +
    "\065\032\063\033\062\034\060\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\043\043\044\042\046\041\047" +
    "\040\050\037\051\036\053\035\054\025\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\012\064\007\065" +
    "\006\066\072\067\071\070\067\071\066\072\064\073\061" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\030\001\002\000\004\014\336\001\002\000\150\006\027" +
    "\011\026\016\023\020\017\021\015\022\013\023\011\024" +
    "\010\025\005\026\004\030\070\031\065\032\063\033\062" +
    "\034\060\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\043\043\044\042\046\041\047\040\050\037\051\036" +
    "\053\035\054\025\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\012\064\007\065\006\066\072\067\071" +
    "\070\067\071\066\072\064\073\061\075\056\076\055\077" +
    "\052\100\034\101\033\102\075\103\030\001\002\000\004" +
    "\007\340\001\002\000\026\002\uffd1\004\uffd1\007\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\027\uffd1\045\uffd1\052\uffd1\074\uffd1" +
    "\001\002\000\150\006\027\011\026\016\023\020\017\021" +
    "\015\022\013\023\011\024\010\025\005\026\004\030\070" +
    "\031\065\032\063\033\062\034\060\035\057\036\054\037" +
    "\051\040\047\041\046\042\044\043\043\044\042\046\041" +
    "\047\040\050\037\051\036\053\035\054\025\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\012\064\007" +
    "\065\006\066\072\067\071\070\067\071\066\072\064\073" +
    "\061\075\056\076\055\077\052\100\034\101\033\102\075" +
    "\103\030\001\002\000\004\014\343\001\002\000\004\006" +
    "\254\001\002\000\004\007\345\001\002\000\026\002\uffe8" +
    "\004\uffe8\007\uffe8\012\uffe8\014\uffe8\015\uffe8\027\uffe8\045" +
    "\uffe8\052\uffe8\074\uffe8\001\002\000\006\007\uffc9\103\164" +
    "\001\002\000\004\007\350\001\002\000\004\010\351\001" +
    "\002\000\026\006\133\011\026\016\023\026\004\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\001\002\000" +
    "\004\011\353\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\012\355\001\002" +
    "\000\026\002\uffea\004\uffea\007\uffea\012\uffea\014\uffea\015" +
    "\uffea\027\uffea\045\uffea\052\uffea\074\uffea\001\002\000\150" +
    "\006\027\011\026\016\023\020\017\021\015\022\013\023" +
    "\011\024\010\025\005\026\004\030\070\031\065\032\063" +
    "\033\062\034\060\035\057\036\054\037\051\040\047\041" +
    "\046\042\044\043\043\044\042\046\041\047\040\050\037" +
    "\051\036\053\035\054\025\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\012\064\007\065\006\066\072" +
    "\067\071\070\067\071\066\072\064\073\061\075\056\076" +
    "\055\077\052\100\034\101\033\102\075\103\030\001\002" +
    "\000\004\014\360\001\002\000\150\006\027\011\026\016" +
    "\023\020\017\021\015\022\013\023\011\024\010\025\005" +
    "\026\004\030\070\031\065\032\063\033\062\034\060\035" +
    "\057\036\054\037\051\040\047\041\046\042\044\043\043" +
    "\044\042\046\041\047\040\050\037\051\036\053\035\054" +
    "\025\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\012\064\007\065\006\066\072\067\071\070\067\071" +
    "\066\072\064\073\061\075\056\076\055\077\052\100\034" +
    "\101\033\102\075\103\030\001\002\000\004\007\362\001" +
    "\002\000\026\002\uffe7\004\uffe7\007\uffe7\012\uffe7\014\uffe7" +
    "\015\uffe7\027\uffe7\045\uffe7\052\uffe7\074\uffe7\001\002\000" +
    "\150\006\027\011\026\016\023\020\017\021\015\022\013" +
    "\023\011\024\010\025\005\026\004\030\070\031\065\032" +
    "\063\033\062\034\060\035\057\036\054\037\051\040\047" +
    "\041\046\042\044\043\043\044\042\046\041\047\040\050" +
    "\037\051\036\053\035\054\025\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\012\064\007\065\006\066" +
    "\072\067\071\070\067\071\066\072\064\073\061\075\056" +
    "\076\055\077\052\100\034\101\033\102\075\103\030\001" +
    "\002\000\004\007\365\001\002\000\026\002\uffe0\004\uffe0" +
    "\007\uffe0\012\uffe0\014\uffe0\015\uffe0\027\uffe0\045\uffe0\052" +
    "\uffe0\074\uffe0\001\002\000\150\006\027\011\026\016\023" +
    "\020\017\021\015\022\013\023\011\024\010\025\005\026" +
    "\004\030\070\031\065\032\063\033\062\034\060\035\057" +
    "\036\054\037\051\040\047\041\046\042\044\043\043\044" +
    "\042\046\041\047\040\050\037\051\036\053\035\054\025" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\012\064\007\065\006\066\072\067\071\070\067\071\066" +
    "\072\064\073\061\075\056\076\055\077\052\100\034\101" +
    "\033\102\075\103\030\001\002\000\004\014\370\001\002" +
    "\000\150\006\027\011\026\016\023\020\017\021\015\022" +
    "\013\023\011\024\010\025\005\026\004\030\070\031\065" +
    "\032\063\033\062\034\060\035\057\036\054\037\051\040" +
    "\047\041\046\042\044\043\043\044\042\046\041\047\040" +
    "\050\037\051\036\053\035\054\025\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\012\064\007\065\006" +
    "\066\072\067\071\070\067\071\066\072\064\073\061\075" +
    "\056\076\055\077\052\100\034\101\033\102\075\103\030" +
    "\001\002\000\004\007\372\001\002\000\026\002\uffe6\004" +
    "\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\027\uffe6\045\uffe6" +
    "\052\uffe6\074\uffe6\001\002\000\152\006\027\007\uffff\011" +
    "\026\016\023\020\017\021\015\022\013\023\011\024\010" +
    "\025\005\026\004\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\046\041\047\040\050\037\051\036\053" +
    "\035\054\025\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\012\064\007\065\006\066\072\067\071\070" +
    "\067\071\066\072\064\073\061\075\056\076\055\077\052" +
    "\100\034\101\033\102\075\103\030\001\002\000\004\007" +
    "\375\001\002\000\026\002\uffd6\004\uffd6\007\uffd6\012\uffd6" +
    "\014\uffd6\015\uffd6\027\uffd6\045\uffd6\052\uffd6\074\uffd6\001" +
    "\002\000\150\006\027\011\026\016\023\020\017\021\015" +
    "\022\013\023\011\024\010\025\005\026\004\030\070\031" +
    "\065\032\063\033\062\034\060\035\057\036\054\037\051" +
    "\040\047\041\046\042\044\043\043\044\042\046\041\047" +
    "\040\050\037\051\036\053\035\054\025\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\012\064\007\065" +
    "\006\066\072\067\071\070\067\071\066\072\064\073\061" +
    "\075\056\076\055\077\052\100\034\101\033\102\075\103" +
    "\030\001\002\000\004\007\u0100\001\002\000\026\002\uffe5" +
    "\004\uffe5\007\uffe5\012\uffe5\014\uffe5\015\uffe5\027\uffe5\045" +
    "\uffe5\052\uffe5\074\uffe5\001\002\000\150\006\027\011\026" +
    "\016\023\020\017\021\015\022\013\023\011\024\010\025" +
    "\005\026\004\030\070\031\065\032\063\033\062\034\060" +
    "\035\057\036\054\037\051\040\047\041\046\042\044\043" +
    "\043\044\042\046\041\047\040\050\037\051\036\053\035" +
    "\054\025\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\012\064\007\065\006\066\072\067\071\070\067" +
    "\071\066\072\064\073\061\075\056\076\055\077\052\100" +
    "\034\101\033\102\075\103\030\001\002\000\004\007\u0103" +
    "\001\002\000\026\002\uffe4\004\uffe4\007\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\027\uffe4\045\uffe4\052\uffe4\074\uffe4\001\002" +
    "\000\152\006\027\007\uffff\011\026\016\023\020\017\021" +
    "\015\022\013\023\011\024\010\025\005\026\004\030\070" +
    "\031\065\032\063\033\062\034\060\035\057\036\054\037" +
    "\051\040\047\041\046\042\044\043\043\044\042\046\041" +
    "\047\040\050\037\051\036\053\035\054\025\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\012\064\007" +
    "\065\006\066\072\067\071\070\067\071\066\072\064\073" +
    "\061\075\056\076\055\077\052\100\034\101\033\102\075" +
    "\103\030\001\002\000\004\007\u0106\001\002\000\026\002" +
    "\uffd5\004\uffd5\007\uffd5\012\uffd5\014\uffd5\015\uffd5\027\uffd5" +
    "\045\uffd5\052\uffd5\074\uffd5\001\002\000\150\006\027\011" +
    "\026\016\023\020\017\021\015\022\013\023\011\024\010" +
    "\025\005\026\004\030\070\031\065\032\063\033\062\034" +
    "\060\035\057\036\054\037\051\040\047\041\046\042\044" +
    "\043\043\044\042\046\041\047\040\050\037\051\036\053" +
    "\035\054\025\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\012\064\007\065\006\066\072\067\071\070" +
    "\067\071\066\072\064\073\061\075\056\076\055\077\052" +
    "\100\034\101\033\102\075\103\030\001\002\000\004\014" +
    "\u0109\001\002\000\150\006\027\011\026\016\023\020\017" +
    "\021\015\022\013\023\011\024\010\025\005\026\004\030" +
    "\070\031\065\032\063\033\062\034\060\035\057\036\054" +
    "\037\051\040\047\041\046\042\044\043\043\044\042\046" +
    "\041\047\040\050\037\051\036\053\035\054\025\055\024" +
    "\056\022\057\021\060\020\061\016\062\014\063\012\064" +
    "\007\065\006\066\072\067\071\070\067\071\066\072\064" +
    "\073\061\075\056\076\055\077\052\100\034\101\033\102" +
    "\075\103\030\001\002\000\004\007\u010b\001\002\000\026" +
    "\002\uffce\004\uffce\007\uffce\012\uffce\014\uffce\015\uffce\027" +
    "\uffce\045\uffce\052\uffce\074\uffce\001\002\000\150\006\027" +
    "\011\026\016\023\020\017\021\015\022\013\023\011\024" +
    "\010\025\005\026\004\030\070\031\065\032\063\033\062" +
    "\034\060\035\057\036\054\037\051\040\047\041\046\042" +
    "\044\043\043\044\042\046\041\047\040\050\037\051\036" +
    "\053\035\054\025\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\012\064\007\065\006\066\072\067\071" +
    "\070\067\071\066\072\064\073\061\075\056\076\055\077" +
    "\052\100\034\101\033\102\075\103\030\001\002\000\004" +
    "\007\u010e\001\002\000\026\002\uffe3\004\uffe3\007\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\027\uffe3\045\uffe3\052\uffe3\074\uffe3" +
    "\001\002\000\004\027\u0110\001\002\000\166\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\020\002\030\003\044\004\047\005\073\010" +
    "\052\017\031\020\072\001\001\000\006\017\031\020\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\321\005\073\010\052\017\031\020" +
    "\072\001\001\000\006\017\031\020\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\031\020\306\001" +
    "\001\000\014\004\303\005\073\010\052\017\031\020\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\176\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\076\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\101\004\047\005\073\010" +
    "\052\017\031\020\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\104\004\047\005\073\010\052\017" +
    "\031\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\110\005\073\010\052\017" +
    "\031\020\072\001\001\000\002\001\001\000\014\004\112" +
    "\005\073\010\052\017\031\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\121\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\014\004\123\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\014\004\125\005\073\010\052" +
    "\017\031\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\031\020\131\001\001" +
    "\000\014\004\150\005\073\010\052\017\031\020\072\001" +
    "\001\000\006\017\031\020\146\001\001\000\022\004\137" +
    "\005\073\010\052\014\136\015\140\016\134\017\031\020" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\142\004\047\005\073\010\052\017\031\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\137\005" +
    "\073\010\052\015\145\016\134\017\031\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\152\005\073\010\052\017\031" +
    "\020\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\155\005\073\010\052\017\031\020\072\001\001" +
    "\000\002\001\001\000\014\004\157\005\073\010\052\017" +
    "\031\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\165\013\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\170\013\164\001\001\000\002\001" +
    "\001\000\006\017\031\020\172\001\001\000\002\001\001" +
    "\000\014\004\174\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\201\005\073\010\052\017" +
    "\031\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\206\004" +
    "\047\005\073\010\052\017\031\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\213\004\047\005" +
    "\073\010\052\017\031\020\072\001\001\000\016\003\212" +
    "\004\047\005\073\010\052\017\031\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\215\005\073" +
    "\010\052\017\031\020\072\001\001\000\002\001\001\000" +
    "\014\004\217\005\073\010\052\017\031\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\223\004\047\005\073\010\052\017\031\020\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\227\013\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\233\017\031\020\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\236\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\242\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\031\020\246\001\001\000\002\001\001\000" +
    "\006\017\031\020\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\254\012\255\001\001\000\014\004" +
    "\261\005\073\010\052\017\031\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\254\012\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\263\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\266" +
    "\004\047\005\073\010\052\017\031\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\271\005\073" +
    "\010\052\017\031\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\274\005\073\010\052\017\031" +
    "\020\072\001\001\000\002\001\001\000\014\004\276\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\031\020\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\311\005\073\010\052\017\031\020\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\031" +
    "\020\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\323\005\073\010\052\017\031" +
    "\020\072\001\001\000\002\001\001\000\014\004\325\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\014\004\327\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\014\004\331\005\073\010\052" +
    "\017\031\020\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\334\005\073\010\052\017\031\020\072" +
    "\001\001\000\002\001\001\000\014\004\336\005\073\010" +
    "\052\017\031\020\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\341\005\073\010\052\017\031\020" +
    "\072\001\001\000\002\001\001\000\004\011\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\346\013" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\351\017\031\020\232\001\001\000\002\001\001\000" +
    "\014\004\353\005\073\010\052\017\031\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\356\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\014\004\360\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\363" +
    "\005\073\010\052\017\031\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\366\005\073\010\052" +
    "\017\031\020\072\001\001\000\002\001\001\000\014\004" +
    "\370\005\073\010\052\017\031\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\373\004\047\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\376\005\073\010\052\017" +
    "\031\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\u0101\005\073\010\052\017\031\020\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u0104" +
    "\004\047\005\073\010\052\017\031\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\u0107\005\073" +
    "\010\052\017\031\020\072\001\001\000\002\001\001\000" +
    "\014\004\u0109\005\073\010\052\017\031\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\u010c\005" +
    "\073\010\052\017\031\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_8 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_54 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_54 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_32 _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_4 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.FuncCall(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_34 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_34 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_7 _SYMB_27 _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_11 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DefineWithExc(p_2,p_4,p_7,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_55 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr1 _SYMB_9 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= Expr1 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_42 Expr _SYMB_56 Expr _SYMB_38 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_45 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_35 _IDENT_ _SYMB_10 Type _SYMB_8 Type _SYMB_11 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_12 _SYMB_2 Expr _SYMB_8 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_13 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_15 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictKeys(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_16 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictValues(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= _SYMB_17 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= Type _SYMB_18 Expr _SYMB_19 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_41 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_46 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_21 _SYMB_2 Expr _SYMB_8 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_22 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_59 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleConstructor(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_23 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_24 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_52 _SYMB_27 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_58 Expr _SYMB_33 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_50 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= _SYMB_47 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= _SYMB_48 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= _SYMB_36 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= _SYMB_37 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ToDouble(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= _SYMB_39 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= _SYMB_44 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= _SYMB_43 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= _SYMB_31 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= _SYMB_49 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= _SYMB_53 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= _SYMB_51 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= _SYMB_57 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool ::= _SYMB_40 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr1 ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Pair ::= _SYMB_2 Expr _SYMB_9 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListPair ::= Pair _SYMB_8 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListArg ::= Arg _SYMB_8 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type1 ::= _SYMB_27 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.ExceptionType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type1 ::= _SYMB_30 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.TupleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Type1 ::= _SYMB_25 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Type1 ::= _SYMB_28 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type1 ::= _SYMB_26 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Type1 ::= _SYMB_29 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type1 ::= _SYMB_18 Type _SYMB_19 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type1 ::= _SYMB_10 _IDENT_ _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type1 ::= _SYMB_10 Type _SYMB_8 Type _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
