
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\007\000\002\004\014\000\002\004\005\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\010\000" +
    "\002\004\013\000\002\004\014\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\011\000\002\004\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\012\000" +
    "\002\004\006\000\002\004\005\000\002\004\010\000\002" +
    "\004\006\000\002\004\007\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\003\000\002" +
    "\004\004\000\002\005\003\000\002\005\003\000\002\006" +
    "\002\000\002\006\003\000\002\006\005\000\002\006\002" +
    "\000\002\006\003\000\002\006\005\000\002\007\003\000" +
    "\002\010\007\000\002\011\002\000\002\011\003\000\002" +
    "\011\005\000\002\012\005\000\002\013\003\000\002\014" +
    "\002\000\002\014\003\000\002\014\005\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\007\000\002\016" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\144\002\uffff\006\027\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\024\006\125\011\026\015\021\025\004\034\054\035" +
    "\052\037\051\040\047\041\046\001\002\000\004\075\u0102" +
    "\001\002\000\004\006\377\001\002\000\004\006\374\001" +
    "\002\000\004\006\367\001\002\000\004\006\364\001\002" +
    "\000\004\006\361\001\002\000\004\006\356\001\002\000" +
    "\004\006\351\001\002\000\004\006\346\001\002\000\004" +
    "\006\341\001\002\000\004\006\336\001\002\000\004\006" +
    "\326\001\002\000\026\006\125\011\026\015\021\025\004" +
    "\034\054\035\052\037\051\040\047\041\046\100\321\001" +
    "\002\000\004\006\313\001\002\000\004\006\306\001\002" +
    "\000\004\006\301\001\002\000\142\006\027\011\026\015" +
    "\021\017\022\020\016\021\014\022\012\023\011\024\006" +
    "\025\004\027\071\030\063\031\061\032\057\033\055\034" +
    "\054\035\052\037\051\040\047\041\046\042\044\043\043" +
    "\045\042\046\041\047\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\005\066\065\067\064\070\062\071" +
    "\060\073\056\074\053\075\034\076\033\077\070\100\030" +
    "\001\002\000\024\006\125\011\026\015\021\025\004\034" +
    "\054\035\052\037\051\040\047\041\046\001\002\000\144" +
    "\006\027\007\uffff\011\026\015\021\017\022\020\016\021" +
    "\014\022\012\023\011\024\006\025\004\027\071\030\063" +
    "\031\061\032\057\033\055\034\054\035\052\037\051\040" +
    "\047\041\046\042\044\043\043\045\042\046\041\047\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\005" +
    "\066\065\067\064\070\062\071\060\073\056\074\053\075" +
    "\034\076\033\077\070\100\030\001\002\000\030\002\ufff3" +
    "\004\ufff3\006\134\007\ufff3\012\ufff3\013\ufff3\014\ufff3\026" +
    "\ufff3\044\ufff3\050\ufff3\072\ufff3\001\002\000\004\002\264" +
    "\001\002\000\156\006\uffae\007\uffae\010\262\011\uffae\012" +
    "\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\045\uffae\046\uffae\047" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\001\002\000\026\002" +
    "\ufff7\004\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7\026\ufff7" +
    "\044\ufff7\050\ufff7\072\ufff7\001\002\000\026\002\ufff4\004" +
    "\ufff4\007\ufff4\012\ufff4\013\ufff4\014\ufff4\026\ufff4\044\ufff4" +
    "\050\ufff4\072\ufff4\001\002\000\004\006\257\001\002\000" +
    "\026\002\uffcc\004\uffcc\007\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\026\uffcc\044\uffcc\050\uffcc\072\uffcc\001\002\000\004\006" +
    "\252\001\002\000\004\006\247\001\002\000\004\100\225" +
    "\001\002\000\004\100\213\001\002\000\004\100\207\001" +
    "\002\000\004\006\202\001\002\000\004\002\000\001\002" +
    "\000\156\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\001\002\000\156\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\001\002\000\016\002\ufffe\004\176\007\ufffe\012\ufffe" +
    "\013\177\014\074\001\002\000\156\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\001" +
    "\002\000\156\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\100\uffb6\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\156\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\001\002" +
    "\000\004\006\166\001\002\000\026\002\uffcd\004\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\026\uffcd\044\uffcd\050\uffcd" +
    "\072\uffcd\001\002\000\004\006\161\001\002\000\004\100" +
    "\147\001\002\000\004\006\144\001\002\000\004\100\122" +
    "\001\002\000\004\006\113\001\002\000\026\002\uffcf\004" +
    "\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\026\uffcf\044\uffcf" +
    "\050\uffcf\072\uffcf\001\002\000\004\036\107\001\002\000" +
    "\004\025\101\001\002\000\026\002\ufff5\004\ufff5\007\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\026\ufff5\044\ufff5\050\ufff5\072" +
    "\ufff5\001\002\000\026\002\ufff6\004\ufff6\007\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\026\ufff6\044\ufff6\050\ufff6\072\ufff6\001" +
    "\002\000\004\006\072\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\006\013\075\014\074\001\002\000\004" +
    "\100\100\001\002\000\142\006\027\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\006\007\077\014\074\001\002\000\026\002\uffe0\004" +
    "\uffe0\007\uffe0\012\uffe0\013\uffe0\014\uffe0\026\uffe0\044\uffe0" +
    "\050\uffe0\072\uffe0\001\002\000\026\002\uffed\004\uffed\007" +
    "\uffed\012\uffed\013\uffed\014\uffed\026\uffed\044\uffed\050\uffed" +
    "\072\uffed\001\002\000\142\006\027\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\006\014\074\026\103\001\002\000\004\011\104\001" +
    "\002\000\144\006\027\011\026\012\uffff\015\021\017\022" +
    "\020\016\021\014\022\012\023\011\024\006\025\004\027" +
    "\071\030\063\031\061\032\057\033\055\034\054\035\052" +
    "\037\051\040\047\041\046\042\044\043\043\045\042\046" +
    "\041\047\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\005\066\065\067\064\070\062\071\060\073\056" +
    "\074\053\075\034\076\033\077\070\100\030\001\002\000" +
    "\004\012\106\001\002\000\026\002\uffe3\004\uffe3\007\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\026\uffe3\044\uffe3\050\uffe3\072" +
    "\uffe3\001\002\000\004\006\110\001\002\000\004\075\111" +
    "\001\002\000\004\007\112\001\002\000\026\002\uffda\004" +
    "\uffda\007\uffda\012\uffda\013\uffda\014\uffda\026\uffda\044\uffda" +
    "\050\uffda\072\uffda\001\002\000\142\006\027\011\026\015" +
    "\021\017\022\020\016\021\014\022\012\023\011\024\006" +
    "\025\004\027\071\030\063\031\061\032\057\033\055\034" +
    "\054\035\052\037\051\040\047\041\046\042\044\043\043" +
    "\045\042\046\041\047\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\005\066\065\067\064\070\062\071" +
    "\060\073\056\074\053\075\034\076\033\077\070\100\030" +
    "\001\002\000\006\013\115\014\074\001\002\000\142\006" +
    "\027\011\026\015\021\017\022\020\016\021\014\022\012" +
    "\023\011\024\006\025\004\027\071\030\063\031\061\032" +
    "\057\033\055\034\054\035\052\037\051\040\047\041\046" +
    "\042\044\043\043\045\042\046\041\047\040\051\037\052" +
    "\036\053\035\054\025\055\024\056\023\057\020\060\017" +
    "\061\015\062\013\063\010\064\007\065\005\066\065\067" +
    "\064\070\062\071\060\073\056\074\053\075\034\076\033" +
    "\077\070\100\030\001\002\000\006\013\117\014\074\001" +
    "\002\000\142\006\027\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\006\007" +
    "\121\014\074\001\002\000\026\002\uffdf\004\uffdf\007\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\026\uffdf\044\uffdf\050\uffdf\072" +
    "\uffdf\001\002\000\004\005\123\001\002\000\026\006\125" +
    "\011\026\015\021\025\004\034\054\035\052\037\051\040" +
    "\047\041\046\100\126\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\024\006\125\011\026\015\021\025\004" +
    "\034\054\035\052\037\051\040\047\041\046\001\002\000" +
    "\166\002\uffbe\004\uffbe\006\027\007\uffbe\011\026\012\uffbe" +
    "\013\uffbe\014\uffbe\015\021\017\022\020\016\021\014\022" +
    "\012\023\011\024\006\025\004\026\uffbe\027\071\030\063" +
    "\031\061\032\057\033\055\034\054\035\052\037\051\040" +
    "\047\041\046\042\044\043\043\044\uffbe\045\042\046\041" +
    "\047\040\050\uffbe\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\072" +
    "\uffbe\073\056\074\053\075\034\076\033\077\070\100\130" +
    "\001\002\000\026\002\uffbd\004\uffbd\007\uffbd\012\uffbd\013" +
    "\137\014\uffbd\026\uffbd\044\uffbd\050\uffbd\072\uffbd\001\002" +
    "\000\030\002\ufff3\004\ufff3\006\134\007\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\026\ufff3\044\ufff3\050\ufff3\072\ufff3\001\002" +
    "\000\026\002\ufff8\004\ufff8\007\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\026\ufff8\044\ufff8\050\ufff8\072\ufff8\001\002\000\026" +
    "\002\uffba\004\uffba\007\uffba\012\uffba\013\uffba\014\074\026" +
    "\uffba\044\uffba\050\uffba\072\uffba\001\002\000\026\002\uffbf" +
    "\004\uffbf\007\uffbf\012\uffbf\013\uffbf\014\uffbf\026\uffbf\044" +
    "\uffbf\050\uffbf\072\uffbf\001\002\000\144\006\027\007\uffff" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\004\007\136\001\002\000\026" +
    "\002\uffee\004\uffee\007\uffee\012\uffee\013\uffee\014\uffee\026" +
    "\uffee\044\uffee\050\uffee\072\uffee\001\002\000\166\002\uffbe" +
    "\004\uffbe\006\027\007\uffbe\011\026\012\uffbe\013\uffbe\014" +
    "\uffbe\015\021\017\022\020\016\021\014\022\012\023\011" +
    "\024\006\025\004\026\uffbe\027\071\030\063\031\061\032" +
    "\057\033\055\034\054\035\052\037\051\040\047\041\046" +
    "\042\044\043\043\044\uffbe\045\042\046\041\047\040\050" +
    "\uffbe\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\072\uffbe\073\056" +
    "\074\053\075\034\076\033\077\070\100\130\001\002\000" +
    "\026\002\uffbc\004\uffbc\007\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\026\uffbc\044\uffbc\050\uffbc\072\uffbc\001\002\000\004\007" +
    "\142\001\002\000\156\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\001\002\000\026" +
    "\002\ufff9\004\ufff9\007\ufff9\012\ufff9\013\ufff9\014\074\026" +
    "\ufff9\044\ufff9\050\ufff9\072\ufff9\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\006\007\146\014\074\001\002" +
    "\000\026\002\uffde\004\uffde\007\uffde\012\uffde\013\uffde\014" +
    "\uffde\026\uffde\044\uffde\050\uffde\072\uffde\001\002\000\004" +
    "\006\150\001\002\000\006\007\uffcb\100\151\001\002\000" +
    "\004\005\157\001\002\000\006\007\uffca\013\155\001\002" +
    "\000\004\007\154\001\002\000\026\002\uffef\004\uffef\007" +
    "\uffef\012\uffef\013\uffef\014\uffef\026\uffef\044\uffef\050\uffef" +
    "\072\uffef\001\002\000\006\007\uffcb\100\151\001\002\000" +
    "\004\007\uffc9\001\002\000\024\006\125\011\026\015\021" +
    "\025\004\034\054\035\052\037\051\040\047\041\046\001" +
    "\002\000\006\007\uffc0\013\uffc0\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\006\013\163\014\074\001\002" +
    "\000\142\006\027\011\026\015\021\017\022\020\016\021" +
    "\014\022\012\023\011\024\006\025\004\027\071\030\063" +
    "\031\061\032\057\033\055\034\054\035\052\037\051\040" +
    "\047\041\046\042\044\043\043\045\042\046\041\047\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\005" +
    "\066\065\067\064\070\062\071\060\073\056\074\053\075" +
    "\034\076\033\077\070\100\030\001\002\000\006\007\165" +
    "\014\074\001\002\000\026\002\uffdc\004\uffdc\007\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\026\uffdc\044\uffdc\050\uffdc\072\uffdc" +
    "\001\002\000\142\006\027\011\026\015\021\017\022\020" +
    "\016\021\014\022\012\023\011\024\006\025\004\027\071" +
    "\030\063\031\061\032\057\033\055\034\054\035\052\037" +
    "\051\040\047\041\046\042\044\043\043\045\042\046\041" +
    "\047\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\005\066\065\067\064\070\062\071\060\073\056\074" +
    "\053\075\034\076\033\077\070\100\030\001\002\000\006" +
    "\007\170\014\074\001\002\000\026\002\uffdb\004\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\026\uffdb\044\uffdb\050\uffdb" +
    "\072\uffdb\001\002\000\006\014\074\044\172\001\002\000" +
    "\004\006\173\001\002\000\142\006\027\011\026\015\021" +
    "\017\022\020\016\021\014\022\012\023\011\024\006\025" +
    "\004\027\071\030\063\031\061\032\057\033\055\034\054" +
    "\035\052\037\051\040\047\041\046\042\044\043\043\045" +
    "\042\046\041\047\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\005\066\065\067\064\070\062\071\060" +
    "\073\056\074\053\075\034\076\033\077\070\100\030\001" +
    "\002\000\006\007\175\014\074\001\002\000\026\002\uffd9" +
    "\004\uffd9\007\uffd9\012\uffd9\013\uffd9\014\uffd9\026\uffd9\044" +
    "\uffd9\050\uffd9\072\uffd9\001\002\000\150\002\uffff\006\027" +
    "\007\uffff\011\026\012\uffff\015\021\017\022\020\016\021" +
    "\014\022\012\023\011\024\006\025\004\027\071\030\063" +
    "\031\061\032\057\033\055\034\054\035\052\037\051\040" +
    "\047\041\046\042\044\043\043\045\042\046\041\047\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\005" +
    "\066\065\067\064\070\062\071\060\073\056\074\053\075" +
    "\034\076\033\077\070\100\030\001\002\000\150\002\uffff" +
    "\006\027\007\uffff\011\026\012\uffff\015\021\017\022\020" +
    "\016\021\014\022\012\023\011\024\006\025\004\027\071" +
    "\030\063\031\061\032\057\033\055\034\054\035\052\037" +
    "\051\040\047\041\046\042\044\043\043\045\042\046\041" +
    "\047\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\005\066\065\067\064\070\062\071\060\073\056\074" +
    "\053\075\034\076\033\077\070\100\030\001\002\000\010" +
    "\002\ufffa\007\ufffa\012\ufffa\001\002\000\010\002\ufffd\007" +
    "\ufffd\012\ufffd\001\002\000\142\006\027\011\026\015\021" +
    "\017\022\020\016\021\014\022\012\023\011\024\006\025" +
    "\004\027\071\030\063\031\061\032\057\033\055\034\054" +
    "\035\052\037\051\040\047\041\046\042\044\043\043\045" +
    "\042\046\041\047\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\005\066\065\067\064\070\062\071\060" +
    "\073\056\074\053\075\034\076\033\077\070\100\030\001" +
    "\002\000\006\013\204\014\074\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\006\007\206\014\074\001\002" +
    "\000\026\002\uffd1\004\uffd1\007\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\026\uffd1\044\uffd1\050\uffd1\072\uffd1\001\002\000\004" +
    "\006\210\001\002\000\144\006\027\007\uffff\011\026\015" +
    "\021\017\022\020\016\021\014\022\012\023\011\024\006" +
    "\025\004\027\071\030\063\031\061\032\057\033\055\034" +
    "\054\035\052\037\051\040\047\041\046\042\044\043\043" +
    "\045\042\046\041\047\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\005\066\065\067\064\070\062\071" +
    "\060\073\056\074\053\075\034\076\033\077\070\100\030" +
    "\001\002\000\004\007\212\001\002\000\026\002\ufff2\004" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\026\ufff2\044\ufff2" +
    "\050\ufff2\072\ufff2\001\002\000\004\006\214\001\002\000" +
    "\006\007\uffcb\100\151\001\002\000\004\007\216\001\002" +
    "\000\004\010\217\001\002\000\024\006\125\011\026\015" +
    "\021\025\004\034\054\035\052\037\051\040\047\041\046" +
    "\001\002\000\004\011\uffc5\001\002\000\004\011\222\001" +
    "\002\000\142\006\027\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\006\012" +
    "\224\014\074\001\002\000\026\002\ufff1\004\ufff1\007\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\026\ufff1\044\ufff1\050\ufff1\072" +
    "\ufff1\001\002\000\004\015\226\001\002\000\024\006\125" +
    "\011\026\015\021\025\004\034\054\035\052\037\051\040" +
    "\047\041\046\001\002\000\004\013\230\001\002\000\024" +
    "\006\125\011\026\015\021\025\004\034\054\035\052\037" +
    "\051\040\047\041\046\001\002\000\004\016\232\001\002" +
    "\000\004\006\233\001\002\000\006\006\234\007\uffc3\001" +
    "\002\000\142\006\027\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\006\007" +
    "\uffc2\013\240\001\002\000\004\007\237\001\002\000\026" +
    "\002\uffea\004\uffea\007\uffea\012\uffea\013\uffea\014\uffea\026" +
    "\uffea\044\uffea\050\uffea\072\uffea\001\002\000\006\006\234" +
    "\007\uffc3\001\002\000\004\007\uffc1\001\002\000\004\014" +
    "\243\001\002\000\142\006\027\011\026\015\021\017\022" +
    "\020\016\021\014\022\012\023\011\024\006\025\004\027" +
    "\071\030\063\031\061\032\057\033\055\034\054\035\052" +
    "\037\051\040\047\041\046\042\044\043\043\045\042\046" +
    "\041\047\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\005\066\065\067\064\070\062\071\060\073\056" +
    "\074\053\075\034\076\033\077\070\100\244\001\002\000" +
    "\010\006\134\007\ufff3\014\ufff3\001\002\000\006\007\246" +
    "\014\074\001\002\000\006\007\uffc4\013\uffc4\001\002\000" +
    "\144\006\027\007\uffff\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\004\007" +
    "\251\001\002\000\026\002\uffd5\004\uffd5\007\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\026\uffd5\044\uffd5\050\uffd5\072\uffd5\001" +
    "\002\000\142\006\027\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\006\013" +
    "\254\014\074\001\002\000\142\006\027\011\026\015\021" +
    "\017\022\020\016\021\014\022\012\023\011\024\006\025" +
    "\004\027\071\030\063\031\061\032\057\033\055\034\054" +
    "\035\052\037\051\040\047\041\046\042\044\043\043\045" +
    "\042\046\041\047\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\005\066\065\067\064\070\062\071\060" +
    "\073\056\074\053\075\034\076\033\077\070\100\030\001" +
    "\002\000\006\007\256\014\074\001\002\000\026\002\uffd4" +
    "\004\uffd4\007\uffd4\012\uffd4\013\uffd4\014\uffd4\026\uffd4\044" +
    "\uffd4\050\uffd4\072\uffd4\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\006\007\261\014\074\001\002\000\026" +
    "\002\uffe2\004\uffe2\007\uffe2\012\uffe2\013\uffe2\014\uffe2\026" +
    "\uffe2\044\uffe2\050\uffe2\072\uffe2\001\002\000\024\006\125" +
    "\011\026\015\021\025\004\034\054\035\052\037\051\040" +
    "\047\041\046\001\002\000\154\006\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\001\002\000\004" +
    "\002\001\001\002\000\004\007\271\001\002\000\012\004" +
    "\176\007\270\013\177\014\074\001\002\000\006\007\142" +
    "\025\101\001\002\000\026\002\ufff0\004\ufff0\007\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\026\ufff0\044\ufff0\050\ufff0\072\ufff0" +
    "\001\002\000\026\002\uffdd\004\uffdd\007\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\026\uffdd\044\uffdd\050\uffdd\072\uffdd\001\002" +
    "\000\004\012\273\001\002\000\154\006\uffb0\007\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\001\002\000" +
    "\006\014\074\072\275\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\006\014\074\050\277\001\002\000\142" +
    "\006\027\011\026\015\021\017\022\020\016\021\014\022" +
    "\012\023\011\024\006\025\004\027\071\030\063\031\061" +
    "\032\057\033\055\034\054\035\052\037\051\040\047\041" +
    "\046\042\044\043\043\045\042\046\041\047\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\005\066\065" +
    "\067\064\070\062\071\060\073\056\074\053\075\034\076" +
    "\033\077\070\100\030\001\002\000\026\002\uffec\004\uffec" +
    "\007\uffec\012\uffec\013\uffec\014\074\026\uffec\044\uffec\050" +
    "\uffec\072\uffec\001\002\000\142\006\027\011\026\015\021" +
    "\017\022\020\016\021\014\022\012\023\011\024\006\025" +
    "\004\027\071\030\063\031\061\032\057\033\055\034\054" +
    "\035\052\037\051\040\047\041\046\042\044\043\043\045" +
    "\042\046\041\047\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\005\066\065\067\064\070\062\071\060" +
    "\073\056\074\053\075\034\076\033\077\070\100\030\001" +
    "\002\000\006\013\303\014\074\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\006\007\305\014\074\001\002" +
    "\000\026\002\uffd2\004\uffd2\007\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\026\uffd2\044\uffd2\050\uffd2\072\uffd2\001\002\000\142" +
    "\006\027\011\026\015\021\017\022\020\016\021\014\022" +
    "\012\023\011\024\006\025\004\027\071\030\063\031\061" +
    "\032\057\033\055\034\054\035\052\037\051\040\047\041" +
    "\046\042\044\043\043\045\042\046\041\047\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\005\066\065" +
    "\067\064\070\062\071\060\073\056\074\053\075\034\076" +
    "\033\077\070\100\030\001\002\000\006\013\310\014\074" +
    "\001\002\000\142\006\027\011\026\015\021\017\022\020" +
    "\016\021\014\022\012\023\011\024\006\025\004\027\071" +
    "\030\063\031\061\032\057\033\055\034\054\035\052\037" +
    "\051\040\047\041\046\042\044\043\043\045\042\046\041" +
    "\047\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\005\066\065\067\064\070\062\071\060\073\056\074" +
    "\053\075\034\076\033\077\070\100\030\001\002\000\006" +
    "\007\312\014\074\001\002\000\026\002\uffd3\004\uffd3\007" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3\044\uffd3\050\uffd3" +
    "\072\uffd3\001\002\000\142\006\027\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\006\013\315\014\074\001\002\000\004\006\234\001" +
    "\002\000\004\007\317\001\002\000\026\002\uffe9\004\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\014\uffe9\026\uffe9\044\uffe9\050" +
    "\uffe9\072\uffe9\001\002\000\004\013\323\001\002\000\004" +
    "\016\322\001\002\000\156\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\001\002\000" +
    "\024\006\125\011\026\015\021\025\004\034\054\035\052" +
    "\037\051\040\047\041\046\001\002\000\004\016\325\001" +
    "\002\000\156\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\001\002\000\006\007\uffcb" +
    "\100\151\001\002\000\004\007\330\001\002\000\004\010" +
    "\331\001\002\000\024\006\125\011\026\015\021\025\004" +
    "\034\054\035\052\037\051\040\047\041\046\001\002\000" +
    "\004\011\333\001\002\000\142\006\027\011\026\015\021" +
    "\017\022\020\016\021\014\022\012\023\011\024\006\025" +
    "\004\027\071\030\063\031\061\032\057\033\055\034\054" +
    "\035\052\037\051\040\047\041\046\042\044\043\043\045" +
    "\042\046\041\047\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\005\066\065\067\064\070\062\071\060" +
    "\073\056\074\053\075\034\076\033\077\070\100\030\001" +
    "\002\000\006\012\335\014\074\001\002\000\026\002\uffeb" +
    "\004\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\026\uffeb\044" +
    "\uffeb\050\uffeb\072\uffeb\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\006\007\340\014\074\001\002\000\026" +
    "\002\uffe1\004\uffe1\007\uffe1\012\uffe1\013\uffe1\014\uffe1\026" +
    "\uffe1\044\uffe1\050\uffe1\072\uffe1\001\002\000\142\006\027" +
    "\011\026\015\021\017\022\020\016\021\014\022\012\023" +
    "\011\024\006\025\004\027\071\030\063\031\061\032\057" +
    "\033\055\034\054\035\052\037\051\040\047\041\046\042" +
    "\044\043\043\045\042\046\041\047\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\005\066\065\067\064" +
    "\070\062\071\060\073\056\074\053\075\034\076\033\077" +
    "\070\100\030\001\002\000\006\013\343\014\074\001\002" +
    "\000\142\006\027\011\026\015\021\017\022\020\016\021" +
    "\014\022\012\023\011\024\006\025\004\027\071\030\063" +
    "\031\061\032\057\033\055\034\054\035\052\037\051\040" +
    "\047\041\046\042\044\043\043\045\042\046\041\047\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\005" +
    "\066\065\067\064\070\062\071\060\073\056\074\053\075" +
    "\034\076\033\077\070\100\030\001\002\000\006\007\345" +
    "\014\074\001\002\000\026\002\uffe8\004\uffe8\007\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\026\uffe8\044\uffe8\050\uffe8\072\uffe8" +
    "\001\002\000\144\006\027\007\uffff\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\004\007\350\001\002\000\026\002\uffd7\004\uffd7\007" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\026\uffd7\044\uffd7\050\uffd7" +
    "\072\uffd7\001\002\000\142\006\027\011\026\015\021\017" +
    "\022\020\016\021\014\022\012\023\011\024\006\025\004" +
    "\027\071\030\063\031\061\032\057\033\055\034\054\035" +
    "\052\037\051\040\047\041\046\042\044\043\043\045\042" +
    "\046\041\047\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\005\066\065\067\064\070\062\071\060\073" +
    "\056\074\053\075\034\076\033\077\070\100\030\001\002" +
    "\000\006\013\353\014\074\001\002\000\142\006\027\011" +
    "\026\015\021\017\022\020\016\021\014\022\012\023\011" +
    "\024\006\025\004\027\071\030\063\031\061\032\057\033" +
    "\055\034\054\035\052\037\051\040\047\041\046\042\044" +
    "\043\043\045\042\046\041\047\040\051\037\052\036\053" +
    "\035\054\025\055\024\056\023\057\020\060\017\061\015" +
    "\062\013\063\010\064\007\065\005\066\065\067\064\070" +
    "\062\071\060\073\056\074\053\075\034\076\033\077\070" +
    "\100\030\001\002\000\006\007\355\014\074\001\002\000" +
    "\026\002\uffe7\004\uffe7\007\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\026\uffe7\044\uffe7\050\uffe7\072\uffe7\001\002\000\144\006" +
    "\027\007\uffff\011\026\015\021\017\022\020\016\021\014" +
    "\022\012\023\011\024\006\025\004\027\071\030\063\031" +
    "\061\032\057\033\055\034\054\035\052\037\051\040\047" +
    "\041\046\042\044\043\043\045\042\046\041\047\040\051" +
    "\037\052\036\053\035\054\025\055\024\056\023\057\020" +
    "\060\017\061\015\062\013\063\010\064\007\065\005\066" +
    "\065\067\064\070\062\071\060\073\056\074\053\075\034" +
    "\076\033\077\070\100\030\001\002\000\004\007\360\001" +
    "\002\000\026\002\uffd6\004\uffd6\007\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\026\uffd6\044\uffd6\050\uffd6\072\uffd6\001\002\000" +
    "\142\006\027\011\026\015\021\017\022\020\016\021\014" +
    "\022\012\023\011\024\006\025\004\027\071\030\063\031" +
    "\061\032\057\033\055\034\054\035\052\037\051\040\047" +
    "\041\046\042\044\043\043\045\042\046\041\047\040\051" +
    "\037\052\036\053\035\054\025\055\024\056\023\057\020" +
    "\060\017\061\015\062\013\063\010\064\007\065\005\066" +
    "\065\067\064\070\062\071\060\073\056\074\053\075\034" +
    "\076\033\077\070\100\030\001\002\000\006\007\363\014" +
    "\074\001\002\000\026\002\uffe6\004\uffe6\007\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\026\uffe6\044\uffe6\050\uffe6\072\uffe6\001" +
    "\002\000\142\006\027\011\026\015\021\017\022\020\016" +
    "\021\014\022\012\023\011\024\006\025\004\027\071\030" +
    "\063\031\061\032\057\033\055\034\054\035\052\037\051" +
    "\040\047\041\046\042\044\043\043\045\042\046\041\047" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\005\066\065\067\064\070\062\071\060\073\056\074\053" +
    "\075\034\076\033\077\070\100\030\001\002\000\006\007" +
    "\366\014\074\001\002\000\026\002\uffe5\004\uffe5\007\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\026\uffe5\044\uffe5\050\uffe5\072" +
    "\uffe5\001\002\000\142\006\027\011\026\015\021\017\022" +
    "\020\016\021\014\022\012\023\011\024\006\025\004\027" +
    "\071\030\063\031\061\032\057\033\055\034\054\035\052" +
    "\037\051\040\047\041\046\042\044\043\043\045\042\046" +
    "\041\047\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\005\066\065\067\064\070\062\071\060\073\056" +
    "\074\053\075\034\076\033\077\070\100\030\001\002\000" +
    "\006\013\371\014\074\001\002\000\142\006\027\011\026" +
    "\015\021\017\022\020\016\021\014\022\012\023\011\024" +
    "\006\025\004\027\071\030\063\031\061\032\057\033\055" +
    "\034\054\035\052\037\051\040\047\041\046\042\044\043" +
    "\043\045\042\046\041\047\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\005\066\065\067\064\070\062" +
    "\071\060\073\056\074\053\075\034\076\033\077\070\100" +
    "\030\001\002\000\006\007\373\014\074\001\002\000\026" +
    "\002\uffd0\004\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\026" +
    "\uffd0\044\uffd0\050\uffd0\072\uffd0\001\002\000\144\006\027" +
    "\007\uffff\011\026\015\021\017\022\020\016\021\014\022" +
    "\012\023\011\024\006\025\004\027\071\030\063\031\061" +
    "\032\057\033\055\034\054\035\052\037\051\040\047\041" +
    "\046\042\044\043\043\045\042\046\041\047\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\005\066\065" +
    "\067\064\070\062\071\060\073\056\074\053\075\034\076" +
    "\033\077\070\100\030\001\002\000\004\007\376\001\002" +
    "\000\026\002\uffd8\004\uffd8\007\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\026\uffd8\044\uffd8\050\uffd8\072\uffd8\001\002\000\142" +
    "\006\027\011\026\015\021\017\022\020\016\021\014\022" +
    "\012\023\011\024\006\025\004\027\071\030\063\031\061" +
    "\032\057\033\055\034\054\035\052\037\051\040\047\041" +
    "\046\042\044\043\043\045\042\046\041\047\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\005\066\065" +
    "\067\064\070\062\071\060\073\056\074\053\075\034\076" +
    "\033\077\070\100\030\001\002\000\006\007\u0101\014\074" +
    "\001\002\000\026\002\uffe4\004\uffe4\007\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\026\uffe4\044\uffe4\050\uffe4\072\uffe4\001\002" +
    "\000\026\002\uffce\004\uffce\007\uffce\012\uffce\013\uffce\014" +
    "\uffce\026\uffce\044\uffce\050\uffce\072\uffce\001\002\000\004" +
    "\026\u0104\001\002\000\156\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\016\002\030\003\044\004\047\005\066\016" +
    "\031\017\065\001\001\000\006\016\031\017\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\031" +
    "\017\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\273\005\066\016\031\017\065" +
    "\001\001\000\006\016\031\017\271\001\001\000\014\003" +
    "\264\004\265\005\066\016\031\017\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\170" +
    "\005\066\016\031\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\072\005\066\016\031\017\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\075\005\066\016" +
    "\031\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\101\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\104\004\047\005\066\016\031\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\113\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\012\004\115\005\066\016\031\017\065\001\001\000" +
    "\002\001\001\000\012\004\117\005\066\016\031\017\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\031\017\123\001\001\000\012\004\142" +
    "\005\066\016\031\017\065\001\001\000\006\016\031\017" +
    "\140\001\001\000\020\004\131\005\066\013\130\014\132" +
    "\015\126\016\031\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\134\004\047\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\131\005\066\014\137\015\126\016\031\017\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\144\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\152\012\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\155\012\151\001\001\000\002\001\001\000" +
    "\006\016\031\017\157\001\001\000\002\001\001\000\012" +
    "\004\161\005\066\016\031\017\065\001\001\000\002\001" +
    "\001\000\012\004\163\005\066\016\031\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\166\005" +
    "\066\016\031\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\173\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\200\004\047\005\066\016" +
    "\031\017\065\001\001\000\014\003\177\004\047\005\066" +
    "\016\031\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\202\005\066\016\031\017\065\001\001" +
    "\000\002\001\001\000\012\004\204\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\210\004\047\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\214\012\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\220\016\031\017\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\222\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\031\017" +
    "\226\001\001\000\002\001\001\000\006\016\031\017\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\234\011\235\001\001\000\012\004\241\005\066\016\031" +
    "\017\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\234\011\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\244\005\066\016" +
    "\031\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\247\004\047\005\066\016" +
    "\031\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\252\005\066\016\031\017\065\001\001\000" +
    "\002\001\001\000\012\004\254\005\066\016\031\017\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\257\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\031\017\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\275\005\066\016\031\017\065\001\001\000" +
    "\002\001\001\000\012\004\277\005\066\016\031\017\065" +
    "\001\001\000\002\001\001\000\012\004\301\005\066\016" +
    "\031\017\065\001\001\000\002\001\001\000\012\004\303" +
    "\005\066\016\031\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\306\005\066\016\031\017\065" +
    "\001\001\000\002\001\001\000\012\004\310\005\066\016" +
    "\031\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\313\005\066\016\031\017\065\001\001\000" +
    "\002\001\001\000\004\010\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\031\017\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\326\012\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\331" +
    "\016\031\017\217\001\001\000\002\001\001\000\012\004" +
    "\333\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\336\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\341\005\066\016\031\017\065\001\001\000\002\001" +
    "\001\000\012\004\343\005\066\016\031\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\346\004" +
    "\047\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\351\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\012\004\353\005\066" +
    "\016\031\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\356\004\047\005\066\016\031\017\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\361\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\364\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\367\005\066\016\031\017\065\001\001\000\002\001" +
    "\001\000\012\004\371\005\066\016\031\017\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\374\004" +
    "\047\005\066\016\031\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\377\005\066\016\031\017" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_7 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_52 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_52 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_31 _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_4 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.FuncCall(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_33 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_53 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr _SYMB_8 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_40 Expr _SYMB_54 Expr _SYMB_36 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_43 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_34 _IDENT_ _SYMB_9 Type _SYMB_7 Type _SYMB_10 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_11 _SYMB_2 Expr _SYMB_7 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_12 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_13 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictKeys(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_15 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictValues(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_16 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= Type _SYMB_17 Expr _SYMB_18 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= _SYMB_39 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_44 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_19 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_7 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_21 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_2 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleConstructor(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_22 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_23 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_50 _SYMB_26 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_56 Expr _SYMB_32 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_48 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_45 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= _SYMB_46 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= _SYMB_35 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= _SYMB_37 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= _SYMB_42 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= _SYMB_41 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= _SYMB_30 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= _SYMB_47 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= _SYMB_51 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= _SYMB_49 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= _SYMB_55 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= _SYMB_38 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Pair ::= _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListPair ::= Pair _SYMB_7 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListArg ::= Arg _SYMB_7 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type1 ::= _SYMB_29 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.TupleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Type1 ::= _SYMB_24 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type1 ::= _SYMB_27 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type1 ::= _SYMB_25 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type1 ::= _SYMB_28 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Type1 ::= _SYMB_17 Type _SYMB_18 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Type1 ::= _SYMB_9 _IDENT_ _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type1 ::= _SYMB_9 Type _SYMB_7 Type _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
