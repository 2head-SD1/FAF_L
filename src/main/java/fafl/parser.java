
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\007\000\002\004\014\000\002\004\016\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\003\000" +
    "\002\004\010\000\002\004\013\000\002\004\014\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\011" +
    "\000\002\004\006\000\002\004\006\000\002\004\012\000" +
    "\002\004\010\000\002\004\010\000\002\004\012\000\002" +
    "\004\006\000\002\004\006\000\002\004\010\000\002\004" +
    "\006\000\002\004\007\000\002\004\010\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\003\000\002\004\006" +
    "\000\002\005\003\000\002\005\003\000\002\006\002\000" +
    "\002\006\003\000\002\006\005\000\002\006\002\000\002" +
    "\006\003\000\002\006\005\000\002\007\003\000\002\010" +
    "\005\000\002\011\007\000\002\012\002\000\002\012\003" +
    "\000\002\012\005\000\002\013\005\000\002\014\003\000" +
    "\002\015\002\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\007\000\002\017\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\164\002\uffff\006\026\011\025\016\023\020" +
    "\017\021\015\022\013\023\012\024\010\025\006\026\004" +
    "\030\074\031\072\032\071\033\067\034\064\035\062\036" +
    "\060\037\056\040\053\041\052\042\046\043\045\044\042" +
    "\045\041\046\040\050\037\051\036\052\035\053\034\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\011" +
    "\064\007\065\005\066\077\067\076\070\075\071\073\072" +
    "\070\073\066\074\065\075\063\076\061\077\055\100\050" +
    "\102\047\103\044\104\043\105\033\106\032\107\102\110" +
    "\027\001\002\000\030\006\175\011\025\016\023\026\004" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\001\002\000\004\006\u0125\001\002\000\004\006\u0122" +
    "\001\002\000\004\006\u011a\001\002\000\004\006\u0117\001" +
    "\002\000\004\006\u0112\001\002\000\004\006\u010f\001\002" +
    "\000\004\006\u010a\001\002\000\004\006\u0105\001\002\000" +
    "\004\006\u0100\001\002\000\004\006\375\001\002\000\004" +
    "\006\370\001\002\000\162\006\026\011\025\016\023\020" +
    "\017\021\015\022\013\023\012\024\010\025\006\026\004" +
    "\030\074\031\072\032\071\033\067\034\064\035\062\036" +
    "\060\037\056\040\053\041\052\042\046\043\045\044\042" +
    "\045\041\046\040\050\037\051\036\052\035\053\034\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\011" +
    "\064\007\065\005\066\077\067\076\070\075\071\073\072" +
    "\070\073\066\074\065\075\063\076\061\077\055\100\050" +
    "\102\047\103\044\104\043\105\033\106\032\107\102\110" +
    "\027\001\002\000\004\006\360\001\002\000\026\002\uffc6" +
    "\004\uffc6\007\uffc6\012\uffc6\014\uffc6\015\uffc6\027\uffc6\047" +
    "\uffc6\054\uffc6\101\uffc6\001\002\000\032\006\175\011\025" +
    "\016\023\026\004\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\110\353\001\002\000\004\006\345" +
    "\001\002\000\030\006\175\011\025\016\023\026\004\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\001\002\000\162\006\026\011\025\016\023\020\017\021" +
    "\015\022\013\023\012\024\010\025\006\026\004\030\074" +
    "\031\072\032\071\033\067\034\064\035\062\036\060\037" +
    "\056\040\053\041\052\042\046\043\045\044\042\045\041" +
    "\046\040\050\037\051\036\052\035\053\034\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\011\064\007" +
    "\065\005\066\077\067\076\070\075\071\073\072\070\073" +
    "\066\074\065\075\063\076\061\077\055\100\050\102\047" +
    "\103\044\104\043\105\033\106\032\107\102\110\027\001" +
    "\002\000\030\002\ufff3\004\ufff3\006\204\007\ufff3\012\ufff3" +
    "\014\ufff3\015\ufff3\027\ufff3\047\ufff3\054\ufff3\101\ufff3\001" +
    "\002\000\004\002\337\001\002\000\200\006\uffa5\007\uffa5" +
    "\010\335\011\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5" +
    "\077\uffa5\100\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106" +
    "\uffa5\107\uffa5\110\uffa5\001\002\000\026\002\ufff7\004\ufff7" +
    "\007\ufff7\012\ufff7\014\ufff7\015\ufff7\027\ufff7\047\ufff7\054" +
    "\ufff7\101\ufff7\001\002\000\026\002\ufff4\004\ufff4\007\ufff4" +
    "\012\ufff4\014\ufff4\015\ufff4\027\ufff4\047\ufff4\054\ufff4\101" +
    "\ufff4\001\002\000\004\006\332\001\002\000\004\006\327" +
    "\001\002\000\004\110\306\001\002\000\004\110\267\001" +
    "\002\000\004\110\263\001\002\000\004\006\256\001\002" +
    "\000\004\006\247\001\002\000\004\006\244\001\002\000" +
    "\162\006\026\011\025\016\023\020\017\021\015\022\013" +
    "\023\012\024\010\025\006\026\004\030\074\031\072\032" +
    "\071\033\067\034\064\035\062\036\060\037\056\040\053" +
    "\041\052\042\046\043\045\044\042\045\041\046\040\050" +
    "\037\051\036\052\035\053\034\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\011\064\007\065\005\066" +
    "\077\067\076\070\075\071\073\072\070\073\066\074\065" +
    "\075\063\076\061\077\055\100\050\102\047\103\044\104" +
    "\043\105\033\106\032\107\102\110\027\001\002\000\200" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0\103\uffb0\104" +
    "\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\001\002\000\200" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\076\uffac\077\uffac\100\uffac\102\uffac\103\uffac\104" +
    "\uffac\105\uffac\106\uffac\107\uffac\110\uffac\001\002\000\026" +
    "\002\uffc7\004\uffc7\007\uffc7\012\uffc7\014\uffc7\015\uffc7\027" +
    "\uffc7\047\uffc7\054\uffc7\101\uffc7\001\002\000\004\110\225" +
    "\001\002\000\004\002\000\001\002\000\200\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\100\uffae\102\uffae\103\uffae\104\uffae\105\uffae" +
    "\106\uffae\107\uffae\110\uffae\001\002\000\200\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\106\uffb1\107\uffb1\110\uffb1\001\002\000\014\002\ufffe\004" +
    "\221\007\ufffe\012\ufffe\014\222\001\002\000\004\006\216" +
    "\001\002\000\200\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\001\002\000\026\002\uffec\004\uffec\007\uffec\012\uffec\014" +
    "\uffec\015\214\027\uffec\047\uffec\054\uffec\101\uffec\001\002" +
    "\000\200\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\102\uffaf\103" +
    "\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\001\002" +
    "\000\004\110\172\001\002\000\200\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2" +
    "\107\uffb2\110\uffb2\001\002\000\004\006\165\001\002\000" +
    "\004\006\162\001\002\000\026\002\uffc9\004\uffc9\007\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\027\uffc9\047\uffc9\054\uffc9\101" +
    "\uffc9\001\002\000\004\040\156\001\002\000\004\006\151" +
    "\001\002\000\004\006\146\001\002\000\004\006\143\001" +
    "\002\000\004\006\134\001\002\000\004\006\131\001\002" +
    "\000\004\006\124\001\002\000\004\006\117\001\002\000" +
    "\004\006\114\001\002\000\004\006\111\001\002\000\004" +
    "\026\103\001\002\000\026\002\ufff5\004\ufff5\007\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\027\ufff5\047\ufff5\054\ufff5\101\ufff5" +
    "\001\002\000\026\002\ufff6\004\ufff6\007\ufff6\012\ufff6\014" +
    "\ufff6\015\ufff6\027\ufff6\047\ufff6\054\ufff6\101\ufff6\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\027\105\001\002\000\004\011\106\001\002\000\164" +
    "\006\026\011\025\012\uffff\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\012\110\001\002\000\026\002\uffe2\004\uffe2\007\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\027\uffe2\047\uffe2\054\uffe2\101" +
    "\uffe2\001\002\000\164\006\026\007\uffff\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\113\001\002\000\026\002" +
    "\uffd4\004\uffd4\007\uffd4\012\uffd4\014\uffd4\015\uffd4\027\uffd4" +
    "\047\uffd4\054\uffd4\101\uffd4\001\002\000\164\006\026\007" +
    "\uffff\011\025\016\023\020\017\021\015\022\013\023\012" +
    "\024\010\025\006\026\004\030\074\031\072\032\071\033" +
    "\067\034\064\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\044\042\045\041\046\040\050\037\051" +
    "\036\052\035\053\034\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\011\064\007\065\005\066\077\067" +
    "\076\070\075\071\073\072\070\073\066\074\065\075\063" +
    "\076\061\077\055\100\050\102\047\103\044\104\043\105" +
    "\033\106\032\107\102\110\027\001\002\000\004\007\116" +
    "\001\002\000\026\002\uffd3\004\uffd3\007\uffd3\012\uffd3\014" +
    "\uffd3\015\uffd3\027\uffd3\047\uffd3\054\uffd3\101\uffd3\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\014\121\001\002\000\162\006\026\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\123\001\002\000\026\002" +
    "\uffca\004\uffca\007\uffca\012\uffca\014\uffca\015\uffca\027\uffca" +
    "\047\uffca\054\uffca\101\uffca\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\014\126\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\007\130\001\002\000\026\002\uffdd\004\uffdd\007\uffdd" +
    "\012\uffdd\014\uffdd\015\uffdd\027\uffdd\047\uffdd\054\uffdd\101" +
    "\uffdd\001\002\000\164\006\026\007\uffff\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\133\001\002\000\026\002" +
    "\uffd5\004\uffd5\007\uffd5\012\uffd5\014\uffd5\015\uffd5\027\uffd5" +
    "\047\uffd5\054\uffd5\101\uffd5\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\014\136\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\014\140\001\002\000\162\006\026\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\142\001\002\000\026\002" +
    "\uffdc\004\uffdc\007\uffdc\012\uffdc\014\uffdc\015\uffdc\027\uffdc" +
    "\047\uffdc\054\uffdc\101\uffdc\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\007\145\001\002" +
    "\000\026\002\uffdb\004\uffdb\007\uffdb\012\uffdb\014\uffdb\015" +
    "\uffdb\027\uffdb\047\uffdb\054\uffdb\101\uffdb\001\002\000\162" +
    "\006\026\011\025\016\023\020\017\021\015\022\013\023" +
    "\012\024\010\025\006\026\004\030\074\031\072\032\071" +
    "\033\067\034\064\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\044\042\045\041\046\040\050\037" +
    "\051\036\052\035\053\034\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\011\064\007\065\005\066\077" +
    "\067\076\070\075\071\073\072\070\073\066\074\065\075" +
    "\063\076\061\077\055\100\050\102\047\103\044\104\043" +
    "\105\033\106\032\107\102\110\027\001\002\000\004\007" +
    "\150\001\002\000\026\002\uffc8\004\uffc8\007\uffc8\012\uffc8" +
    "\014\uffc8\015\uffc8\027\uffc8\047\uffc8\054\uffc8\101\uffc8\001" +
    "\002\000\162\006\026\011\025\016\023\020\017\021\015" +
    "\022\013\023\012\024\010\025\006\026\004\030\074\031" +
    "\072\032\071\033\067\034\064\035\062\036\060\037\056" +
    "\040\053\041\052\042\046\043\045\044\042\045\041\046" +
    "\040\050\037\051\036\052\035\053\034\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\011\064\007\065" +
    "\005\066\077\067\076\070\075\071\073\072\070\073\066" +
    "\074\065\075\063\076\061\077\055\100\050\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\027\001\002" +
    "\000\004\014\153\001\002\000\162\006\026\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\007\155\001\002\000\026" +
    "\002\uffd9\004\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\027" +
    "\uffd9\047\uffd9\054\uffd9\101\uffd9\001\002\000\004\006\157" +
    "\001\002\000\004\105\160\001\002\000\004\007\161\001" +
    "\002\000\026\002\uffd7\004\uffd7\007\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\027\uffd7\047\uffd7\054\uffd7\101\uffd7\001\002\000" +
    "\162\006\026\011\025\016\023\020\017\021\015\022\013" +
    "\023\012\024\010\025\006\026\004\030\074\031\072\032" +
    "\071\033\067\034\064\035\062\036\060\037\056\040\053" +
    "\041\052\042\046\043\045\044\042\045\041\046\040\050" +
    "\037\051\036\052\035\053\034\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\011\064\007\065\005\066" +
    "\077\067\076\070\075\071\073\072\070\073\066\074\065" +
    "\075\063\076\061\077\055\100\050\102\047\103\044\104" +
    "\043\105\033\106\032\107\102\110\027\001\002\000\004" +
    "\007\164\001\002\000\026\002\uffd8\004\uffd8\007\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\027\uffd8\047\uffd8\054\uffd8\101\uffd8" +
    "\001\002\000\162\006\026\011\025\016\023\020\017\021" +
    "\015\022\013\023\012\024\010\025\006\026\004\030\074" +
    "\031\072\032\071\033\067\034\064\035\062\036\060\037" +
    "\056\040\053\041\052\042\046\043\045\044\042\045\041" +
    "\046\040\050\037\051\036\052\035\053\034\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\011\064\007" +
    "\065\005\066\077\067\076\070\075\071\073\072\070\073" +
    "\066\074\065\075\063\076\061\077\055\100\050\102\047" +
    "\103\044\104\043\105\033\106\032\107\102\110\027\001" +
    "\002\000\004\014\167\001\002\000\162\006\026\011\025" +
    "\016\023\020\017\021\015\022\013\023\012\024\010\025" +
    "\006\026\004\030\074\031\072\032\071\033\067\034\064" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\044\042\045\041\046\040\050\037\051\036\052\035" +
    "\053\034\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\011\064\007\065\005\066\077\067\076\070\075" +
    "\071\073\072\070\073\066\074\065\075\063\076\061\077" +
    "\055\100\050\102\047\103\044\104\043\105\033\106\032" +
    "\107\102\110\027\001\002\000\004\007\171\001\002\000" +
    "\026\002\uffde\004\uffde\007\uffde\012\uffde\014\uffde\015\uffde" +
    "\027\uffde\047\uffde\054\uffde\101\uffde\001\002\000\004\005" +
    "\173\001\002\000\032\006\175\011\025\016\023\026\004" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\110\176\001\002\000\162\006\026\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\030\006\175\011\025\016\023\026" +
    "\004\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\001\002\000\206\002\uffb7\004\uffb7\006\026\007" +
    "\uffb7\011\025\012\uffb7\014\uffb7\015\uffb7\016\023\020\017" +
    "\021\015\022\013\023\012\024\010\025\006\026\004\027" +
    "\uffb7\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\047\uffb7\050\037\051\036\052\035" +
    "\053\034\054\uffb7\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\011\064\007\065\005\066\077\067\076" +
    "\070\075\071\073\072\070\073\066\074\065\075\063\076" +
    "\061\077\055\100\050\101\uffb7\102\047\103\044\104\043" +
    "\105\033\106\032\107\102\110\200\001\002\000\026\002" +
    "\uffb6\004\uffb6\007\uffb6\012\uffb6\014\207\015\uffb6\027\uffb6" +
    "\047\uffb6\054\uffb6\101\uffb6\001\002\000\030\002\ufff3\004" +
    "\ufff3\006\204\007\ufff3\012\ufff3\014\ufff3\015\ufff3\027\ufff3" +
    "\047\ufff3\054\ufff3\101\ufff3\001\002\000\026\002\ufff8\004" +
    "\ufff8\007\ufff8\012\ufff8\014\ufff8\015\ufff8\027\ufff8\047\ufff8" +
    "\054\ufff8\101\ufff8\001\002\000\026\002\uffb3\004\uffb3\007" +
    "\uffb3\012\uffb3\014\uffb3\015\uffb3\027\uffb3\047\uffb3\054\uffb3" +
    "\101\uffb3\001\002\000\026\002\uffb8\004\uffb8\007\uffb8\012" +
    "\uffb8\014\uffb8\015\uffb8\027\uffb8\047\uffb8\054\uffb8\101\uffb8" +
    "\001\002\000\164\006\026\007\uffff\011\025\016\023\020" +
    "\017\021\015\022\013\023\012\024\010\025\006\026\004" +
    "\030\074\031\072\032\071\033\067\034\064\035\062\036" +
    "\060\037\056\040\053\041\052\042\046\043\045\044\042" +
    "\045\041\046\040\050\037\051\036\052\035\053\034\055" +
    "\024\056\022\057\021\060\020\061\016\062\014\063\011" +
    "\064\007\065\005\066\077\067\076\070\075\071\073\072" +
    "\070\073\066\074\065\075\063\076\061\077\055\100\050" +
    "\102\047\103\044\104\043\105\033\106\032\107\102\110" +
    "\027\001\002\000\004\007\206\001\002\000\026\002\uffee" +
    "\004\uffee\007\uffee\012\uffee\014\uffee\015\uffee\027\uffee\047" +
    "\uffee\054\uffee\101\uffee\001\002\000\206\002\uffb7\004\uffb7" +
    "\006\026\007\uffb7\011\025\012\uffb7\014\uffb7\015\uffb7\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\027\uffb7\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\047\uffb7\050\037\051" +
    "\036\052\035\053\034\054\uffb7\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\011\064\007\065\005\066" +
    "\077\067\076\070\075\071\073\072\070\073\066\074\065" +
    "\075\063\076\061\077\055\100\050\101\uffb7\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\200\001\002" +
    "\000\026\002\uffb5\004\uffb5\007\uffb5\012\uffb5\014\uffb5\015" +
    "\uffb5\027\uffb5\047\uffb5\054\uffb5\101\uffb5\001\002\000\004" +
    "\007\212\001\002\000\200\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\110\uffa8\001\002\000\026\002\ufff9\004\ufff9\007\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\027\ufff9\047\ufff9\054\ufff9\101\ufff9" +
    "\001\002\000\004\110\215\001\002\000\026\002\uffed\004" +
    "\uffed\007\uffed\012\uffed\014\uffed\015\uffed\027\uffed\047\uffed" +
    "\054\uffed\101\uffed\001\002\000\162\006\026\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\007\220\001\002\000\026" +
    "\002\uffcf\004\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf\027" +
    "\uffcf\047\uffcf\054\uffcf\101\uffcf\001\002\000\170\002\uffff" +
    "\006\026\007\uffff\011\025\012\uffff\016\023\020\017\021" +
    "\015\022\013\023\012\024\010\025\006\026\004\030\074" +
    "\031\072\032\071\033\067\034\064\035\062\036\060\037" +
    "\056\040\053\041\052\042\046\043\045\044\042\045\041" +
    "\046\040\050\037\051\036\052\035\053\034\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\011\064\007" +
    "\065\005\066\077\067\076\070\075\071\073\072\070\073" +
    "\066\074\065\075\063\076\061\077\055\100\050\102\047" +
    "\103\044\104\043\105\033\106\032\107\102\110\027\001" +
    "\002\000\170\002\uffff\006\026\007\uffff\011\025\012\uffff" +
    "\016\023\020\017\021\015\022\013\023\012\024\010\025" +
    "\006\026\004\030\074\031\072\032\071\033\067\034\064" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\044\042\045\041\046\040\050\037\051\036\052\035" +
    "\053\034\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\011\064\007\065\005\066\077\067\076\070\075" +
    "\071\073\072\070\073\066\074\065\075\063\076\061\077" +
    "\055\100\050\102\047\103\044\104\043\105\033\106\032" +
    "\107\102\110\027\001\002\000\010\002\ufffa\007\ufffa\012" +
    "\ufffa\001\002\000\010\002\ufffd\007\ufffd\012\ufffd\001\002" +
    "\000\004\006\226\001\002\000\006\007\uffc5\110\227\001" +
    "\002\000\004\005\235\001\002\000\006\007\uffc4\014\233" +
    "\001\002\000\004\007\232\001\002\000\026\002\uffef\004" +
    "\uffef\007\uffef\012\uffef\014\uffef\015\uffef\027\uffef\047\uffef" +
    "\054\uffef\101\uffef\001\002\000\006\007\uffc5\110\227\001" +
    "\002\000\004\007\uffc3\001\002\000\030\006\175\011\025" +
    "\016\023\026\004\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\001\002\000\006\007\uffb9\014\uffb9" +
    "\001\002\000\004\047\240\001\002\000\004\006\241\001" +
    "\002\000\162\006\026\011\025\016\023\020\017\021\015" +
    "\022\013\023\012\024\010\025\006\026\004\030\074\031" +
    "\072\032\071\033\067\034\064\035\062\036\060\037\056" +
    "\040\053\041\052\042\046\043\045\044\042\045\041\046" +
    "\040\050\037\051\036\052\035\053\034\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\011\064\007\065" +
    "\005\066\077\067\076\070\075\071\073\072\070\073\066" +
    "\074\065\075\063\076\061\077\055\100\050\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\027\001\002" +
    "\000\004\007\243\001\002\000\026\002\uffd6\004\uffd6\007" +
    "\uffd6\012\uffd6\014\uffd6\015\uffd6\027\uffd6\047\uffd6\054\uffd6" +
    "\101\uffd6\001\002\000\164\006\026\007\uffff\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\007\246\001\002\000\026" +
    "\002\uffda\004\uffda\007\uffda\012\uffda\014\uffda\015\uffda\027" +
    "\uffda\047\uffda\054\uffda\101\uffda\001\002\000\162\006\026" +
    "\011\025\016\023\020\017\021\015\022\013\023\012\024" +
    "\010\025\006\026\004\030\074\031\072\032\071\033\067" +
    "\034\064\035\062\036\060\037\056\040\053\041\052\042" +
    "\046\043\045\044\042\045\041\046\040\050\037\051\036" +
    "\052\035\053\034\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\011\064\007\065\005\066\077\067\076" +
    "\070\075\071\073\072\070\073\066\074\065\075\063\076" +
    "\061\077\055\100\050\102\047\103\044\104\043\105\033" +
    "\106\032\107\102\110\027\001\002\000\004\014\251\001" +
    "\002\000\162\006\026\011\025\016\023\020\017\021\015" +
    "\022\013\023\012\024\010\025\006\026\004\030\074\031" +
    "\072\032\071\033\067\034\064\035\062\036\060\037\056" +
    "\040\053\041\052\042\046\043\045\044\042\045\041\046" +
    "\040\050\037\051\036\052\035\053\034\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\011\064\007\065" +
    "\005\066\077\067\076\070\075\071\073\072\070\073\066" +
    "\074\065\075\063\076\061\077\055\100\050\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\027\001\002" +
    "\000\004\014\253\001\002\000\162\006\026\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\007\255\001\002\000\026" +
    "\002\uffdf\004\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\027" +
    "\uffdf\047\uffdf\054\uffdf\101\uffdf\001\002\000\162\006\026" +
    "\011\025\016\023\020\017\021\015\022\013\023\012\024" +
    "\010\025\006\026\004\030\074\031\072\032\071\033\067" +
    "\034\064\035\062\036\060\037\056\040\053\041\052\042" +
    "\046\043\045\044\042\045\041\046\040\050\037\051\036" +
    "\052\035\053\034\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\011\064\007\065\005\066\077\067\076" +
    "\070\075\071\073\072\070\073\066\074\065\075\063\076" +
    "\061\077\055\100\050\102\047\103\044\104\043\105\033" +
    "\106\032\107\102\110\027\001\002\000\004\014\260\001" +
    "\002\000\162\006\026\011\025\016\023\020\017\021\015" +
    "\022\013\023\012\024\010\025\006\026\004\030\074\031" +
    "\072\032\071\033\067\034\064\035\062\036\060\037\056" +
    "\040\053\041\052\042\046\043\045\044\042\045\041\046" +
    "\040\050\037\051\036\052\035\053\034\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\011\064\007\065" +
    "\005\066\077\067\076\070\075\071\073\072\070\073\066" +
    "\074\065\075\063\076\061\077\055\100\050\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\027\001\002" +
    "\000\004\007\262\001\002\000\026\002\uffcb\004\uffcb\007" +
    "\uffcb\012\uffcb\014\uffcb\015\uffcb\027\uffcb\047\uffcb\054\uffcb" +
    "\101\uffcb\001\002\000\004\006\264\001\002\000\164\006" +
    "\026\007\uffff\011\025\016\023\020\017\021\015\022\013" +
    "\023\012\024\010\025\006\026\004\030\074\031\072\032" +
    "\071\033\067\034\064\035\062\036\060\037\056\040\053" +
    "\041\052\042\046\043\045\044\042\045\041\046\040\050" +
    "\037\051\036\052\035\053\034\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\011\064\007\065\005\066" +
    "\077\067\076\070\075\071\073\072\070\073\066\074\065" +
    "\075\063\076\061\077\055\100\050\102\047\103\044\104" +
    "\043\105\033\106\032\107\102\110\027\001\002\000\004" +
    "\007\266\001\002\000\026\002\ufff2\004\ufff2\007\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\027\ufff2\047\ufff2\054\ufff2\101\ufff2" +
    "\001\002\000\004\006\270\001\002\000\006\007\uffc5\110" +
    "\227\001\002\000\004\007\272\001\002\000\004\010\273" +
    "\001\002\000\030\006\175\011\025\016\023\026\004\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\001\002\000\006\011\uffbf\013\uffbf\001\002\000\006\011" +
    "\277\013\276\001\002\000\004\040\302\001\002\000\162" +
    "\006\026\011\025\016\023\020\017\021\015\022\013\023" +
    "\012\024\010\025\006\026\004\030\074\031\072\032\071" +
    "\033\067\034\064\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\044\042\045\041\046\040\050\037" +
    "\051\036\052\035\053\034\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\011\064\007\065\005\066\077" +
    "\067\076\070\075\071\073\072\070\073\066\074\065\075" +
    "\063\076\061\077\055\100\050\102\047\103\044\104\043" +
    "\105\033\106\032\107\102\110\027\001\002\000\004\012" +
    "\301\001\002\000\026\002\ufff1\004\ufff1\007\ufff1\012\ufff1" +
    "\014\ufff1\015\ufff1\027\ufff1\047\ufff1\054\ufff1\101\ufff1\001" +
    "\002\000\004\011\303\001\002\000\162\006\026\011\025" +
    "\016\023\020\017\021\015\022\013\023\012\024\010\025" +
    "\006\026\004\030\074\031\072\032\071\033\067\034\064" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\044\042\045\041\046\040\050\037\051\036\052\035" +
    "\053\034\055\024\056\022\057\021\060\020\061\016\062" +
    "\014\063\011\064\007\065\005\066\077\067\076\070\075" +
    "\071\073\072\070\073\066\074\065\075\063\076\061\077" +
    "\055\100\050\102\047\103\044\104\043\105\033\106\032" +
    "\107\102\110\027\001\002\000\004\012\305\001\002\000" +
    "\026\002\ufff0\004\ufff0\007\ufff0\012\ufff0\014\ufff0\015\ufff0" +
    "\027\ufff0\047\ufff0\054\ufff0\101\ufff0\001\002\000\004\016" +
    "\307\001\002\000\030\006\175\011\025\016\023\026\004" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\001\002\000\004\014\311\001\002\000\030\006\175" +
    "\011\025\016\023\026\004\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\001\002\000\004\017\313" +
    "\001\002\000\004\006\314\001\002\000\006\006\315\007" +
    "\uffbc\001\002\000\162\006\026\011\025\016\023\020\017" +
    "\021\015\022\013\023\012\024\010\025\006\026\004\030" +
    "\074\031\072\032\071\033\067\034\064\035\062\036\060" +
    "\037\056\040\053\041\052\042\046\043\045\044\042\045" +
    "\041\046\040\050\037\051\036\052\035\053\034\055\024" +
    "\056\022\057\021\060\020\061\016\062\014\063\011\064" +
    "\007\065\005\066\077\067\076\070\075\071\073\072\070" +
    "\073\066\074\065\075\063\076\061\077\055\100\050\102" +
    "\047\103\044\104\043\105\033\106\032\107\102\110\027" +
    "\001\002\000\006\007\uffbb\014\321\001\002\000\004\007" +
    "\320\001\002\000\026\002\uffe9\004\uffe9\007\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\027\uffe9\047\uffe9\054\uffe9\101\uffe9\001" +
    "\002\000\006\006\315\007\uffbc\001\002\000\004\007\uffba" +
    "\001\002\000\004\015\324\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\007\326\001\002" +
    "\000\006\007\uffbd\014\uffbd\001\002\000\164\006\026\007" +
    "\uffff\011\025\016\023\020\017\021\015\022\013\023\012" +
    "\024\010\025\006\026\004\030\074\031\072\032\071\033" +
    "\067\034\064\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\044\042\045\041\046\040\050\037\051" +
    "\036\052\035\053\034\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\011\064\007\065\005\066\077\067" +
    "\076\070\075\071\073\072\070\073\066\074\065\075\063" +
    "\076\061\077\055\100\050\102\047\103\044\104\043\105" +
    "\033\106\032\107\102\110\027\001\002\000\004\007\331" +
    "\001\002\000\026\002\uffd2\004\uffd2\007\uffd2\012\uffd2\014" +
    "\uffd2\015\uffd2\027\uffd2\047\uffd2\054\uffd2\101\uffd2\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\007\334\001\002\000\026\002\uffd1\004\uffd1\007\uffd1" +
    "\012\uffd1\014\uffd1\015\uffd1\027\uffd1\047\uffd1\054\uffd1\101" +
    "\uffd1\001\002\000\030\006\175\011\025\016\023\026\004" +
    "\035\062\036\060\037\056\040\053\041\052\042\046\043" +
    "\045\001\002\000\176\006\uffa6\007\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\001" +
    "\002\000\004\002\001\001\002\000\004\007\342\001\002" +
    "\000\006\007\212\026\103\001\002\000\026\002\uffbe\004" +
    "\uffbe\007\uffbe\012\uffbe\014\uffbe\015\uffbe\027\uffbe\047\uffbe" +
    "\054\uffbe\101\uffbe\001\002\000\004\012\344\001\002\000" +
    "\176\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\103\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002\000\162\006" +
    "\026\011\025\016\023\020\017\021\015\022\013\023\012" +
    "\024\010\025\006\026\004\030\074\031\072\032\071\033" +
    "\067\034\064\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\044\042\045\041\046\040\050\037\051" +
    "\036\052\035\053\034\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\011\064\007\065\005\066\077\067" +
    "\076\070\075\071\073\072\070\073\066\074\065\075\063" +
    "\076\061\077\055\100\050\102\047\103\044\104\043\105" +
    "\033\106\032\107\102\110\027\001\002\000\004\014\347" +
    "\001\002\000\162\006\026\011\025\016\023\020\017\021" +
    "\015\022\013\023\012\024\010\025\006\026\004\030\074" +
    "\031\072\032\071\033\067\034\064\035\062\036\060\037" +
    "\056\040\053\041\052\042\046\043\045\044\042\045\041" +
    "\046\040\050\037\051\036\052\035\053\034\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\011\064\007" +
    "\065\005\066\077\067\076\070\075\071\073\072\070\073" +
    "\066\074\065\075\063\076\061\077\055\100\050\102\047" +
    "\103\044\104\043\105\033\106\032\107\102\110\027\001" +
    "\002\000\004\007\351\001\002\000\026\002\uffce\004\uffce" +
    "\007\uffce\012\uffce\014\uffce\015\uffce\027\uffce\047\uffce\054" +
    "\uffce\101\uffce\001\002\000\004\014\355\001\002\000\004" +
    "\017\354\001\002\000\200\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\001\002\000\030\006\175\011\025\016\023\026" +
    "\004\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\001\002\000\004\017\357\001\002\000\200\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\001\002\000\162\006" +
    "\026\011\025\016\023\020\017\021\015\022\013\023\012" +
    "\024\010\025\006\026\004\030\074\031\072\032\071\033" +
    "\067\034\064\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\044\042\045\041\046\040\050\037\051" +
    "\036\052\035\053\034\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\011\064\007\065\005\066\077\067" +
    "\076\070\075\071\073\072\070\073\066\074\065\075\063" +
    "\076\061\077\055\100\050\102\047\103\044\104\043\105" +
    "\033\106\032\107\102\110\027\001\002\000\004\007\362" +
    "\001\002\000\026\002\uffe1\004\uffe1\007\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\027\uffe1\047\uffe1\054\uffe1\101\uffe1\001\002" +
    "\000\004\101\364\001\002\000\162\006\026\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\054\366\001\002\000\162" +
    "\006\026\011\025\016\023\020\017\021\015\022\013\023" +
    "\012\024\010\025\006\026\004\030\074\031\072\032\071" +
    "\033\067\034\064\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\044\042\045\041\046\040\050\037" +
    "\051\036\052\035\053\034\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\011\064\007\065\005\066\077" +
    "\067\076\070\075\071\073\072\070\073\066\074\065\075" +
    "\063\076\061\077\055\100\050\102\047\103\044\104\043" +
    "\105\033\106\032\107\102\110\027\001\002\000\026\002" +
    "\uffeb\004\uffeb\007\uffeb\012\uffeb\014\uffeb\015\uffeb\027\uffeb" +
    "\047\uffeb\054\uffeb\101\uffeb\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\014\372\001\002" +
    "\000\004\006\315\001\002\000\004\007\374\001\002\000" +
    "\026\002\uffe8\004\uffe8\007\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\027\uffe8\047\uffe8\054\uffe8\101\uffe8\001\002\000\162\006" +
    "\026\011\025\016\023\020\017\021\015\022\013\023\012" +
    "\024\010\025\006\026\004\030\074\031\072\032\071\033" +
    "\067\034\064\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\044\042\045\041\046\040\050\037\051" +
    "\036\052\035\053\034\055\024\056\022\057\021\060\020" +
    "\061\016\062\014\063\011\064\007\065\005\066\077\067" +
    "\076\070\075\071\073\072\070\073\066\074\065\075\063" +
    "\076\061\077\055\100\050\102\047\103\044\104\043\105" +
    "\033\106\032\107\102\110\027\001\002\000\004\007\377" +
    "\001\002\000\026\002\uffd0\004\uffd0\007\uffd0\012\uffd0\014" +
    "\uffd0\015\uffd0\027\uffd0\047\uffd0\054\uffd0\101\uffd0\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\014\u0102\001\002\000\162\006\026\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\u0104\001\002\000\026\002" +
    "\uffe7\004\uffe7\007\uffe7\012\uffe7\014\uffe7\015\uffe7\027\uffe7" +
    "\047\uffe7\054\uffe7\101\uffe7\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\014\u0107\001\002" +
    "\000\162\006\026\011\025\016\023\020\017\021\015\022" +
    "\013\023\012\024\010\025\006\026\004\030\074\031\072" +
    "\032\071\033\067\034\064\035\062\036\060\037\056\040" +
    "\053\041\052\042\046\043\045\044\042\045\041\046\040" +
    "\050\037\051\036\052\035\053\034\055\024\056\022\057" +
    "\021\060\020\061\016\062\014\063\011\064\007\065\005" +
    "\066\077\067\076\070\075\071\073\072\070\073\066\074" +
    "\065\075\063\076\061\077\055\100\050\102\047\103\044" +
    "\104\043\105\033\106\032\107\102\110\027\001\002\000" +
    "\004\007\u0109\001\002\000\026\002\uffcc\004\uffcc\007\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\027\uffcc\047\uffcc\054\uffcc\101" +
    "\uffcc\001\002\000\162\006\026\011\025\016\023\020\017" +
    "\021\015\022\013\023\012\024\010\025\006\026\004\030" +
    "\074\031\072\032\071\033\067\034\064\035\062\036\060" +
    "\037\056\040\053\041\052\042\046\043\045\044\042\045" +
    "\041\046\040\050\037\051\036\052\035\053\034\055\024" +
    "\056\022\057\021\060\020\061\016\062\014\063\011\064" +
    "\007\065\005\066\077\067\076\070\075\071\073\072\070" +
    "\073\066\074\065\075\063\076\061\077\055\100\050\102" +
    "\047\103\044\104\043\105\033\106\032\107\102\110\027" +
    "\001\002\000\004\014\u010c\001\002\000\162\006\026\011" +
    "\025\016\023\020\017\021\015\022\013\023\012\024\010" +
    "\025\006\026\004\030\074\031\072\032\071\033\067\034" +
    "\064\035\062\036\060\037\056\040\053\041\052\042\046" +
    "\043\045\044\042\045\041\046\040\050\037\051\036\052" +
    "\035\053\034\055\024\056\022\057\021\060\020\061\016" +
    "\062\014\063\011\064\007\065\005\066\077\067\076\070" +
    "\075\071\073\072\070\073\066\074\065\075\063\076\061" +
    "\077\055\100\050\102\047\103\044\104\043\105\033\106" +
    "\032\107\102\110\027\001\002\000\004\007\u010e\001\002" +
    "\000\026\002\uffe6\004\uffe6\007\uffe6\012\uffe6\014\uffe6\015" +
    "\uffe6\027\uffe6\047\uffe6\054\uffe6\101\uffe6\001\002\000\162" +
    "\006\026\011\025\016\023\020\017\021\015\022\013\023" +
    "\012\024\010\025\006\026\004\030\074\031\072\032\071" +
    "\033\067\034\064\035\062\036\060\037\056\040\053\041" +
    "\052\042\046\043\045\044\042\045\041\046\040\050\037" +
    "\051\036\052\035\053\034\055\024\056\022\057\021\060" +
    "\020\061\016\062\014\063\011\064\007\065\005\066\077" +
    "\067\076\070\075\071\073\072\070\073\066\074\065\075" +
    "\063\076\061\077\055\100\050\102\047\103\044\104\043" +
    "\105\033\106\032\107\102\110\027\001\002\000\004\007" +
    "\u0111\001\002\000\026\002\uffe5\004\uffe5\007\uffe5\012\uffe5" +
    "\014\uffe5\015\uffe5\027\uffe5\047\uffe5\054\uffe5\101\uffe5\001" +
    "\002\000\162\006\026\011\025\016\023\020\017\021\015" +
    "\022\013\023\012\024\010\025\006\026\004\030\074\031" +
    "\072\032\071\033\067\034\064\035\062\036\060\037\056" +
    "\040\053\041\052\042\046\043\045\044\042\045\041\046" +
    "\040\050\037\051\036\052\035\053\034\055\024\056\022" +
    "\057\021\060\020\061\016\062\014\063\011\064\007\065" +
    "\005\066\077\067\076\070\075\071\073\072\070\073\066" +
    "\074\065\075\063\076\061\077\055\100\050\102\047\103" +
    "\044\104\043\105\033\106\032\107\102\110\027\001\002" +
    "\000\004\014\u0114\001\002\000\162\006\026\011\025\016" +
    "\023\020\017\021\015\022\013\023\012\024\010\025\006" +
    "\026\004\030\074\031\072\032\071\033\067\034\064\035" +
    "\062\036\060\037\056\040\053\041\052\042\046\043\045" +
    "\044\042\045\041\046\040\050\037\051\036\052\035\053" +
    "\034\055\024\056\022\057\021\060\020\061\016\062\014" +
    "\063\011\064\007\065\005\066\077\067\076\070\075\071" +
    "\073\072\070\073\066\074\065\075\063\076\061\077\055" +
    "\100\050\102\047\103\044\104\043\105\033\106\032\107" +
    "\102\110\027\001\002\000\004\007\u0116\001\002\000\026" +
    "\002\uffcd\004\uffcd\007\uffcd\012\uffcd\014\uffcd\015\uffcd\027" +
    "\uffcd\047\uffcd\054\uffcd\101\uffcd\001\002\000\162\006\026" +
    "\011\025\016\023\020\017\021\015\022\013\023\012\024" +
    "\010\025\006\026\004\030\074\031\072\032\071\033\067" +
    "\034\064\035\062\036\060\037\056\040\053\041\052\042" +
    "\046\043\045\044\042\045\041\046\040\050\037\051\036" +
    "\052\035\053\034\055\024\056\022\057\021\060\020\061" +
    "\016\062\014\063\011\064\007\065\005\066\077\067\076" +
    "\070\075\071\073\072\070\073\066\074\065\075\063\076" +
    "\061\077\055\100\050\102\047\103\044\104\043\105\033" +
    "\106\032\107\102\110\027\001\002\000\004\007\u0119\001" +
    "\002\000\026\002\uffe4\004\uffe4\007\uffe4\012\uffe4\014\uffe4" +
    "\015\uffe4\027\uffe4\047\uffe4\054\uffe4\101\uffe4\001\002\000" +
    "\006\007\uffc5\110\227\001\002\000\004\007\u011c\001\002" +
    "\000\004\010\u011d\001\002\000\030\006\175\011\025\016" +
    "\023\026\004\035\062\036\060\037\056\040\053\041\052" +
    "\042\046\043\045\001\002\000\004\011\u011f\001\002\000" +
    "\162\006\026\011\025\016\023\020\017\021\015\022\013" +
    "\023\012\024\010\025\006\026\004\030\074\031\072\032" +
    "\071\033\067\034\064\035\062\036\060\037\056\040\053" +
    "\041\052\042\046\043\045\044\042\045\041\046\040\050" +
    "\037\051\036\052\035\053\034\055\024\056\022\057\021" +
    "\060\020\061\016\062\014\063\011\064\007\065\005\066" +
    "\077\067\076\070\075\071\073\072\070\073\066\074\065" +
    "\075\063\076\061\077\055\100\050\102\047\103\044\104" +
    "\043\105\033\106\032\107\102\110\027\001\002\000\004" +
    "\012\u0121\001\002\000\026\002\uffea\004\uffea\007\uffea\012" +
    "\uffea\014\uffea\015\uffea\027\uffea\047\uffea\054\uffea\101\uffea" +
    "\001\002\000\162\006\026\011\025\016\023\020\017\021" +
    "\015\022\013\023\012\024\010\025\006\026\004\030\074" +
    "\031\072\032\071\033\067\034\064\035\062\036\060\037" +
    "\056\040\053\041\052\042\046\043\045\044\042\045\041" +
    "\046\040\050\037\051\036\052\035\053\034\055\024\056" +
    "\022\057\021\060\020\061\016\062\014\063\011\064\007" +
    "\065\005\066\077\067\076\070\075\071\073\072\070\073" +
    "\066\074\065\075\063\076\061\077\055\100\050\102\047" +
    "\103\044\104\043\105\033\106\032\107\102\110\027\001" +
    "\002\000\004\007\u0124\001\002\000\026\002\uffe3\004\uffe3" +
    "\007\uffe3\012\uffe3\014\uffe3\015\uffe3\027\uffe3\047\uffe3\054" +
    "\uffe3\101\uffe3\001\002\000\162\006\026\011\025\016\023" +
    "\020\017\021\015\022\013\023\012\024\010\025\006\026" +
    "\004\030\074\031\072\032\071\033\067\034\064\035\062" +
    "\036\060\037\056\040\053\041\052\042\046\043\045\044" +
    "\042\045\041\046\040\050\037\051\036\052\035\053\034" +
    "\055\024\056\022\057\021\060\020\061\016\062\014\063" +
    "\011\064\007\065\005\066\077\067\076\070\075\071\073" +
    "\072\070\073\066\074\065\075\063\076\061\077\055\100" +
    "\050\102\047\103\044\104\043\105\033\106\032\107\102" +
    "\110\027\001\002\000\004\007\u0127\001\002\000\026\002" +
    "\uffe0\004\uffe0\007\uffe0\012\uffe0\014\uffe0\015\uffe0\027\uffe0" +
    "\047\uffe0\054\uffe0\101\uffe0\001\002\000\004\027\u0129\001" +
    "\002\000\200\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\102\uffab" +
    "\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\020\002\027\003\050\004\053\005\100\010" +
    "\056\017\030\020\077\001\001\000\006\017\030\020\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\362\005\100" +
    "\010\056\017\030\020\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\030\020\351\001\001\000\002" +
    "\001\001\000\006\017\030\020\342\001\001\000\014\004" +
    "\337\005\100\010\056\017\030\020\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\236\005\100\010\056\017\030\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\103\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\106\004\053\005\100\010\056\017\030\020\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\111" +
    "\004\053\005\100\010\056\017\030\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\114\004\053" +
    "\005\100\010\056\017\030\020\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\117\005\100\010\056" +
    "\017\030\020\077\001\001\000\002\001\001\000\014\004" +
    "\121\005\100\010\056\017\030\020\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\124\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\014" +
    "\004\126\005\100\010\056\017\030\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\131\004\053" +
    "\005\100\010\056\017\030\020\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\134\005\100\010\056" +
    "\017\030\020\077\001\001\000\002\001\001\000\014\004" +
    "\136\005\100\010\056\017\030\020\077\001\001\000\002" +
    "\001\001\000\014\004\140\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\143\005\100\010\056\017\030\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\146\005\100" +
    "\010\056\017\030\020\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\151\005\100\010\056\017\030" +
    "\020\077\001\001\000\002\001\001\000\014\004\153\005" +
    "\100\010\056\017\030\020\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\162\005\100" +
    "\010\056\017\030\020\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\165\005\100\010\056\017\030" +
    "\020\077\001\001\000\002\001\001\000\014\004\167\005" +
    "\100\010\056\017\030\020\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\030\020" +
    "\173\001\001\000\014\004\212\005\100\010\056\017\030" +
    "\020\077\001\001\000\006\017\030\020\210\001\001\000" +
    "\022\004\201\005\100\010\056\014\200\015\202\016\176" +
    "\017\030\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\204\004\053\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\201\005\100\010\056\015\207\016\176\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\216\005\100\010\056\017\030\020\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\223\004\053\005\100\010\056\017\030\020\077\001\001" +
    "\000\016\003\222\004\053\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\230\013\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\233\013\227\001\001\000\002\001\001\000" +
    "\006\017\030\020\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\241\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\244\004\053\005\100\010\056\017" +
    "\030\020\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\247\005\100\010\056\017\030\020\077\001" +
    "\001\000\002\001\001\000\014\004\251\005\100\010\056" +
    "\017\030\020\077\001\001\000\002\001\001\000\014\004" +
    "\253\005\100\010\056\017\030\020\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\256\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\014" +
    "\004\260\005\100\010\056\017\030\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\264\004\053\005\100\010\056\017\030\020\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\270\013\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\274\017\030\020\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\277\005\100\010\056\017\030\020\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\303\005\100\010\056\017\030\020\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\030\020\307\001\001\000\002\001\001\000\006" +
    "\017\030\020\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\315\012\316\001\001\000\014\004\322" +
    "\005\100\010\056\017\030\020\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\315" +
    "\012\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\324\005\100\010\056\017\030\020\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\327\004" +
    "\053\005\100\010\056\017\030\020\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\332\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\030\020\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\345\005\100\010\056\017\030\020\077\001\001" +
    "\000\002\001\001\000\014\004\347\005\100\010\056\017" +
    "\030\020\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\030\020\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\360\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\364\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\014\004\366\005\100" +
    "\010\056\017\030\020\077\001\001\000\002\001\001\000" +
    "\014\004\370\005\100\010\056\017\030\020\077\001\001" +
    "\000\002\001\001\000\004\011\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\375\005\100\010\056" +
    "\017\030\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u0100\005\100\010\056\017\030\020\077" +
    "\001\001\000\002\001\001\000\014\004\u0102\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\u0105\005\100\010\056\017\030\020" +
    "\077\001\001\000\002\001\001\000\014\004\u0107\005\100" +
    "\010\056\017\030\020\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\u010a\005\100\010\056\017\030" +
    "\020\077\001\001\000\002\001\001\000\014\004\u010c\005" +
    "\100\010\056\017\030\020\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\u010f\005\100\010\056\017" +
    "\030\020\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\u0112\005\100\010\056\017\030\020\077\001" +
    "\001\000\002\001\001\000\014\004\u0114\005\100\010\056" +
    "\017\030\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u0117\005\100\010\056\017\030\020\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u011a\013\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\u011d\017\030\020\273\001\001\000\002\001" +
    "\001\000\014\004\u011f\005\100\010\056\017\030\020\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\u0122\005\100\010\056\017\030\020\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u0125\005\100\010" +
    "\056\017\030\020\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_8 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_58 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_58 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_34 _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_4 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.FuncCall(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_36 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_36 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_7 _SYMB_28 _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_11 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DefineWithExc(p_2,p_4,p_7,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_60 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr1 _SYMB_9 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= Expr1 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_44 Expr _SYMB_61 Expr _SYMB_40 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_48 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_37 _IDENT_ _SYMB_10 Type _SYMB_8 Type _SYMB_11 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_12 _SYMB_2 Expr _SYMB_8 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_13 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_15 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictKeys(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_16 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictValues(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= _SYMB_17 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= Type _SYMB_18 Expr _SYMB_19 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_43 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_49 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_32 _SYMB_2 Expr _SYMB_8 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayAdd(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_57 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_21 _SYMB_2 Expr _SYMB_8 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_22 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_64 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleConstructor(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_23 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_24 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_55 _SYMB_28 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= _SYMB_63 Expr _SYMB_35 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= _SYMB_53 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= _SYMB_50 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= _SYMB_51 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= _SYMB_38 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= _SYMB_39 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ToDouble(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= _SYMB_45 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ToInt(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= _SYMB_59 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ToString(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= _SYMB_41 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= _SYMB_47 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= _SYMB_46 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= _SYMB_33 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= _SYMB_52 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= _SYMB_56 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= _SYMB_54 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.PrintLine(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bool ::= _SYMB_62 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bool ::= _SYMB_42 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr1 ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Pair ::= _SYMB_2 Expr _SYMB_9 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListPair ::= Pair _SYMB_8 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListArg ::= Arg _SYMB_8 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type1 ::= _SYMB_25 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.AutoType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Type1 ::= _SYMB_28 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.ExceptionType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type1 ::= _SYMB_31 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.TupleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type1 ::= _SYMB_26 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type1 ::= _SYMB_29 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Type1 ::= _SYMB_27 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Type1 ::= _SYMB_30 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Type1 ::= _SYMB_18 Type _SYMB_19 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type1 ::= _SYMB_10 _IDENT_ _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type1 ::= _SYMB_10 Type _SYMB_8 Type _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
