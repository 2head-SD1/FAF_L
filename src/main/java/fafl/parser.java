
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\007\000\002\004\014\000\002\004\016\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\003\000" +
    "\002\004\010\000\002\004\013\000\002\004\014\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\011" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\012\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\007\000\002\004" +
    "\010\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\003\000\002\006\002\000\002\006\003" +
    "\000\002\006\005\000\002\006\002\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\010\005\000\002" +
    "\011\007\000\002\012\002\000\002\012\003\000\002\012" +
    "\005\000\002\013\005\000\002\014\003\000\002\015\002" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\007\000\002\017\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\154\002\uffff\006\027\011\026\016\022\020" +
    "\020\021\015\022\013\023\011\024\007\025\006\026\004" +
    "\030\071\031\067\032\064\033\063\034\061\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\044\042" +
    "\045\041\047\040\050\037\051\036\052\035\054\025\055" +
    "\024\056\023\057\021\060\017\061\016\062\014\063\012" +
    "\064\010\065\005\066\073\067\072\070\070\071\066\072" +
    "\065\073\062\074\060\076\055\077\053\100\045\101\034" +
    "\102\033\103\076\104\030\001\002\000\030\006\151\011" +
    "\026\016\022\026\004\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\001\002\000\004\006\u010d\001" +
    "\002\000\004\006\u010a\001\002\000\004\006\u0107\001\002" +
    "\000\004\006\u0104\001\002\000\004\006\u0101\001\002\000" +
    "\004\006\376\001\002\000\004\006\371\001\002\000\004" +
    "\006\361\001\002\000\004\006\354\001\002\000\004\006" +
    "\347\001\002\000\004\006\342\001\002\000\004\006\335" +
    "\001\002\000\152\006\027\011\026\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\032\006\151\011\026\016" +
    "\022\026\004\035\057\036\056\037\052\040\050\041\047" +
    "\042\044\043\043\104\323\001\002\000\004\006\317\001" +
    "\002\000\026\002\uffca\004\uffca\007\uffca\012\uffca\014\uffca" +
    "\015\uffca\027\uffca\046\uffca\053\uffca\075\uffca\001\002\000" +
    "\004\006\312\001\002\000\030\006\151\011\026\016\022" +
    "\026\004\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\001\002\000\152\006\027\011\026\016\022" +
    "\020\020\021\015\022\013\023\011\024\007\025\006\026" +
    "\004\030\071\031\067\032\064\033\063\034\061\035\057" +
    "\036\056\037\052\040\050\041\047\042\044\043\043\044" +
    "\042\045\041\047\040\050\037\051\036\052\035\054\025" +
    "\055\024\056\023\057\021\060\017\061\016\062\014\063" +
    "\012\064\010\065\005\066\073\067\072\070\070\071\066" +
    "\072\065\073\062\074\060\076\055\077\053\100\045\101" +
    "\034\102\033\103\076\104\030\001\002\000\030\002\ufff3" +
    "\004\ufff3\006\160\007\ufff3\012\ufff3\014\ufff3\015\ufff3\027" +
    "\ufff3\046\ufff3\053\ufff3\075\ufff3\001\002\000\004\002\304" +
    "\001\002\000\170\006\uffa9\007\uffa9\010\302\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\104\uffa9\001\002\000\026\002\ufff7\004\ufff7" +
    "\007\ufff7\012\ufff7\014\ufff7\015\ufff7\027\ufff7\046\ufff7\053" +
    "\ufff7\075\ufff7\001\002\000\026\002\ufff4\004\ufff4\007\ufff4" +
    "\012\ufff4\014\ufff4\015\ufff4\027\ufff4\046\ufff4\053\ufff4\075" +
    "\ufff4\001\002\000\004\006\277\001\002\000\004\006\274" +
    "\001\002\000\004\104\253\001\002\000\004\104\234\001" +
    "\002\000\004\104\230\001\002\000\004\006\223\001\002" +
    "\000\170\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\001\002\000\170\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\074\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\001\002\000\004\006" +
    "\220\001\002\000\004\002\000\001\002\000\170\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\001" +
    "\002\000\170\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\001\002\000\014\002\ufffe\004\214\007" +
    "\ufffe\012\ufffe\014\215\001\002\000\170\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\076\uffb1\077\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\001\002\000" +
    "\152\006\027\011\026\016\022\020\020\021\015\022\013" +
    "\023\011\024\007\025\006\026\004\030\071\031\067\032" +
    "\064\033\063\034\061\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\044\042\045\041\047\040\050" +
    "\037\051\036\052\035\054\025\055\024\056\023\057\021" +
    "\060\017\061\016\062\014\063\012\064\010\065\005\066" +
    "\073\067\072\070\070\071\066\072\065\073\062\074\060" +
    "\076\055\077\053\100\045\101\034\102\033\103\076\104" +
    "\030\001\002\000\026\002\uffec\004\uffec\007\uffec\012\uffec" +
    "\014\uffec\015\205\027\uffec\046\uffec\053\uffec\075\uffec\001" +
    "\002\000\026\002\uffcb\004\uffcb\007\uffcb\012\uffcb\014\uffcb" +
    "\015\uffcb\027\uffcb\046\uffcb\053\uffcb\075\uffcb\001\002\000" +
    "\170\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3" +
    "\104\uffb3\001\002\000\170\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\076\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\001\002\000\004\104\173" +
    "\001\002\000\004\006\170\001\002\000\004\104\146\001" +
    "\002\000\004\006\141\001\002\000\004\006\136\001\002" +
    "\000\026\002\uffcd\004\uffcd\007\uffcd\012\uffcd\014\uffcd\015" +
    "\uffcd\027\uffcd\046\uffcd\053\uffcd\075\uffcd\001\002\000\004" +
    "\040\132\001\002\000\004\006\123\001\002\000\004\101" +
    "\122\001\002\000\004\006\115\001\002\000\004\006\112" +
    "\001\002\000\004\006\105\001\002\000\004\026\077\001" +
    "\002\000\026\002\ufff5\004\ufff5\007\ufff5\012\ufff5\014\ufff5" +
    "\015\ufff5\027\ufff5\046\ufff5\053\ufff5\075\ufff5\001\002\000" +
    "\026\002\ufff6\004\ufff6\007\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\027\ufff6\046\ufff6\053\ufff6\075\ufff6\001\002\000\152\006" +
    "\027\011\026\016\022\020\020\021\015\022\013\023\011" +
    "\024\007\025\006\026\004\030\071\031\067\032\064\033" +
    "\063\034\061\035\057\036\056\037\052\040\050\041\047" +
    "\042\044\043\043\044\042\045\041\047\040\050\037\051" +
    "\036\052\035\054\025\055\024\056\023\057\021\060\017" +
    "\061\016\062\014\063\012\064\010\065\005\066\073\067" +
    "\072\070\070\071\066\072\065\073\062\074\060\076\055" +
    "\077\053\100\045\101\034\102\033\103\076\104\030\001" +
    "\002\000\004\027\101\001\002\000\004\011\102\001\002" +
    "\000\154\006\027\011\026\012\uffff\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\004\012\104\001\002\000" +
    "\026\002\uffe2\004\uffe2\007\uffe2\012\uffe2\014\uffe2\015\uffe2" +
    "\027\uffe2\046\uffe2\053\uffe2\075\uffe2\001\002\000\152\006" +
    "\027\011\026\016\022\020\020\021\015\022\013\023\011" +
    "\024\007\025\006\026\004\030\071\031\067\032\064\033" +
    "\063\034\061\035\057\036\056\037\052\040\050\041\047" +
    "\042\044\043\043\044\042\045\041\047\040\050\037\051" +
    "\036\052\035\054\025\055\024\056\023\057\021\060\017" +
    "\061\016\062\014\063\012\064\010\065\005\066\073\067" +
    "\072\070\070\071\066\072\065\073\062\074\060\076\055" +
    "\077\053\100\045\101\034\102\033\103\076\104\030\001" +
    "\002\000\004\014\107\001\002\000\152\006\027\011\026" +
    "\016\022\020\020\021\015\022\013\023\011\024\007\025" +
    "\006\026\004\030\071\031\067\032\064\033\063\034\061" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\044\042\045\041\047\040\050\037\051\036\052\035" +
    "\054\025\055\024\056\023\057\021\060\017\061\016\062" +
    "\014\063\012\064\010\065\005\066\073\067\072\070\070" +
    "\071\066\072\065\073\062\074\060\076\055\077\053\100" +
    "\045\101\034\102\033\103\076\104\030\001\002\000\004" +
    "\007\111\001\002\000\026\002\uffce\004\uffce\007\uffce\012" +
    "\uffce\014\uffce\015\uffce\027\uffce\046\uffce\053\uffce\075\uffce" +
    "\001\002\000\154\006\027\007\uffff\011\026\016\022\020" +
    "\020\021\015\022\013\023\011\024\007\025\006\026\004" +
    "\030\071\031\067\032\064\033\063\034\061\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\044\042" +
    "\045\041\047\040\050\037\051\036\052\035\054\025\055" +
    "\024\056\023\057\021\060\017\061\016\062\014\063\012" +
    "\064\010\065\005\066\073\067\072\070\070\071\066\072" +
    "\065\073\062\074\060\076\055\077\053\100\045\101\034" +
    "\102\033\103\076\104\030\001\002\000\004\007\114\001" +
    "\002\000\026\002\uffd7\004\uffd7\007\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\027\uffd7\046\uffd7\053\uffd7\075\uffd7\001\002\000" +
    "\152\006\027\011\026\016\022\020\020\021\015\022\013" +
    "\023\011\024\007\025\006\026\004\030\071\031\067\032" +
    "\064\033\063\034\061\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\044\042\045\041\047\040\050" +
    "\037\051\036\052\035\054\025\055\024\056\023\057\021" +
    "\060\017\061\016\062\014\063\012\064\010\065\005\066" +
    "\073\067\072\070\070\071\066\072\065\073\062\074\060" +
    "\076\055\077\053\100\045\101\034\102\033\103\076\104" +
    "\030\001\002\000\004\014\117\001\002\000\152\006\027" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\007\121\001\002\000\026\002\uffdf\004\uffdf\007" +
    "\uffdf\012\uffdf\014\uffdf\015\uffdf\027\uffdf\046\uffdf\053\uffdf" +
    "\075\uffdf\001\002\000\026\002\uffcc\004\uffcc\007\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\027\uffcc\046\uffcc\053\uffcc\075\uffcc" +
    "\001\002\000\152\006\027\011\026\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\004\014\125\001\002\000" +
    "\152\006\027\011\026\016\022\020\020\021\015\022\013" +
    "\023\011\024\007\025\006\026\004\030\071\031\067\032" +
    "\064\033\063\034\061\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\044\042\045\041\047\040\050" +
    "\037\051\036\052\035\054\025\055\024\056\023\057\021" +
    "\060\017\061\016\062\014\063\012\064\010\065\005\066" +
    "\073\067\072\070\070\071\066\072\065\073\062\074\060" +
    "\076\055\077\053\100\045\101\034\102\033\103\076\104" +
    "\030\001\002\000\004\014\127\001\002\000\152\006\027" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\007\131\001\002\000\026\002\uffde\004\uffde\007" +
    "\uffde\012\uffde\014\uffde\015\uffde\027\uffde\046\uffde\053\uffde" +
    "\075\uffde\001\002\000\004\006\133\001\002\000\004\101" +
    "\134\001\002\000\004\007\135\001\002\000\026\002\uffd9" +
    "\004\uffd9\007\uffd9\012\uffd9\014\uffd9\015\uffd9\027\uffd9\046" +
    "\uffd9\053\uffd9\075\uffd9\001\002\000\152\006\027\011\026" +
    "\016\022\020\020\021\015\022\013\023\011\024\007\025" +
    "\006\026\004\030\071\031\067\032\064\033\063\034\061" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\044\042\045\041\047\040\050\037\051\036\052\035" +
    "\054\025\055\024\056\023\057\021\060\017\061\016\062" +
    "\014\063\012\064\010\065\005\066\073\067\072\070\070" +
    "\071\066\072\065\073\062\074\060\076\055\077\053\100" +
    "\045\101\034\102\033\103\076\104\030\001\002\000\004" +
    "\007\140\001\002\000\026\002\uffdd\004\uffdd\007\uffdd\012" +
    "\uffdd\014\uffdd\015\uffdd\027\uffdd\046\uffdd\053\uffdd\075\uffdd" +
    "\001\002\000\152\006\027\011\026\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\004\014\143\001\002\000" +
    "\152\006\027\011\026\016\022\020\020\021\015\022\013" +
    "\023\011\024\007\025\006\026\004\030\071\031\067\032" +
    "\064\033\063\034\061\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\044\042\045\041\047\040\050" +
    "\037\051\036\052\035\054\025\055\024\056\023\057\021" +
    "\060\017\061\016\062\014\063\012\064\010\065\005\066" +
    "\073\067\072\070\070\071\066\072\065\073\062\074\060" +
    "\076\055\077\053\100\045\101\034\102\033\103\076\104" +
    "\030\001\002\000\004\007\145\001\002\000\026\002\uffdb" +
    "\004\uffdb\007\uffdb\012\uffdb\014\uffdb\015\uffdb\027\uffdb\046" +
    "\uffdb\053\uffdb\075\uffdb\001\002\000\004\005\147\001\002" +
    "\000\032\006\151\011\026\016\022\026\004\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\104\152" +
    "\001\002\000\152\006\027\011\026\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\030\006\151\011\026\016" +
    "\022\026\004\035\057\036\056\037\052\040\050\041\047" +
    "\042\044\043\043\001\002\000\176\002\uffbb\004\uffbb\006" +
    "\027\007\uffbb\011\026\012\uffbb\014\uffbb\015\uffbb\016\022" +
    "\020\020\021\015\022\013\023\011\024\007\025\006\026" +
    "\004\027\uffbb\030\071\031\067\032\064\033\063\034\061" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\044\042\045\041\046\uffbb\047\040\050\037\051\036" +
    "\052\035\053\uffbb\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\075" +
    "\uffbb\076\055\077\053\100\045\101\034\102\033\103\076" +
    "\104\154\001\002\000\026\002\uffba\004\uffba\007\uffba\012" +
    "\uffba\014\163\015\uffba\027\uffba\046\uffba\053\uffba\075\uffba" +
    "\001\002\000\030\002\ufff3\004\ufff3\006\160\007\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\027\ufff3\046\ufff3\053\ufff3\075\ufff3" +
    "\001\002\000\026\002\ufff8\004\ufff8\007\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\027\ufff8\046\ufff8\053\ufff8\075\ufff8\001\002" +
    "\000\026\002\uffb7\004\uffb7\007\uffb7\012\uffb7\014\uffb7\015" +
    "\uffb7\027\uffb7\046\uffb7\053\uffb7\075\uffb7\001\002\000\026" +
    "\002\uffbc\004\uffbc\007\uffbc\012\uffbc\014\uffbc\015\uffbc\027" +
    "\uffbc\046\uffbc\053\uffbc\075\uffbc\001\002\000\154\006\027" +
    "\007\uffff\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\162\001\002\000\026\002\uffee\004" +
    "\uffee\007\uffee\012\uffee\014\uffee\015\uffee\027\uffee\046\uffee" +
    "\053\uffee\075\uffee\001\002\000\176\002\uffbb\004\uffbb\006" +
    "\027\007\uffbb\011\026\012\uffbb\014\uffbb\015\uffbb\016\022" +
    "\020\020\021\015\022\013\023\011\024\007\025\006\026" +
    "\004\027\uffbb\030\071\031\067\032\064\033\063\034\061" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\044\042\045\041\046\uffbb\047\040\050\037\051\036" +
    "\052\035\053\uffbb\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\075" +
    "\uffbb\076\055\077\053\100\045\101\034\102\033\103\076" +
    "\104\154\001\002\000\026\002\uffb9\004\uffb9\007\uffb9\012" +
    "\uffb9\014\uffb9\015\uffb9\027\uffb9\046\uffb9\053\uffb9\075\uffb9" +
    "\001\002\000\004\007\166\001\002\000\170\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\076\uffac\077" +
    "\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\001\002" +
    "\000\026\002\ufff9\004\ufff9\007\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\027\ufff9\046\ufff9\053\ufff9\075\ufff9\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\172\001\002\000\026\002\uffda\004" +
    "\uffda\007\uffda\012\uffda\014\uffda\015\uffda\027\uffda\046\uffda" +
    "\053\uffda\075\uffda\001\002\000\004\006\174\001\002\000" +
    "\006\007\uffc9\104\175\001\002\000\004\005\203\001\002" +
    "\000\006\007\uffc8\014\201\001\002\000\004\007\200\001" +
    "\002\000\026\002\uffef\004\uffef\007\uffef\012\uffef\014\uffef" +
    "\015\uffef\027\uffef\046\uffef\053\uffef\075\uffef\001\002\000" +
    "\006\007\uffc9\104\175\001\002\000\004\007\uffc7\001\002" +
    "\000\030\006\151\011\026\016\022\026\004\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\001\002" +
    "\000\006\007\uffbd\014\uffbd\001\002\000\004\104\206\001" +
    "\002\000\026\002\uffed\004\uffed\007\uffed\012\uffed\014\uffed" +
    "\015\uffed\027\uffed\046\uffed\053\uffed\075\uffed\001\002\000" +
    "\004\046\210\001\002\000\004\006\211\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\213\001\002\000\026\002\uffd8\004" +
    "\uffd8\007\uffd8\012\uffd8\014\uffd8\015\uffd8\027\uffd8\046\uffd8" +
    "\053\uffd8\075\uffd8\001\002\000\160\002\uffff\006\027\007" +
    "\uffff\011\026\012\uffff\016\022\020\020\021\015\022\013" +
    "\023\011\024\007\025\006\026\004\030\071\031\067\032" +
    "\064\033\063\034\061\035\057\036\056\037\052\040\050" +
    "\041\047\042\044\043\043\044\042\045\041\047\040\050" +
    "\037\051\036\052\035\054\025\055\024\056\023\057\021" +
    "\060\017\061\016\062\014\063\012\064\010\065\005\066" +
    "\073\067\072\070\070\071\066\072\065\073\062\074\060" +
    "\076\055\077\053\100\045\101\034\102\033\103\076\104" +
    "\030\001\002\000\160\002\uffff\006\027\007\uffff\011\026" +
    "\012\uffff\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\010\002\ufffa\007\ufffa\012\ufffa\001\002\000\010\002" +
    "\ufffd\007\ufffd\012\ufffd\001\002\000\154\006\027\007\uffff" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\007\222\001\002\000\026\002\uffdc\004\uffdc\007" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\027\uffdc\046\uffdc\053\uffdc" +
    "\075\uffdc\001\002\000\152\006\027\011\026\016\022\020" +
    "\020\021\015\022\013\023\011\024\007\025\006\026\004" +
    "\030\071\031\067\032\064\033\063\034\061\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\044\042" +
    "\045\041\047\040\050\037\051\036\052\035\054\025\055" +
    "\024\056\023\057\021\060\017\061\016\062\014\063\012" +
    "\064\010\065\005\066\073\067\072\070\070\071\066\072" +
    "\065\073\062\074\060\076\055\077\053\100\045\101\034" +
    "\102\033\103\076\104\030\001\002\000\004\014\225\001" +
    "\002\000\152\006\027\011\026\016\022\020\020\021\015" +
    "\022\013\023\011\024\007\025\006\026\004\030\071\031" +
    "\067\032\064\033\063\034\061\035\057\036\056\037\052" +
    "\040\050\041\047\042\044\043\043\044\042\045\041\047" +
    "\040\050\037\051\036\052\035\054\025\055\024\056\023" +
    "\057\021\060\017\061\016\062\014\063\012\064\010\065" +
    "\005\066\073\067\072\070\070\071\066\072\065\073\062" +
    "\074\060\076\055\077\053\100\045\101\034\102\033\103" +
    "\076\104\030\001\002\000\004\007\227\001\002\000\026" +
    "\002\uffcf\004\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf\027" +
    "\uffcf\046\uffcf\053\uffcf\075\uffcf\001\002\000\004\006\231" +
    "\001\002\000\154\006\027\007\uffff\011\026\016\022\020" +
    "\020\021\015\022\013\023\011\024\007\025\006\026\004" +
    "\030\071\031\067\032\064\033\063\034\061\035\057\036" +
    "\056\037\052\040\050\041\047\042\044\043\043\044\042" +
    "\045\041\047\040\050\037\051\036\052\035\054\025\055" +
    "\024\056\023\057\021\060\017\061\016\062\014\063\012" +
    "\064\010\065\005\066\073\067\072\070\070\071\066\072" +
    "\065\073\062\074\060\076\055\077\053\100\045\101\034" +
    "\102\033\103\076\104\030\001\002\000\004\007\233\001" +
    "\002\000\026\002\ufff2\004\ufff2\007\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\027\ufff2\046\ufff2\053\ufff2\075\ufff2\001\002\000" +
    "\004\006\235\001\002\000\006\007\uffc9\104\175\001\002" +
    "\000\004\007\237\001\002\000\004\010\240\001\002\000" +
    "\030\006\151\011\026\016\022\026\004\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\001\002\000" +
    "\006\011\uffc3\013\uffc3\001\002\000\006\011\244\013\243" +
    "\001\002\000\004\040\247\001\002\000\152\006\027\011" +
    "\026\016\022\020\020\021\015\022\013\023\011\024\007" +
    "\025\006\026\004\030\071\031\067\032\064\033\063\034" +
    "\061\035\057\036\056\037\052\040\050\041\047\042\044" +
    "\043\043\044\042\045\041\047\040\050\037\051\036\052" +
    "\035\054\025\055\024\056\023\057\021\060\017\061\016" +
    "\062\014\063\012\064\010\065\005\066\073\067\072\070" +
    "\070\071\066\072\065\073\062\074\060\076\055\077\053" +
    "\100\045\101\034\102\033\103\076\104\030\001\002\000" +
    "\004\012\246\001\002\000\026\002\ufff1\004\ufff1\007\ufff1" +
    "\012\ufff1\014\ufff1\015\ufff1\027\ufff1\046\ufff1\053\ufff1\075" +
    "\ufff1\001\002\000\004\011\250\001\002\000\152\006\027" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\012\252\001\002\000\026\002\ufff0\004\ufff0\007" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\027\ufff0\046\ufff0\053\ufff0" +
    "\075\ufff0\001\002\000\004\016\254\001\002\000\030\006" +
    "\151\011\026\016\022\026\004\035\057\036\056\037\052" +
    "\040\050\041\047\042\044\043\043\001\002\000\004\014" +
    "\256\001\002\000\030\006\151\011\026\016\022\026\004" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\001\002\000\004\017\260\001\002\000\004\006\261" +
    "\001\002\000\006\006\262\007\uffc0\001\002\000\152\006" +
    "\027\011\026\016\022\020\020\021\015\022\013\023\011" +
    "\024\007\025\006\026\004\030\071\031\067\032\064\033" +
    "\063\034\061\035\057\036\056\037\052\040\050\041\047" +
    "\042\044\043\043\044\042\045\041\047\040\050\037\051" +
    "\036\052\035\054\025\055\024\056\023\057\021\060\017" +
    "\061\016\062\014\063\012\064\010\065\005\066\073\067" +
    "\072\070\070\071\066\072\065\073\062\074\060\076\055" +
    "\077\053\100\045\101\034\102\033\103\076\104\030\001" +
    "\002\000\006\007\uffbf\014\266\001\002\000\004\007\265" +
    "\001\002\000\026\002\uffe9\004\uffe9\007\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\027\uffe9\046\uffe9\053\uffe9\075\uffe9\001\002" +
    "\000\006\006\262\007\uffc0\001\002\000\004\007\uffbe\001" +
    "\002\000\004\015\271\001\002\000\152\006\027\011\026" +
    "\016\022\020\020\021\015\022\013\023\011\024\007\025" +
    "\006\026\004\030\071\031\067\032\064\033\063\034\061" +
    "\035\057\036\056\037\052\040\050\041\047\042\044\043" +
    "\043\044\042\045\041\047\040\050\037\051\036\052\035" +
    "\054\025\055\024\056\023\057\021\060\017\061\016\062" +
    "\014\063\012\064\010\065\005\066\073\067\072\070\070" +
    "\071\066\072\065\073\062\074\060\076\055\077\053\100" +
    "\045\101\034\102\033\103\076\104\030\001\002\000\004" +
    "\007\273\001\002\000\006\007\uffc1\014\uffc1\001\002\000" +
    "\154\006\027\007\uffff\011\026\016\022\020\020\021\015" +
    "\022\013\023\011\024\007\025\006\026\004\030\071\031" +
    "\067\032\064\033\063\034\061\035\057\036\056\037\052" +
    "\040\050\041\047\042\044\043\043\044\042\045\041\047" +
    "\040\050\037\051\036\052\035\054\025\055\024\056\023" +
    "\057\021\060\017\061\016\062\014\063\012\064\010\065" +
    "\005\066\073\067\072\070\070\071\066\072\065\073\062" +
    "\074\060\076\055\077\053\100\045\101\034\102\033\103" +
    "\076\104\030\001\002\000\004\007\276\001\002\000\026" +
    "\002\uffd4\004\uffd4\007\uffd4\012\uffd4\014\uffd4\015\uffd4\027" +
    "\uffd4\046\uffd4\053\uffd4\075\uffd4\001\002\000\152\006\027" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\007\301\001\002\000\026\002\uffd3\004\uffd3\007" +
    "\uffd3\012\uffd3\014\uffd3\015\uffd3\027\uffd3\046\uffd3\053\uffd3" +
    "\075\uffd3\001\002\000\030\006\151\011\026\016\022\026" +
    "\004\035\057\036\056\037\052\040\050\041\047\042\044" +
    "\043\043\001\002\000\166\006\uffaa\007\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102" +
    "\uffaa\103\uffaa\104\uffaa\001\002\000\004\002\001\001\002" +
    "\000\004\007\307\001\002\000\006\007\166\026\077\001" +
    "\002\000\026\002\uffc2\004\uffc2\007\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\027\uffc2\046\uffc2\053\uffc2\075\uffc2\001\002\000" +
    "\004\012\311\001\002\000\166\006\uffab\007\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\001\002\000\152\006\027\011" +
    "\026\016\022\020\020\021\015\022\013\023\011\024\007" +
    "\025\006\026\004\030\071\031\067\032\064\033\063\034" +
    "\061\035\057\036\056\037\052\040\050\041\047\042\044" +
    "\043\043\044\042\045\041\047\040\050\037\051\036\052" +
    "\035\054\025\055\024\056\023\057\021\060\017\061\016" +
    "\062\014\063\012\064\010\065\005\066\073\067\072\070" +
    "\070\071\066\072\065\073\062\074\060\076\055\077\053" +
    "\100\045\101\034\102\033\103\076\104\030\001\002\000" +
    "\004\014\314\001\002\000\152\006\027\011\026\016\022" +
    "\020\020\021\015\022\013\023\011\024\007\025\006\026" +
    "\004\030\071\031\067\032\064\033\063\034\061\035\057" +
    "\036\056\037\052\040\050\041\047\042\044\043\043\044" +
    "\042\045\041\047\040\050\037\051\036\052\035\054\025" +
    "\055\024\056\023\057\021\060\017\061\016\062\014\063" +
    "\012\064\010\065\005\066\073\067\072\070\070\071\066" +
    "\072\065\073\062\074\060\076\055\077\053\100\045\101" +
    "\034\102\033\103\076\104\030\001\002\000\004\007\316" +
    "\001\002\000\026\002\uffd2\004\uffd2\007\uffd2\012\uffd2\014" +
    "\uffd2\015\uffd2\027\uffd2\046\uffd2\053\uffd2\075\uffd2\001\002" +
    "\000\152\006\027\011\026\016\022\020\020\021\015\022" +
    "\013\023\011\024\007\025\006\026\004\030\071\031\067" +
    "\032\064\033\063\034\061\035\057\036\056\037\052\040" +
    "\050\041\047\042\044\043\043\044\042\045\041\047\040" +
    "\050\037\051\036\052\035\054\025\055\024\056\023\057" +
    "\021\060\017\061\016\062\014\063\012\064\010\065\005" +
    "\066\073\067\072\070\070\071\066\072\065\073\062\074" +
    "\060\076\055\077\053\100\045\101\034\102\033\103\076" +
    "\104\030\001\002\000\004\007\321\001\002\000\026\002" +
    "\uffe1\004\uffe1\007\uffe1\012\uffe1\014\uffe1\015\uffe1\027\uffe1" +
    "\046\uffe1\053\uffe1\075\uffe1\001\002\000\004\014\325\001" +
    "\002\000\004\017\324\001\002\000\170\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae\001\002\000" +
    "\030\006\151\011\026\016\022\026\004\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\001\002\000" +
    "\004\017\327\001\002\000\170\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\104\uffad\001\002\000\004\075" +
    "\331\001\002\000\152\006\027\011\026\016\022\020\020" +
    "\021\015\022\013\023\011\024\007\025\006\026\004\030" +
    "\071\031\067\032\064\033\063\034\061\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\044\042\045" +
    "\041\047\040\050\037\051\036\052\035\054\025\055\024" +
    "\056\023\057\021\060\017\061\016\062\014\063\012\064" +
    "\010\065\005\066\073\067\072\070\070\071\066\072\065" +
    "\073\062\074\060\076\055\077\053\100\045\101\034\102" +
    "\033\103\076\104\030\001\002\000\004\053\333\001\002" +
    "\000\152\006\027\011\026\016\022\020\020\021\015\022" +
    "\013\023\011\024\007\025\006\026\004\030\071\031\067" +
    "\032\064\033\063\034\061\035\057\036\056\037\052\040" +
    "\050\041\047\042\044\043\043\044\042\045\041\047\040" +
    "\050\037\051\036\052\035\054\025\055\024\056\023\057" +
    "\021\060\017\061\016\062\014\063\012\064\010\065\005" +
    "\066\073\067\072\070\070\071\066\072\065\073\062\074" +
    "\060\076\055\077\053\100\045\101\034\102\033\103\076" +
    "\104\030\001\002\000\026\002\uffeb\004\uffeb\007\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\027\uffeb\046\uffeb\053\uffeb\075\uffeb" +
    "\001\002\000\152\006\027\011\026\016\022\020\020\021" +
    "\015\022\013\023\011\024\007\025\006\026\004\030\071" +
    "\031\067\032\064\033\063\034\061\035\057\036\056\037" +
    "\052\040\050\041\047\042\044\043\043\044\042\045\041" +
    "\047\040\050\037\051\036\052\035\054\025\055\024\056" +
    "\023\057\021\060\017\061\016\062\014\063\012\064\010" +
    "\065\005\066\073\067\072\070\070\071\066\072\065\073" +
    "\062\074\060\076\055\077\053\100\045\101\034\102\033" +
    "\103\076\104\030\001\002\000\004\014\337\001\002\000" +
    "\004\006\262\001\002\000\004\007\341\001\002\000\026" +
    "\002\uffe8\004\uffe8\007\uffe8\012\uffe8\014\uffe8\015\uffe8\027" +
    "\uffe8\046\uffe8\053\uffe8\075\uffe8\001\002\000\152\006\027" +
    "\011\026\016\022\020\020\021\015\022\013\023\011\024" +
    "\007\025\006\026\004\030\071\031\067\032\064\033\063" +
    "\034\061\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\044\042\045\041\047\040\050\037\051\036" +
    "\052\035\054\025\055\024\056\023\057\021\060\017\061" +
    "\016\062\014\063\012\064\010\065\005\066\073\067\072" +
    "\070\070\071\066\072\065\073\062\074\060\076\055\077" +
    "\053\100\045\101\034\102\033\103\076\104\030\001\002" +
    "\000\004\014\344\001\002\000\152\006\027\011\026\016" +
    "\022\020\020\021\015\022\013\023\011\024\007\025\006" +
    "\026\004\030\071\031\067\032\064\033\063\034\061\035" +
    "\057\036\056\037\052\040\050\041\047\042\044\043\043" +
    "\044\042\045\041\047\040\050\037\051\036\052\035\054" +
    "\025\055\024\056\023\057\021\060\017\061\016\062\014" +
    "\063\012\064\010\065\005\066\073\067\072\070\070\071" +
    "\066\072\065\073\062\074\060\076\055\077\053\100\045" +
    "\101\034\102\033\103\076\104\030\001\002\000\004\007" +
    "\346\001\002\000\026\002\uffd0\004\uffd0\007\uffd0\012\uffd0" +
    "\014\uffd0\015\uffd0\027\uffd0\046\uffd0\053\uffd0\075\uffd0\001" +
    "\002\000\152\006\027\011\026\016\022\020\020\021\015" +
    "\022\013\023\011\024\007\025\006\026\004\030\071\031" +
    "\067\032\064\033\063\034\061\035\057\036\056\037\052" +
    "\040\050\041\047\042\044\043\043\044\042\045\041\047" +
    "\040\050\037\051\036\052\035\054\025\055\024\056\023" +
    "\057\021\060\017\061\016\062\014\063\012\064\010\065" +
    "\005\066\073\067\072\070\070\071\066\072\065\073\062" +
    "\074\060\076\055\077\053\100\045\101\034\102\033\103" +
    "\076\104\030\001\002\000\004\014\351\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\353\001\002\000\026\002\uffd1\004" +
    "\uffd1\007\uffd1\012\uffd1\014\uffd1\015\uffd1\027\uffd1\046\uffd1" +
    "\053\uffd1\075\uffd1\001\002\000\152\006\027\011\026\016" +
    "\022\020\020\021\015\022\013\023\011\024\007\025\006" +
    "\026\004\030\071\031\067\032\064\033\063\034\061\035" +
    "\057\036\056\037\052\040\050\041\047\042\044\043\043" +
    "\044\042\045\041\047\040\050\037\051\036\052\035\054" +
    "\025\055\024\056\023\057\021\060\017\061\016\062\014" +
    "\063\012\064\010\065\005\066\073\067\072\070\070\071" +
    "\066\072\065\073\062\074\060\076\055\077\053\100\045" +
    "\101\034\102\033\103\076\104\030\001\002\000\004\014" +
    "\356\001\002\000\152\006\027\011\026\016\022\020\020" +
    "\021\015\022\013\023\011\024\007\025\006\026\004\030" +
    "\071\031\067\032\064\033\063\034\061\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\044\042\045" +
    "\041\047\040\050\037\051\036\052\035\054\025\055\024" +
    "\056\023\057\021\060\017\061\016\062\014\063\012\064" +
    "\010\065\005\066\073\067\072\070\070\071\066\072\065" +
    "\073\062\074\060\076\055\077\053\100\045\101\034\102" +
    "\033\103\076\104\030\001\002\000\004\007\360\001\002" +
    "\000\026\002\uffe7\004\uffe7\007\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\027\uffe7\046\uffe7\053\uffe7\075\uffe7\001\002\000\006" +
    "\007\uffc9\104\175\001\002\000\004\007\363\001\002\000" +
    "\004\010\364\001\002\000\030\006\151\011\026\016\022" +
    "\026\004\035\057\036\056\037\052\040\050\041\047\042" +
    "\044\043\043\001\002\000\004\011\366\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\012\370\001\002\000\026\002\uffea\004" +
    "\uffea\007\uffea\012\uffea\014\uffea\015\uffea\027\uffea\046\uffea" +
    "\053\uffea\075\uffea\001\002\000\152\006\027\011\026\016" +
    "\022\020\020\021\015\022\013\023\011\024\007\025\006" +
    "\026\004\030\071\031\067\032\064\033\063\034\061\035" +
    "\057\036\056\037\052\040\050\041\047\042\044\043\043" +
    "\044\042\045\041\047\040\050\037\051\036\052\035\054" +
    "\025\055\024\056\023\057\021\060\017\061\016\062\014" +
    "\063\012\064\010\065\005\066\073\067\072\070\070\071" +
    "\066\072\065\073\062\074\060\076\055\077\053\100\045" +
    "\101\034\102\033\103\076\104\030\001\002\000\004\014" +
    "\373\001\002\000\152\006\027\011\026\016\022\020\020" +
    "\021\015\022\013\023\011\024\007\025\006\026\004\030" +
    "\071\031\067\032\064\033\063\034\061\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\044\042\045" +
    "\041\047\040\050\037\051\036\052\035\054\025\055\024" +
    "\056\023\057\021\060\017\061\016\062\014\063\012\064" +
    "\010\065\005\066\073\067\072\070\070\071\066\072\065" +
    "\073\062\074\060\076\055\077\053\100\045\101\034\102" +
    "\033\103\076\104\030\001\002\000\004\007\375\001\002" +
    "\000\026\002\uffe6\004\uffe6\007\uffe6\012\uffe6\014\uffe6\015" +
    "\uffe6\027\uffe6\046\uffe6\053\uffe6\075\uffe6\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\u0100\001\002\000\026\002\uffe0\004" +
    "\uffe0\007\uffe0\012\uffe0\014\uffe0\015\uffe0\027\uffe0\046\uffe0" +
    "\053\uffe0\075\uffe0\001\002\000\152\006\027\011\026\016" +
    "\022\020\020\021\015\022\013\023\011\024\007\025\006" +
    "\026\004\030\071\031\067\032\064\033\063\034\061\035" +
    "\057\036\056\037\052\040\050\041\047\042\044\043\043" +
    "\044\042\045\041\047\040\050\037\051\036\052\035\054" +
    "\025\055\024\056\023\057\021\060\017\061\016\062\014" +
    "\063\012\064\010\065\005\066\073\067\072\070\070\071" +
    "\066\072\065\073\062\074\060\076\055\077\053\100\045" +
    "\101\034\102\033\103\076\104\030\001\002\000\004\007" +
    "\u0103\001\002\000\026\002\uffe5\004\uffe5\007\uffe5\012\uffe5" +
    "\014\uffe5\015\uffe5\027\uffe5\046\uffe5\053\uffe5\075\uffe5\001" +
    "\002\000\154\006\027\007\uffff\011\026\016\022\020\020" +
    "\021\015\022\013\023\011\024\007\025\006\026\004\030" +
    "\071\031\067\032\064\033\063\034\061\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\044\042\045" +
    "\041\047\040\050\037\051\036\052\035\054\025\055\024" +
    "\056\023\057\021\060\017\061\016\062\014\063\012\064" +
    "\010\065\005\066\073\067\072\070\070\071\066\072\065" +
    "\073\062\074\060\076\055\077\053\100\045\101\034\102" +
    "\033\103\076\104\030\001\002\000\004\007\u0106\001\002" +
    "\000\026\002\uffd6\004\uffd6\007\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\027\uffd6\046\uffd6\053\uffd6\075\uffd6\001\002\000\152" +
    "\006\027\011\026\016\022\020\020\021\015\022\013\023" +
    "\011\024\007\025\006\026\004\030\071\031\067\032\064" +
    "\033\063\034\061\035\057\036\056\037\052\040\050\041" +
    "\047\042\044\043\043\044\042\045\041\047\040\050\037" +
    "\051\036\052\035\054\025\055\024\056\023\057\021\060" +
    "\017\061\016\062\014\063\012\064\010\065\005\066\073" +
    "\067\072\070\070\071\066\072\065\073\062\074\060\076" +
    "\055\077\053\100\045\101\034\102\033\103\076\104\030" +
    "\001\002\000\004\007\u0109\001\002\000\026\002\uffe4\004" +
    "\uffe4\007\uffe4\012\uffe4\014\uffe4\015\uffe4\027\uffe4\046\uffe4" +
    "\053\uffe4\075\uffe4\001\002\000\152\006\027\011\026\016" +
    "\022\020\020\021\015\022\013\023\011\024\007\025\006" +
    "\026\004\030\071\031\067\032\064\033\063\034\061\035" +
    "\057\036\056\037\052\040\050\041\047\042\044\043\043" +
    "\044\042\045\041\047\040\050\037\051\036\052\035\054" +
    "\025\055\024\056\023\057\021\060\017\061\016\062\014" +
    "\063\012\064\010\065\005\066\073\067\072\070\070\071" +
    "\066\072\065\073\062\074\060\076\055\077\053\100\045" +
    "\101\034\102\033\103\076\104\030\001\002\000\004\007" +
    "\u010c\001\002\000\026\002\uffe3\004\uffe3\007\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\027\uffe3\046\uffe3\053\uffe3\075\uffe3\001" +
    "\002\000\154\006\027\007\uffff\011\026\016\022\020\020" +
    "\021\015\022\013\023\011\024\007\025\006\026\004\030" +
    "\071\031\067\032\064\033\063\034\061\035\057\036\056" +
    "\037\052\040\050\041\047\042\044\043\043\044\042\045" +
    "\041\047\040\050\037\051\036\052\035\054\025\055\024" +
    "\056\023\057\021\060\017\061\016\062\014\063\012\064" +
    "\010\065\005\066\073\067\072\070\070\071\066\072\065" +
    "\073\062\074\060\076\055\077\053\100\045\101\034\102" +
    "\033\103\076\104\030\001\002\000\004\007\u010f\001\002" +
    "\000\026\002\uffd5\004\uffd5\007\uffd5\012\uffd5\014\uffd5\015" +
    "\uffd5\027\uffd5\046\uffd5\053\uffd5\075\uffd5\001\002\000\004" +
    "\027\u0111\001\002\000\170\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\102\uffaf\103\uffaf\104\uffaf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\020\002\030\003\045\004\050\005\074\010" +
    "\053\017\031\020\073\001\001\000\006\017\031\020\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\327\005\074\010\053\017\031\020\073\001\001\000" +
    "\006\017\031\020\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\031\020\307\001" +
    "\001\000\014\004\304\005\074\010\053\017\031\020\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\206\005\074\010\053\017\031\020\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\077\005\074\010\053\017\031\020\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\102\004" +
    "\050\005\074\010\053\017\031\020\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\105\005\074\010" +
    "\053\017\031\020\073\001\001\000\002\001\001\000\014" +
    "\004\107\005\074\010\053\017\031\020\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\112\004\050" +
    "\005\074\010\053\017\031\020\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\115\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\014\004" +
    "\117\005\074\010\053\017\031\020\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\123\005\074\010\053\017\031\020\073\001\001\000\002" +
    "\001\001\000\014\004\125\005\074\010\053\017\031\020" +
    "\073\001\001\000\002\001\001\000\014\004\127\005\074" +
    "\010\053\017\031\020\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\136\005\074\010" +
    "\053\017\031\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\141\005\074\010\053\017\031\020" +
    "\073\001\001\000\002\001\001\000\014\004\143\005\074" +
    "\010\053\017\031\020\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\031\020\147" +
    "\001\001\000\014\004\166\005\074\010\053\017\031\020" +
    "\073\001\001\000\006\017\031\020\164\001\001\000\022" +
    "\004\155\005\074\010\053\014\154\015\156\016\152\017" +
    "\031\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\160\004\050\005\074\010\053\017\031\020\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\155\005\074\010\053\015\163\016\152\017\031\020\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\170\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\176\013\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\201\013\175\001\001\000\002" +
    "\001\001\000\006\017\031\020\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\211\005\074\010\053\017" +
    "\031\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\216\004\050\005\074\010\053\017\031\020" +
    "\073\001\001\000\016\003\215\004\050\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\220\004\050\005\074\010\053\017\031" +
    "\020\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\223\005\074\010\053\017\031\020\073\001\001" +
    "\000\002\001\001\000\014\004\225\005\074\010\053\017" +
    "\031\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\231\004\050\005\074\010" +
    "\053\017\031\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\235\013\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\241" +
    "\017\031\020\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\244\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\250\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\031\020\254\001\001" +
    "\000\002\001\001\000\006\017\031\020\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\262\012\263" +
    "\001\001\000\014\004\267\005\074\010\053\017\031\020" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\262\012\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\271\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\274\004\050\005\074\010\053\017\031" +
    "\020\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\277\005\074\010\053\017\031\020\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\031\020" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\312\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\014\004" +
    "\314\005\074\010\053\017\031\020\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\317\005\074\010" +
    "\053\017\031\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\031\020\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\331\005" +
    "\074\010\053\017\031\020\073\001\001\000\002\001\001" +
    "\000\014\004\333\005\074\010\053\017\031\020\073\001" +
    "\001\000\002\001\001\000\014\004\335\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\004\011" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\342\005\074\010\053\017\031\020\073\001\001\000" +
    "\002\001\001\000\014\004\344\005\074\010\053\017\031" +
    "\020\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\347\005\074\010\053\017\031\020\073\001\001" +
    "\000\002\001\001\000\014\004\351\005\074\010\053\017" +
    "\031\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\354\005\074\010\053\017\031\020\073\001" +
    "\001\000\002\001\001\000\014\004\356\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\361\013\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\364\017\031\020\240\001" +
    "\001\000\002\001\001\000\014\004\366\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\371\005\074\010\053\017\031\020\073" +
    "\001\001\000\002\001\001\000\014\004\373\005\074\010" +
    "\053\017\031\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\376\005\074\010\053\017\031\020" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\u0101\005\074\010\053\017\031\020\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\u0104\004\050" +
    "\005\074\010\053\017\031\020\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\u0107\005\074\010\053" +
    "\017\031\020\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u010a\005\074\010\053\017\031\020\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u010d\004\050\005\074\010\053\017\031\020\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_8 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_55 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_55 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_33 _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_4 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.FuncCall(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_35 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_35 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_7 _SYMB_28 _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_11 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DefineWithExc(p_2,p_4,p_7,p_11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_56 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= Expr1 _SYMB_9 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= Expr1 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_43 Expr _SYMB_57 Expr _SYMB_39 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_46 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_36 _IDENT_ _SYMB_10 Type _SYMB_8 Type _SYMB_11 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_12 _SYMB_2 Expr _SYMB_8 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_13 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_15 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictKeys(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_16 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictValues(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= _SYMB_17 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= Type _SYMB_18 Expr _SYMB_19 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_42 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_47 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_21 _SYMB_2 Expr _SYMB_8 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_22 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_60 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleConstructor(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_23 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_24 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TupleLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_53 _SYMB_28 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_59 Expr _SYMB_34 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_51 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= _SYMB_48 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= _SYMB_49 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= _SYMB_37 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= _SYMB_38 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ToDouble(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= _SYMB_40 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= _SYMB_45 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= _SYMB_44 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= _SYMB_32 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= _SYMB_50 _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= _SYMB_54 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= _SYMB_52 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= _SYMB_58 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool ::= _SYMB_41 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListATypedArg ::= ATypedArg _SYMB_8 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr1 ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Pair ::= _SYMB_2 Expr _SYMB_9 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListPair ::= Pair _SYMB_8 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListArg ::= Arg _SYMB_8 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type1 ::= _SYMB_25 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.AutoType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type1 ::= _SYMB_28 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.ExceptionType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Type1 ::= _SYMB_31 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.TupleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Type1 ::= _SYMB_26 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type1 ::= _SYMB_29 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Type1 ::= _SYMB_27 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type1 ::= _SYMB_30 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type1 ::= _SYMB_18 Type _SYMB_19 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type1 ::= _SYMB_10 _IDENT_ _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Type1 ::= _SYMB_10 Type _SYMB_8 Type _SYMB_11 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
