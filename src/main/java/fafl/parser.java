
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\007\000\002\004\014\000\002\004\005\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\010\000" +
    "\002\004\013\000\002\004\014\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\011\000\002\004\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\012\000" +
    "\002\004\006\000\002\004\007\000\002\004\010\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\003\000" +
    "\002\004\004\000\002\005\003\000\002\005\003\000\002" +
    "\006\002\000\002\006\003\000\002\006\005\000\002\006" +
    "\002\000\002\006\003\000\002\006\005\000\002\007\003" +
    "\000\002\010\007\000\002\011\002\000\002\011\003\000" +
    "\002\011\005\000\002\012\005\000\002\013\003\000\002" +
    "\014\002\000\002\014\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\007\000\002\016\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\136\002\uffff\006\027\011\026\015\022\017" +
    "\021\020\016\021\014\022\012\023\011\024\006\025\005" +
    "\027\066\030\061\031\056\032\055\034\054\035\053\036" +
    "\052\037\051\041\047\042\045\043\044\045\043\046\042" +
    "\047\041\050\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\004\066\062\070\060\071\057\072\034\073" +
    "\033\074\065\075\030\001\002\000\004\075\361\001\002" +
    "\000\022\006\116\011\026\015\022\025\005\031\056\032" +
    "\055\034\054\035\053\001\002\000\004\006\354\001\002" +
    "\000\026\002\uffd2\004\uffd2\007\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\026\uffd2\040\uffd2\044\uffd2\067\uffd2\001\002\000\004" +
    "\033\350\001\002\000\004\006\345\001\002\000\004\006" +
    "\342\001\002\000\004\072\341\001\002\000\004\006\334" +
    "\001\002\000\004\006\331\001\002\000\004\006\324\001" +
    "\002\000\004\006\317\001\002\000\004\006\314\001\002" +
    "\000\004\006\307\001\002\000\024\006\116\011\026\015" +
    "\022\025\005\031\056\032\055\034\054\035\053\075\302" +
    "\001\002\000\004\006\276\001\002\000\004\006\273\001" +
    "\002\000\004\006\263\001\002\000\022\006\116\011\026" +
    "\015\022\025\005\031\056\032\055\034\054\035\053\001" +
    "\002\000\134\006\027\011\026\015\022\017\021\020\016" +
    "\021\014\022\012\023\011\024\006\025\005\027\066\030" +
    "\061\031\056\032\055\034\054\035\053\036\052\037\051" +
    "\041\047\042\045\043\044\045\043\046\042\047\041\050" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\004\066\062\070\060\071\057\072\034\073\033\074\065" +
    "\075\030\001\002\000\030\002\ufff3\004\ufff3\006\243\007" +
    "\ufff3\012\ufff3\013\ufff3\014\244\026\ufff3\040\ufff3\044\ufff3" +
    "\067\ufff3\001\002\000\004\002\242\001\002\000\150\006" +
    "\uffb2\007\uffb2\010\240\011\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000" +
    "\026\002\ufff7\004\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\026\ufff7\040\ufff7\044\ufff7\067\ufff7\001\002\000\026\002" +
    "\ufff4\004\ufff4\007\ufff4\012\ufff4\013\ufff4\014\ufff4\026\ufff4" +
    "\040\ufff4\044\ufff4\067\ufff4\001\002\000\004\006\233\001" +
    "\002\000\004\006\226\001\002\000\134\006\027\011\026" +
    "\015\022\017\021\020\016\021\014\022\012\023\011\024" +
    "\006\025\005\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\041\047\042\045\043\044\045" +
    "\043\046\042\047\041\050\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\004\066\062\070\060\071\057" +
    "\072\034\073\033\074\065\075\030\001\002\000\004\006" +
    "\214\001\002\000\004\006\211\001\002\000\026\002\uffcf" +
    "\004\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\026\uffcf\040" +
    "\uffcf\044\uffcf\067\uffcf\001\002\000\004\006\204\001\002" +
    "\000\004\006\201\001\002\000\004\075\160\001\002\000" +
    "\004\002\000\001\002\000\004\075\146\001\002\000\014" +
    "\002\ufffe\004\142\007\ufffe\012\ufffe\013\143\001\002\000" +
    "\004\075\136\001\002\000\004\006\131\001\002\000\150" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002" +
    "\000\150\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb" +
    "\001\002\000\150\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\041\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\001\002\000\150\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\001\002\000\134\006\027\011\026\015" +
    "\022\017\021\020\016\021\014\022\012\023\011\024\006" +
    "\025\005\027\066\030\061\031\056\032\055\034\054\035" +
    "\053\036\052\037\051\041\047\042\045\043\044\045\043" +
    "\046\042\047\041\050\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\004\066\062\070\060\071\057\072" +
    "\034\073\033\074\065\075\030\001\002\000\026\002\uffd0" +
    "\004\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\026\uffd0\040" +
    "\uffd0\044\uffd0\067\uffd0\001\002\000\004\006\121\001\002" +
    "\000\004\075\104\001\002\000\004\025\076\001\002\000" +
    "\026\002\ufff5\004\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\026\ufff5\040\ufff5\044\ufff5\067\ufff5\001\002\000\026\002" +
    "\ufff6\004\ufff6\007\ufff6\012\ufff6\013\ufff6\014\ufff6\026\ufff6" +
    "\040\ufff6\044\ufff6\067\ufff6\001\002\000\004\006\067\001" +
    "\002\000\134\006\027\011\026\015\022\017\021\020\016" +
    "\021\014\022\012\023\011\024\006\025\005\027\066\030" +
    "\061\031\056\032\055\034\054\035\053\036\052\037\051" +
    "\041\047\042\045\043\044\045\043\046\042\047\041\050" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\004\066\062\070\060\071\057\072\034\073\033\074\065" +
    "\075\030\001\002\000\004\013\071\001\002\000\134\006" +
    "\027\011\026\015\022\017\021\020\016\021\014\022\012" +
    "\023\011\024\006\025\005\027\066\030\061\031\056\032" +
    "\055\034\054\035\053\036\052\037\051\041\047\042\045" +
    "\043\044\045\043\046\042\047\041\050\040\051\037\052" +
    "\036\053\035\054\025\055\024\056\023\057\020\060\017" +
    "\061\015\062\013\063\010\064\007\065\004\066\062\070" +
    "\060\071\057\072\034\073\033\074\065\075\030\001\002" +
    "\000\004\013\073\001\002\000\134\006\027\011\026\015" +
    "\022\017\021\020\016\021\014\022\012\023\011\024\006" +
    "\025\005\027\066\030\061\031\056\032\055\034\054\035" +
    "\053\036\052\037\051\041\047\042\045\043\044\045\043" +
    "\046\042\047\041\050\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\004\066\062\070\060\071\057\072" +
    "\034\073\033\074\065\075\030\001\002\000\004\007\075" +
    "\001\002\000\026\002\uffdf\004\uffdf\007\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\026\uffdf\040\uffdf\044\uffdf\067\uffdf\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\004\026\100\001\002\000\004\011\101" +
    "\001\002\000\136\006\027\011\026\012\uffff\015\022\017" +
    "\021\020\016\021\014\022\012\023\011\024\006\025\005" +
    "\027\066\030\061\031\056\032\055\034\054\035\053\036" +
    "\052\037\051\041\047\042\045\043\044\045\043\046\042" +
    "\047\041\050\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\004\066\062\070\060\071\057\072\034\073" +
    "\033\074\065\075\030\001\002\000\004\012\103\001\002" +
    "\000\026\002\uffe3\004\uffe3\007\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\026\uffe3\040\uffe3\044\uffe3\067\uffe3\001\002\000\004" +
    "\006\105\001\002\000\006\007\uffce\075\106\001\002\000" +
    "\004\005\114\001\002\000\006\007\uffcd\013\112\001\002" +
    "\000\004\007\111\001\002\000\026\002\uffef\004\uffef\007" +
    "\uffef\012\uffef\013\uffef\014\uffef\026\uffef\040\uffef\044\uffef" +
    "\067\uffef\001\002\000\006\007\uffce\075\106\001\002\000" +
    "\004\007\uffcc\001\002\000\022\006\116\011\026\015\022" +
    "\025\005\031\056\032\055\034\054\035\053\001\002\000" +
    "\006\007\uffc3\013\uffc3\001\002\000\022\006\116\011\026" +
    "\015\022\025\005\031\056\032\055\034\054\035\053\001" +
    "\002\000\004\007\120\001\002\000\150\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\007\123\001\002\000\026\002\uffde\004\uffde\007\uffde" +
    "\012\uffde\013\uffde\014\uffde\026\uffde\040\uffde\044\uffde\067" +
    "\uffde\001\002\000\004\040\125\001\002\000\004\006\126" +
    "\001\002\000\134\006\027\011\026\015\022\017\021\020" +
    "\016\021\014\022\012\023\011\024\006\025\005\027\066" +
    "\030\061\031\056\032\055\034\054\035\053\036\052\037" +
    "\051\041\047\042\045\043\044\045\043\046\042\047\041" +
    "\050\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\004\066\062\070\060\071\057\072\034\073\033\074" +
    "\065\075\030\001\002\000\004\007\130\001\002\000\026" +
    "\002\uffdc\004\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\026" +
    "\uffdc\040\uffdc\044\uffdc\067\uffdc\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\013\133\001\002\000\134\006\027\011\026\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\027\066\030\061\031\056\032\055\034\054\035\053" +
    "\036\052\037\051\041\047\042\045\043\044\045\043\046" +
    "\042\047\041\050\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\004\066\062\070\060\071\057\072\034" +
    "\073\033\074\065\075\030\001\002\000\004\007\135\001" +
    "\002\000\026\002\uffd4\004\uffd4\007\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\026\uffd4\040\uffd4\044\uffd4\067\uffd4\001\002\000" +
    "\004\006\137\001\002\000\136\006\027\007\uffff\011\026" +
    "\015\022\017\021\020\016\021\014\022\012\023\011\024" +
    "\006\025\005\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\041\047\042\045\043\044\045" +
    "\043\046\042\047\041\050\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\004\066\062\070\060\071\057" +
    "\072\034\073\033\074\065\075\030\001\002\000\004\007" +
    "\141\001\002\000\026\002\ufff2\004\ufff2\007\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\026\ufff2\040\ufff2\044\ufff2\067\ufff2\001" +
    "\002\000\142\002\uffff\006\027\007\uffff\011\026\012\uffff" +
    "\015\022\017\021\020\016\021\014\022\012\023\011\024" +
    "\006\025\005\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\041\047\042\045\043\044\045" +
    "\043\046\042\047\041\050\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\004\066\062\070\060\071\057" +
    "\072\034\073\033\074\065\075\030\001\002\000\142\002" +
    "\uffff\006\027\007\uffff\011\026\012\uffff\015\022\017\021" +
    "\020\016\021\014\022\012\023\011\024\006\025\005\027" +
    "\066\030\061\031\056\032\055\034\054\035\053\036\052" +
    "\037\051\041\047\042\045\043\044\045\043\046\042\047" +
    "\041\050\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\004\066\062\070\060\071\057\072\034\073\033" +
    "\074\065\075\030\001\002\000\010\002\ufffa\007\ufffa\012" +
    "\ufffa\001\002\000\010\002\ufffd\007\ufffd\012\ufffd\001\002" +
    "\000\004\006\147\001\002\000\006\007\uffce\075\106\001" +
    "\002\000\004\007\151\001\002\000\004\010\152\001\002" +
    "\000\022\006\116\011\026\015\022\025\005\031\056\032" +
    "\055\034\054\035\053\001\002\000\004\011\uffc8\001\002" +
    "\000\004\011\155\001\002\000\134\006\027\011\026\015" +
    "\022\017\021\020\016\021\014\022\012\023\011\024\006" +
    "\025\005\027\066\030\061\031\056\032\055\034\054\035" +
    "\053\036\052\037\051\041\047\042\045\043\044\045\043" +
    "\046\042\047\041\050\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\004\066\062\070\060\071\057\072" +
    "\034\073\033\074\065\075\030\001\002\000\004\012\157" +
    "\001\002\000\026\002\ufff1\004\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\026\ufff1\040\ufff1\044\ufff1\067\ufff1\001\002" +
    "\000\004\015\161\001\002\000\022\006\116\011\026\015" +
    "\022\025\005\031\056\032\055\034\054\035\053\001\002" +
    "\000\004\013\163\001\002\000\022\006\116\011\026\015" +
    "\022\025\005\031\056\032\055\034\054\035\053\001\002" +
    "\000\004\016\165\001\002\000\004\006\166\001\002\000" +
    "\006\006\167\007\uffc6\001\002\000\134\006\027\011\026" +
    "\015\022\017\021\020\016\021\014\022\012\023\011\024" +
    "\006\025\005\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\041\047\042\045\043\044\045" +
    "\043\046\042\047\041\050\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\004\066\062\070\060\071\057" +
    "\072\034\073\033\074\065\075\030\001\002\000\006\007" +
    "\uffc5\013\173\001\002\000\004\007\172\001\002\000\026" +
    "\002\uffea\004\uffea\007\uffea\012\uffea\013\uffea\014\uffea\026" +
    "\uffea\040\uffea\044\uffea\067\uffea\001\002\000\006\006\167" +
    "\007\uffc6\001\002\000\004\007\uffc4\001\002\000\004\014" +
    "\176\001\002\000\134\006\027\011\026\015\022\017\021" +
    "\020\016\021\014\022\012\023\011\024\006\025\005\027" +
    "\066\030\061\031\056\032\055\034\054\035\053\036\052" +
    "\037\051\041\047\042\045\043\044\045\043\046\042\047" +
    "\041\050\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\004\066\062\070\060\071\057\072\034\073\033" +
    "\074\065\075\030\001\002\000\004\007\200\001\002\000" +
    "\006\007\uffc7\013\uffc7\001\002\000\136\006\027\007\uffff" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\007\203\001\002\000\026\002\uffd8\004\uffd8\007\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\026\uffd8\040\uffd8\044\uffd8\067" +
    "\uffd8\001\002\000\134\006\027\011\026\015\022\017\021" +
    "\020\016\021\014\022\012\023\011\024\006\025\005\027" +
    "\066\030\061\031\056\032\055\034\054\035\053\036\052" +
    "\037\051\041\047\042\045\043\044\045\043\046\042\047" +
    "\041\050\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\004\066\062\070\060\071\057\072\034\073\033" +
    "\074\065\075\030\001\002\000\004\013\206\001\002\000" +
    "\134\006\027\011\026\015\022\017\021\020\016\021\014" +
    "\022\012\023\011\024\006\025\005\027\066\030\061\031" +
    "\056\032\055\034\054\035\053\036\052\037\051\041\047" +
    "\042\045\043\044\045\043\046\042\047\041\050\040\051" +
    "\037\052\036\053\035\054\025\055\024\056\023\057\020" +
    "\060\017\061\015\062\013\063\010\064\007\065\004\066" +
    "\062\070\060\071\057\072\034\073\033\074\065\075\030" +
    "\001\002\000\004\007\210\001\002\000\026\002\uffd7\004" +
    "\uffd7\007\uffd7\012\uffd7\013\uffd7\014\uffd7\026\uffd7\040\uffd7" +
    "\044\uffd7\067\uffd7\001\002\000\134\006\027\011\026\015" +
    "\022\017\021\020\016\021\014\022\012\023\011\024\006" +
    "\025\005\027\066\030\061\031\056\032\055\034\054\035" +
    "\053\036\052\037\051\041\047\042\045\043\044\045\043" +
    "\046\042\047\041\050\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\004\066\062\070\060\071\057\072" +
    "\034\073\033\074\065\075\030\001\002\000\004\007\213" +
    "\001\002\000\026\002\uffe2\004\uffe2\007\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\026\uffe2\040\uffe2\044\uffe2\067\uffe2\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\004\013\216\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\007\220\001\002\000\026\002\uffe0\004\uffe0\007\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\026\uffe0\040\uffe0\044\uffe0\067" +
    "\uffe0\001\002\000\004\067\222\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\044\224\001\002\000\134\006\027\011\026\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\027\066\030\061\031\056\032\055\034\054\035\053" +
    "\036\052\037\051\041\047\042\045\043\044\045\043\046" +
    "\042\047\041\050\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\004\066\062\070\060\071\057\072\034" +
    "\073\033\074\065\075\030\001\002\000\026\002\uffec\004" +
    "\uffec\007\uffec\012\uffec\013\uffec\014\uffec\026\uffec\040\uffec" +
    "\044\uffec\067\uffec\001\002\000\134\006\027\011\026\015" +
    "\022\017\021\020\016\021\014\022\012\023\011\024\006" +
    "\025\005\027\066\030\061\031\056\032\055\034\054\035" +
    "\053\036\052\037\051\041\047\042\045\043\044\045\043" +
    "\046\042\047\041\050\040\051\037\052\036\053\035\054" +
    "\025\055\024\056\023\057\020\060\017\061\015\062\013" +
    "\063\010\064\007\065\004\066\062\070\060\071\057\072" +
    "\034\073\033\074\065\075\030\001\002\000\004\013\230" +
    "\001\002\000\134\006\027\011\026\015\022\017\021\020" +
    "\016\021\014\022\012\023\011\024\006\025\005\027\066" +
    "\030\061\031\056\032\055\034\054\035\053\036\052\037" +
    "\051\041\047\042\045\043\044\045\043\046\042\047\041" +
    "\050\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\004\066\062\070\060\071\057\072\034\073\033\074" +
    "\065\075\030\001\002\000\004\007\232\001\002\000\026" +
    "\002\uffd5\004\uffd5\007\uffd5\012\uffd5\013\uffd5\014\uffd5\026" +
    "\uffd5\040\uffd5\044\uffd5\067\uffd5\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\013\235\001\002\000\134\006\027\011\026\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\027\066\030\061\031\056\032\055\034\054\035\053" +
    "\036\052\037\051\041\047\042\045\043\044\045\043\046" +
    "\042\047\041\050\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\004\066\062\070\060\071\057\072\034" +
    "\073\033\074\065\075\030\001\002\000\004\007\237\001" +
    "\002\000\026\002\uffd6\004\uffd6\007\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\026\uffd6\040\uffd6\044\uffd6\067\uffd6\001\002\000" +
    "\022\006\116\011\026\015\022\025\005\031\056\032\055" +
    "\034\054\035\053\001\002\000\146\006\uffb3\007\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\001\002\000\004\002\001\001\002\000" +
    "\136\006\027\007\uffc1\011\026\015\022\017\021\020\016" +
    "\021\014\022\012\023\011\024\006\025\005\027\066\030" +
    "\061\031\056\032\055\034\054\035\053\036\052\037\051" +
    "\041\047\042\045\043\044\045\043\046\042\047\041\050" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\004\066\062\070\060\071\057\072\034\073\033\074\065" +
    "\075\247\001\002\000\004\075\245\001\002\000\026\002" +
    "\uffed\004\uffed\007\uffed\012\uffed\013\uffed\014\uffed\026\uffed" +
    "\040\uffed\044\uffed\067\uffed\001\002\000\026\002\uffc0\004" +
    "\uffc0\007\uffc0\012\uffc0\013\254\014\uffc0\026\uffc0\040\uffc0" +
    "\044\uffc0\067\uffc0\001\002\000\030\002\ufff3\004\ufff3\006" +
    "\243\007\ufff3\012\ufff3\013\ufff3\014\244\026\ufff3\040\ufff3" +
    "\044\ufff3\067\ufff3\001\002\000\004\007\253\001\002\000" +
    "\026\002\uffbd\004\uffbd\007\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\026\uffbd\040\uffbd\044\uffbd\067\uffbd\001\002\000\026\002" +
    "\uffc2\004\uffc2\007\uffc2\012\uffc2\013\uffc2\014\uffc2\026\uffc2" +
    "\040\uffc2\044\uffc2\067\uffc2\001\002\000\026\002\uffee\004" +
    "\uffee\007\uffee\012\uffee\013\uffee\014\uffee\026\uffee\040\uffee" +
    "\044\uffee\067\uffee\001\002\000\160\002\uffc1\004\uffc1\006" +
    "\027\007\uffc1\011\026\012\uffc1\013\uffc1\014\uffc1\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\026\uffc1\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\040\uffc1\041\047\042\045\043" +
    "\044\044\uffc1\045\043\046\042\047\041\050\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\004\066\062" +
    "\067\uffc1\070\060\071\057\072\034\073\033\074\065\075" +
    "\247\001\002\000\026\002\uffbf\004\uffbf\007\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\026\uffbf\040\uffbf\044\uffbf\067\uffbf\001" +
    "\002\000\004\007\260\001\002\000\006\007\120\025\076" +
    "\001\002\000\026\002\ufff0\004\ufff0\007\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\026\ufff0\040\ufff0\044\ufff0\067\ufff0\001\002" +
    "\000\004\012\262\001\002\000\146\006\uffb4\007\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\001\002\000\006\007\uffce\075\106\001" +
    "\002\000\004\007\265\001\002\000\004\010\266\001\002" +
    "\000\022\006\116\011\026\015\022\025\005\031\056\032" +
    "\055\034\054\035\053\001\002\000\004\011\270\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\004\012\272\001\002\000\026\002\uffeb" +
    "\004\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\026\uffeb\040" +
    "\uffeb\044\uffeb\067\uffeb\001\002\000\134\006\027\011\026" +
    "\015\022\017\021\020\016\021\014\022\012\023\011\024" +
    "\006\025\005\027\066\030\061\031\056\032\055\034\054" +
    "\035\053\036\052\037\051\041\047\042\045\043\044\045" +
    "\043\046\042\047\041\050\040\051\037\052\036\053\035" +
    "\054\025\055\024\056\023\057\020\060\017\061\015\062" +
    "\013\063\010\064\007\065\004\066\062\070\060\071\057" +
    "\072\034\073\033\074\065\075\030\001\002\000\004\007" +
    "\275\001\002\000\026\002\uffe1\004\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\026\uffe1\040\uffe1\044\uffe1\067\uffe1\001" +
    "\002\000\136\006\027\007\uffff\011\026\015\022\017\021" +
    "\020\016\021\014\022\012\023\011\024\006\025\005\027" +
    "\066\030\061\031\056\032\055\034\054\035\053\036\052" +
    "\037\051\041\047\042\045\043\044\045\043\046\042\047" +
    "\041\050\040\051\037\052\036\053\035\054\025\055\024" +
    "\056\023\057\020\060\017\061\015\062\013\063\010\064" +
    "\007\065\004\066\062\070\060\071\057\072\034\073\033" +
    "\074\065\075\030\001\002\000\004\007\300\001\002\000" +
    "\026\002\uffda\004\uffda\007\uffda\012\uffda\013\uffda\014\uffda" +
    "\026\uffda\040\uffda\044\uffda\067\uffda\001\002\000\004\013" +
    "\304\001\002\000\004\016\303\001\002\000\150\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\022" +
    "\006\116\011\026\015\022\025\005\031\056\032\055\034" +
    "\054\035\053\001\002\000\004\016\306\001\002\000\150" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\004\013\311\001\002\000\004\006\167" +
    "\001\002\000\004\007\313\001\002\000\026\002\uffe9\004" +
    "\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\026\uffe9\040\uffe9" +
    "\044\uffe9\067\uffe9\001\002\000\136\006\027\007\uffff\011" +
    "\026\015\022\017\021\020\016\021\014\022\012\023\011" +
    "\024\006\025\005\027\066\030\061\031\056\032\055\034" +
    "\054\035\053\036\052\037\051\041\047\042\045\043\044" +
    "\045\043\046\042\047\041\050\040\051\037\052\036\053" +
    "\035\054\025\055\024\056\023\057\020\060\017\061\015" +
    "\062\013\063\010\064\007\065\004\066\062\070\060\071" +
    "\057\072\034\073\033\074\065\075\030\001\002\000\004" +
    "\007\316\001\002\000\026\002\uffd9\004\uffd9\007\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\026\uffd9\040\uffd9\044\uffd9\067\uffd9" +
    "\001\002\000\134\006\027\011\026\015\022\017\021\020" +
    "\016\021\014\022\012\023\011\024\006\025\005\027\066" +
    "\030\061\031\056\032\055\034\054\035\053\036\052\037" +
    "\051\041\047\042\045\043\044\045\043\046\042\047\041" +
    "\050\040\051\037\052\036\053\035\054\025\055\024\056" +
    "\023\057\020\060\017\061\015\062\013\063\010\064\007" +
    "\065\004\066\062\070\060\071\057\072\034\073\033\074" +
    "\065\075\030\001\002\000\004\013\321\001\002\000\134" +
    "\006\027\011\026\015\022\017\021\020\016\021\014\022" +
    "\012\023\011\024\006\025\005\027\066\030\061\031\056" +
    "\032\055\034\054\035\053\036\052\037\051\041\047\042" +
    "\045\043\044\045\043\046\042\047\041\050\040\051\037" +
    "\052\036\053\035\054\025\055\024\056\023\057\020\060" +
    "\017\061\015\062\013\063\010\064\007\065\004\066\062" +
    "\070\060\071\057\072\034\073\033\074\065\075\030\001" +
    "\002\000\004\007\323\001\002\000\026\002\uffd3\004\uffd3" +
    "\007\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3\040\uffd3\044" +
    "\uffd3\067\uffd3\001\002\000\134\006\027\011\026\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\027\066\030\061\031\056\032\055\034\054\035\053" +
    "\036\052\037\051\041\047\042\045\043\044\045\043\046" +
    "\042\047\041\050\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\004\066\062\070\060\071\057\072\034" +
    "\073\033\074\065\075\030\001\002\000\004\013\326\001" +
    "\002\000\134\006\027\011\026\015\022\017\021\020\016" +
    "\021\014\022\012\023\011\024\006\025\005\027\066\030" +
    "\061\031\056\032\055\034\054\035\053\036\052\037\051" +
    "\041\047\042\045\043\044\045\043\046\042\047\041\050" +
    "\040\051\037\052\036\053\035\054\025\055\024\056\023" +
    "\057\020\060\017\061\015\062\013\063\010\064\007\065" +
    "\004\066\062\070\060\071\057\072\034\073\033\074\065" +
    "\075\030\001\002\000\004\007\330\001\002\000\026\002" +
    "\uffe8\004\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\026\uffe8" +
    "\040\uffe8\044\uffe8\067\uffe8\001\002\000\136\006\027\007" +
    "\uffff\011\026\015\022\017\021\020\016\021\014\022\012" +
    "\023\011\024\006\025\005\027\066\030\061\031\056\032" +
    "\055\034\054\035\053\036\052\037\051\041\047\042\045" +
    "\043\044\045\043\046\042\047\041\050\040\051\037\052" +
    "\036\053\035\054\025\055\024\056\023\057\020\060\017" +
    "\061\015\062\013\063\010\064\007\065\004\066\062\070" +
    "\060\071\057\072\034\073\033\074\065\075\030\001\002" +
    "\000\004\007\333\001\002\000\026\002\uffdb\004\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\026\uffdb\040\uffdb\044\uffdb" +
    "\067\uffdb\001\002\000\134\006\027\011\026\015\022\017" +
    "\021\020\016\021\014\022\012\023\011\024\006\025\005" +
    "\027\066\030\061\031\056\032\055\034\054\035\053\036" +
    "\052\037\051\041\047\042\045\043\044\045\043\046\042" +
    "\047\041\050\040\051\037\052\036\053\035\054\025\055" +
    "\024\056\023\057\020\060\017\061\015\062\013\063\010" +
    "\064\007\065\004\066\062\070\060\071\057\072\034\073" +
    "\033\074\065\075\030\001\002\000\004\013\336\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\004\007\340\001\002\000\026\002\uffe7" +
    "\004\uffe7\007\uffe7\012\uffe7\013\uffe7\014\uffe7\026\uffe7\040" +
    "\uffe7\044\uffe7\067\uffe7\001\002\000\026\002\uffd1\004\uffd1" +
    "\007\uffd1\012\uffd1\013\uffd1\014\uffd1\026\uffd1\040\uffd1\044" +
    "\uffd1\067\uffd1\001\002\000\134\006\027\011\026\015\022" +
    "\017\021\020\016\021\014\022\012\023\011\024\006\025" +
    "\005\027\066\030\061\031\056\032\055\034\054\035\053" +
    "\036\052\037\051\041\047\042\045\043\044\045\043\046" +
    "\042\047\041\050\040\051\037\052\036\053\035\054\025" +
    "\055\024\056\023\057\020\060\017\061\015\062\013\063" +
    "\010\064\007\065\004\066\062\070\060\071\057\072\034" +
    "\073\033\074\065\075\030\001\002\000\004\007\344\001" +
    "\002\000\026\002\uffe6\004\uffe6\007\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\026\uffe6\040\uffe6\044\uffe6\067\uffe6\001\002\000" +
    "\134\006\027\011\026\015\022\017\021\020\016\021\014" +
    "\022\012\023\011\024\006\025\005\027\066\030\061\031" +
    "\056\032\055\034\054\035\053\036\052\037\051\041\047" +
    "\042\045\043\044\045\043\046\042\047\041\050\040\051" +
    "\037\052\036\053\035\054\025\055\024\056\023\057\020" +
    "\060\017\061\015\062\013\063\010\064\007\065\004\066" +
    "\062\070\060\071\057\072\034\073\033\074\065\075\030" +
    "\001\002\000\004\007\347\001\002\000\026\002\uffe5\004" +
    "\uffe5\007\uffe5\012\uffe5\013\uffe5\014\uffe5\026\uffe5\040\uffe5" +
    "\044\uffe5\067\uffe5\001\002\000\004\006\351\001\002\000" +
    "\004\072\352\001\002\000\004\007\353\001\002\000\026" +
    "\002\uffdd\004\uffdd\007\uffdd\012\uffdd\013\uffdd\014\uffdd\026" +
    "\uffdd\040\uffdd\044\uffdd\067\uffdd\001\002\000\134\006\027" +
    "\011\026\015\022\017\021\020\016\021\014\022\012\023" +
    "\011\024\006\025\005\027\066\030\061\031\056\032\055" +
    "\034\054\035\053\036\052\037\051\041\047\042\045\043" +
    "\044\045\043\046\042\047\041\050\040\051\037\052\036" +
    "\053\035\054\025\055\024\056\023\057\020\060\017\061" +
    "\015\062\013\063\010\064\007\065\004\066\062\070\060" +
    "\071\057\072\034\073\033\074\065\075\030\001\002\000" +
    "\004\007\356\001\002\000\026\002\uffe4\004\uffe4\007\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\026\uffe4\040\uffe4\044\uffe4\067" +
    "\uffe4\001\002\000\004\026\360\001\002\000\150\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\004" +
    "\005\362\001\002\000\024\006\116\011\026\015\022\025" +
    "\005\031\056\032\055\034\054\035\053\075\364\001\002" +
    "\000\134\006\027\011\026\015\022\017\021\020\016\021" +
    "\014\022\012\023\011\024\006\025\005\027\066\030\061" +
    "\031\056\032\055\034\054\035\053\036\052\037\051\041" +
    "\047\042\045\043\044\045\043\046\042\047\041\050\040" +
    "\051\037\052\036\053\035\054\025\055\024\056\023\057" +
    "\020\060\017\061\015\062\013\063\010\064\007\065\004" +
    "\066\062\070\060\071\057\072\034\073\033\074\065\075" +
    "\030\001\002\000\160\002\uffc1\004\uffc1\006\027\007\uffc1" +
    "\011\026\012\uffc1\013\uffc1\014\uffc1\015\022\017\021\020" +
    "\016\021\014\022\012\023\011\024\006\025\005\026\uffc1" +
    "\027\066\030\061\031\056\032\055\034\054\035\053\036" +
    "\052\037\051\040\uffc1\041\047\042\045\043\044\044\uffc1" +
    "\045\043\046\042\047\041\050\040\051\037\052\036\053" +
    "\035\054\025\055\024\056\023\057\020\060\017\061\015" +
    "\062\013\063\010\064\007\065\004\066\062\067\uffc1\070" +
    "\060\071\057\072\034\073\033\074\065\075\247\001\002" +
    "\000\026\002\ufff8\004\ufff8\007\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\026\ufff8\040\ufff8\044\ufff8\067\ufff8\001\002\000\026" +
    "\002\ufff9\004\ufff9\007\ufff9\012\ufff9\013\ufff9\014\ufff9\026" +
    "\ufff9\040\ufff9\044\ufff9\067\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\016\002\030\003\045\004\047\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\006\016\031" +
    "\017\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\031\017\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\031\017\260" +
    "\001\001\000\012\004\255\005\063\016\031\017\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\220\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\123\005\063\016\031\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\067\005\063\016\031\017\062\001\001\000\002\001" +
    "\001\000\012\004\071\005\063\016\031\017\062\001\001" +
    "\000\002\001\001\000\012\004\073\005\063\016\031\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\076\005\063\016\031\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\101\004\047\005\063" +
    "\016\031\017\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\107\012\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\112\012\106\001\001\000\002" +
    "\001\001\000\006\016\031\017\114\001\001\000\002\001" +
    "\001\000\006\016\031\017\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\121\005\063\016\031\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\126\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\131\005\063\016\031\017\062\001\001\000" +
    "\002\001\001\000\012\004\133\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\137\004\047\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\144\004\047\005\063\016\031\017\062\001\001\000\014" +
    "\003\143\004\047\005\063\016\031\017\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\147\012\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\153\016\031\017\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\155\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\031\017\161\001\001\000" +
    "\002\001\001\000\006\016\031\017\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\167\011\170\001" +
    "\001\000\012\004\174\005\063\016\031\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\167\011\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\176\005\063\016\031\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\201" +
    "\004\047\005\063\016\031\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\204\005\063\016\031" +
    "\017\062\001\001\000\002\001\001\000\012\004\206\005" +
    "\063\016\031\017\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\211\005\063\016\031\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\214" +
    "\005\063\016\031\017\062\001\001\000\002\001\001\000" +
    "\012\004\216\005\063\016\031\017\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\222\005\063\016\031\017\062\001\001\000\002\001\001" +
    "\000\012\004\224\005\063\016\031\017\062\001\001\000" +
    "\002\001\001\000\012\004\226\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\012\004\230\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\233\005\063\016\031\017\062\001\001\000" +
    "\002\001\001\000\012\004\235\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\031\017\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\250\005\063\013\247\014\251\015\245\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\250\005\063\014\254\015\245\016\031\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\263\012\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\266\016\031\017\152\001\001\000" +
    "\002\001\001\000\012\004\270\005\063\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\273\005\063\016\031\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\276\004\047\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\031\017\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\307\005\063\016\031\017\062\001" +
    "\001\000\002\001\001\000\004\010\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\314\004\047\005" +
    "\063\016\031\017\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\317\005\063\016\031\017\062\001" +
    "\001\000\002\001\001\000\012\004\321\005\063\016\031" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\324\005\063\016\031\017\062\001\001\000\002" +
    "\001\001\000\012\004\326\005\063\016\031\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\331" +
    "\004\047\005\063\016\031\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\334\005\063\016\031" +
    "\017\062\001\001\000\002\001\001\000\012\004\336\005" +
    "\063\016\031\017\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\342\005\063\016" +
    "\031\017\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\345\005\063\016\031\017\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\354\005\063\016\031\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\031\017\362\001\001\000\012" +
    "\004\365\005\063\016\031\017\062\001\001\000\020\004" +
    "\250\005\063\013\364\014\251\015\245\016\031\017\062" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_7 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_49 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_49 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_27 _IDENT_ _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_4 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.FuncCall(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_29 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _SYMB_50 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_2 Args _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Args p_3 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _IDENT_ _SYMB_8 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_37 Expr _SYMB_51 Expr _SYMB_32 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_40 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_30 _IDENT_ _SYMB_9 Type _SYMB_7 Type _SYMB_10 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_11 _SYMB_2 Expr _SYMB_7 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_12 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_13 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictRemove(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictKeys(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_15 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictValues(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_16 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= Type _SYMB_17 Expr _SYMB_18 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= _SYMB_35 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_41 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_36 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_19 _SYMB_2 Expr _SYMB_7 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_47 _SYMB_23 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_53 Expr _SYMB_28 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_45 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_42 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_43 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_31 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_33 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= _SYMB_39 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= _SYMB_38 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= _SYMB_26 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= _SYMB_44 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= _SYMB_48 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= _SYMB_46 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool ::= _SYMB_52 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool ::= _SYMB_34 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Pair ::= _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListPair ::= Pair _SYMB_7 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListArg ::= Arg _SYMB_7 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type1 ::= _SYMB_21 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type1 ::= _SYMB_24 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Type1 ::= _SYMB_22 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type1 ::= _SYMB_25 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Type1 ::= _SYMB_17 Type _SYMB_18 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type1 ::= _SYMB_9 _IDENT_ _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type1 ::= _SYMB_9 Type _SYMB_7 Type _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictType(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
