
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\014\000\002\004\005\000\002\004\007\000\002\004\006" +
    "\000\002\004\005\000\002\004\010\000\002\004\013\000" +
    "\002\004\014\000\002\004\010\000\002\004\011\000\002" +
    "\004\006\000\002\004\006\000\002\004\010\000\002\004" +
    "\012\000\002\004\006\000\002\004\007\000\002\004\010" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\002\000\002\006\003\000\002\006\005\000" +
    "\002\006\002\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\010\007\000\002\011\002\000\002\011" +
    "\003\000\002\011\005\000\002\012\005\000\002\013\003" +
    "\000\002\014\002\000\002\014\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\120\002\uffff\006\022\011\021\015\014\017" +
    "\013\020\012\022\010\023\006\024\005\026\004\027\057" +
    "\030\053\032\052\033\051\034\050\036\047\037\046\040" +
    "\044\041\043\042\041\043\040\044\037\045\036\046\035" +
    "\047\034\050\033\051\032\052\031\053\030\054\020\055" +
    "\017\056\016\057\015\061\011\062\007\063\027\064\026" +
    "\065\056\066\023\001\002\000\132\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\001\002\000\132\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\132\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000\116\006\022" +
    "\011\021\015\014\017\013\020\012\022\010\023\006\024" +
    "\005\026\004\027\057\030\053\032\052\033\051\034\050" +
    "\036\047\037\046\040\044\041\043\042\041\043\040\044" +
    "\037\045\036\046\035\047\034\050\033\051\032\052\031" +
    "\053\030\054\020\055\017\056\016\057\015\061\011\062" +
    "\007\063\027\064\026\065\056\066\023\001\002\000\004" +
    "\006\306\001\002\000\026\002\uffd6\004\uffd6\007\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\021\uffd6\031\uffd6\035\uffd6\060\uffd6" +
    "\001\002\000\022\006\103\011\021\015\014\020\012\023" +
    "\006\024\005\026\004\027\057\001\002\000\004\006\277" +
    "\001\002\000\004\066\275\001\002\000\004\066\271\001" +
    "\002\000\004\066\263\001\002\000\026\002\uffd8\004\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8\031\uffd8\035" +
    "\uffd8\060\uffd8\001\002\000\004\025\257\001\002\000\022" +
    "\006\103\011\021\015\014\020\012\023\006\024\005\026" +
    "\004\027\057\001\002\000\116\006\022\011\021\015\014" +
    "\017\013\020\012\022\010\023\006\024\005\026\004\027" +
    "\057\030\053\032\052\033\051\034\050\036\047\037\046" +
    "\040\044\041\043\042\041\043\040\044\037\045\036\046" +
    "\035\047\034\050\033\051\032\052\031\053\030\054\020" +
    "\055\017\056\016\057\015\061\011\062\007\063\027\064" +
    "\026\065\056\066\023\001\002\000\030\002\ufff3\004\ufff3" +
    "\006\237\007\ufff3\012\ufff3\013\ufff3\014\240\021\ufff3\031" +
    "\ufff3\035\ufff3\060\ufff3\001\002\000\004\002\236\001\002" +
    "\000\132\006\uffb9\007\uffb9\010\234\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001" +
    "\002\000\026\002\ufff7\004\ufff7\007\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\021\ufff7\031\ufff7\035\ufff7\060\ufff7\001\002\000" +
    "\026\002\ufff4\004\ufff4\007\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\021\ufff4\031\ufff4\035\ufff4\060\ufff4\001\002\000\004\063" +
    "\233\001\002\000\004\006\230\001\002\000\004\006\223" +
    "\001\002\000\004\006\220\001\002\000\004\006\215\001" +
    "\002\000\004\006\212\001\002\000\004\006\202\001\002" +
    "\000\004\006\175\001\002\000\004\006\170\001\002\000" +
    "\116\006\022\011\021\015\014\017\013\020\012\022\010" +
    "\023\006\024\005\026\004\027\057\030\053\032\052\033" +
    "\051\034\050\036\047\037\046\040\044\041\043\042\041" +
    "\043\040\044\037\045\036\046\035\047\034\050\033\051" +
    "\032\052\031\053\030\054\020\055\017\056\016\057\015" +
    "\061\011\062\007\063\027\064\026\065\056\066\023\001" +
    "\002\000\004\002\000\001\002\000\004\006\156\001\002" +
    "\000\004\006\153\001\002\000\014\002\ufffe\004\147\007" +
    "\ufffe\012\ufffe\013\150\001\002\000\026\002\uffd5\004\uffd5" +
    "\007\uffd5\012\uffd5\013\uffd5\014\uffd5\021\uffd5\031\uffd5\035" +
    "\uffd5\060\uffd5\001\002\000\004\006\142\001\002\000\004" +
    "\006\137\001\002\000\004\066\116\001\002\000\004\066" +
    "\073\001\002\000\004\006\066\001\002\000\004\020\060" +
    "\001\002\000\026\002\ufff5\004\ufff5\007\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\021\ufff5\031\ufff5\035\ufff5\060\ufff5\001\002" +
    "\000\026\002\ufff6\004\ufff6\007\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\021\ufff6\031\ufff6\035\ufff6\060\ufff6\001\002\000\132" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000" +
    "\116\006\022\011\021\015\014\017\013\020\012\022\010" +
    "\023\006\024\005\026\004\027\057\030\053\032\052\033" +
    "\051\034\050\036\047\037\046\040\044\041\043\042\041" +
    "\043\040\044\037\045\036\046\035\047\034\050\033\051" +
    "\032\052\031\053\030\054\020\055\017\056\016\057\015" +
    "\061\011\062\007\063\027\064\026\065\056\066\023\001" +
    "\002\000\004\021\062\001\002\000\004\011\063\001\002" +
    "\000\120\006\022\011\021\012\uffff\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\004\012\065\001\002\000\026\002" +
    "\uffe9\004\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\021\uffe9" +
    "\031\uffe9\035\uffe9\060\uffe9\001\002\000\116\006\022\011" +
    "\021\015\014\017\013\020\012\022\010\023\006\024\005" +
    "\026\004\027\057\030\053\032\052\033\051\034\050\036" +
    "\047\037\046\040\044\041\043\042\041\043\040\044\037" +
    "\045\036\046\035\047\034\050\033\051\032\052\031\053" +
    "\030\054\020\055\017\056\016\057\015\061\011\062\007" +
    "\063\027\064\026\065\056\066\023\001\002\000\004\013" +
    "\070\001\002\000\116\006\022\011\021\015\014\017\013" +
    "\020\012\022\010\023\006\024\005\026\004\027\057\030" +
    "\053\032\052\033\051\034\050\036\047\037\046\040\044" +
    "\041\043\042\041\043\040\044\037\045\036\046\035\047" +
    "\034\050\033\051\032\052\031\053\030\054\020\055\017" +
    "\056\016\057\015\061\011\062\007\063\027\064\026\065" +
    "\056\066\023\001\002\000\004\007\072\001\002\000\026" +
    "\002\uffda\004\uffda\007\uffda\012\uffda\013\uffda\014\uffda\021" +
    "\uffda\031\uffda\035\uffda\060\uffda\001\002\000\004\006\074" +
    "\001\002\000\006\007\uffd4\066\075\001\002\000\004\005" +
    "\114\001\002\000\006\007\uffd3\013\112\001\002\000\004" +
    "\007\100\001\002\000\004\010\101\001\002\000\022\006" +
    "\103\011\021\015\014\020\012\023\006\024\005\026\004" +
    "\027\057\001\002\000\004\011\uffce\001\002\000\022\006" +
    "\103\011\021\015\014\020\012\023\006\024\005\026\004" +
    "\027\057\001\002\000\004\011\105\001\002\000\116\006" +
    "\022\011\021\015\014\017\013\020\012\022\010\023\006" +
    "\024\005\026\004\027\057\030\053\032\052\033\051\034" +
    "\050\036\047\037\046\040\044\041\043\042\041\043\040" +
    "\044\037\045\036\046\035\047\034\050\033\051\032\052" +
    "\031\053\030\054\020\055\017\056\016\057\015\061\011" +
    "\062\007\063\027\064\026\065\056\066\023\001\002\000" +
    "\004\012\107\001\002\000\026\002\ufff2\004\ufff2\007\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\021\ufff2\031\ufff2\035\ufff2\060" +
    "\ufff2\001\002\000\004\007\111\001\002\000\132\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\006\007" +
    "\uffd4\066\075\001\002\000\004\007\uffd2\001\002\000\022" +
    "\006\103\011\021\015\014\020\012\023\006\024\005\026" +
    "\004\027\057\001\002\000\006\007\uffc9\013\uffc9\001\002" +
    "\000\004\015\117\001\002\000\022\006\103\011\021\015" +
    "\014\020\012\023\006\024\005\026\004\027\057\001\002" +
    "\000\004\013\121\001\002\000\022\006\103\011\021\015" +
    "\014\020\012\023\006\024\005\026\004\027\057\001\002" +
    "\000\004\016\123\001\002\000\004\006\124\001\002\000" +
    "\006\006\125\007\uffcc\001\002\000\116\006\022\011\021" +
    "\015\014\017\013\020\012\022\010\023\006\024\005\026" +
    "\004\027\057\030\053\032\052\033\051\034\050\036\047" +
    "\037\046\040\044\041\043\042\041\043\040\044\037\045" +
    "\036\046\035\047\034\050\033\051\032\052\031\053\030" +
    "\054\020\055\017\056\016\057\015\061\011\062\007\063" +
    "\027\064\026\065\056\066\023\001\002\000\006\007\uffcb" +
    "\013\131\001\002\000\004\007\130\001\002\000\026\002" +
    "\uffeb\004\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\021\uffeb" +
    "\031\uffeb\035\uffeb\060\uffeb\001\002\000\006\006\125\007" +
    "\uffcc\001\002\000\004\007\uffca\001\002\000\004\014\134" +
    "\001\002\000\116\006\022\011\021\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\004\007\136\001\002\000\006\007" +
    "\uffcd\013\uffcd\001\002\000\120\006\022\007\uffff\011\021" +
    "\015\014\017\013\020\012\022\010\023\006\024\005\026" +
    "\004\027\057\030\053\032\052\033\051\034\050\036\047" +
    "\037\046\040\044\041\043\042\041\043\040\044\037\045" +
    "\036\046\035\047\034\050\033\051\032\052\031\053\030" +
    "\054\020\055\017\056\016\057\015\061\011\062\007\063" +
    "\027\064\026\065\056\066\023\001\002\000\004\007\141" +
    "\001\002\000\026\002\uffde\004\uffde\007\uffde\012\uffde\013" +
    "\uffde\014\uffde\021\uffde\031\uffde\035\uffde\060\uffde\001\002" +
    "\000\116\006\022\011\021\015\014\017\013\020\012\022" +
    "\010\023\006\024\005\026\004\027\057\030\053\032\052" +
    "\033\051\034\050\036\047\037\046\040\044\041\043\042" +
    "\041\043\040\044\037\045\036\046\035\047\034\050\033" +
    "\051\032\052\031\053\030\054\020\055\017\056\016\057" +
    "\015\061\011\062\007\063\027\064\026\065\056\066\023" +
    "\001\002\000\004\013\144\001\002\000\116\006\022\011" +
    "\021\015\014\017\013\020\012\022\010\023\006\024\005" +
    "\026\004\027\057\030\053\032\052\033\051\034\050\036" +
    "\047\037\046\040\044\041\043\042\041\043\040\044\037" +
    "\045\036\046\035\047\034\050\033\051\032\052\031\053" +
    "\030\054\020\055\017\056\016\057\015\061\011\062\007" +
    "\063\027\064\026\065\056\066\023\001\002\000\004\007" +
    "\146\001\002\000\026\002\uffdd\004\uffdd\007\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\021\uffdd\031\uffdd\035\uffdd\060\uffdd\001" +
    "\002\000\124\002\uffff\006\022\007\uffff\011\021\012\uffff" +
    "\015\014\017\013\020\012\022\010\023\006\024\005\026" +
    "\004\027\057\030\053\032\052\033\051\034\050\036\047" +
    "\037\046\040\044\041\043\042\041\043\040\044\037\045" +
    "\036\046\035\047\034\050\033\051\032\052\031\053\030" +
    "\054\020\055\017\056\016\057\015\061\011\062\007\063" +
    "\027\064\026\065\056\066\023\001\002\000\124\002\uffff" +
    "\006\022\007\uffff\011\021\012\uffff\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\010\002\ufffa\007\ufffa\012\ufffa\001" +
    "\002\000\010\002\ufffd\007\ufffd\012\ufffd\001\002\000\116" +
    "\006\022\011\021\015\014\017\013\020\012\022\010\023" +
    "\006\024\005\026\004\027\057\030\053\032\052\033\051" +
    "\034\050\036\047\037\046\040\044\041\043\042\041\043" +
    "\040\044\037\045\036\046\035\047\034\050\033\051\032" +
    "\052\031\053\030\054\020\055\017\056\016\057\015\061" +
    "\011\062\007\063\027\064\026\065\056\066\023\001\002" +
    "\000\004\007\155\001\002\000\026\002\uffe8\004\uffe8\007" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\021\uffe8\031\uffe8\035\uffe8" +
    "\060\uffe8\001\002\000\116\006\022\011\021\015\014\017" +
    "\013\020\012\022\010\023\006\024\005\026\004\027\057" +
    "\030\053\032\052\033\051\034\050\036\047\037\046\040" +
    "\044\041\043\042\041\043\040\044\037\045\036\046\035" +
    "\047\034\050\033\051\032\052\031\053\030\054\020\055" +
    "\017\056\016\057\015\061\011\062\007\063\027\064\026" +
    "\065\056\066\023\001\002\000\004\013\160\001\002\000" +
    "\116\006\022\011\021\015\014\017\013\020\012\022\010" +
    "\023\006\024\005\026\004\027\057\030\053\032\052\033" +
    "\051\034\050\036\047\037\046\040\044\041\043\042\041" +
    "\043\040\044\037\045\036\046\035\047\034\050\033\051" +
    "\032\052\031\053\030\054\020\055\017\056\016\057\015" +
    "\061\011\062\007\063\027\064\026\065\056\066\023\001" +
    "\002\000\004\007\162\001\002\000\026\002\uffe6\004\uffe6" +
    "\007\uffe6\012\uffe6\013\uffe6\014\uffe6\021\uffe6\031\uffe6\035" +
    "\uffe6\060\uffe6\001\002\000\004\060\164\001\002\000\116" +
    "\006\022\011\021\015\014\017\013\020\012\022\010\023" +
    "\006\024\005\026\004\027\057\030\053\032\052\033\051" +
    "\034\050\036\047\037\046\040\044\041\043\042\041\043" +
    "\040\044\037\045\036\046\035\047\034\050\033\051\032" +
    "\052\031\053\030\054\020\055\017\056\016\057\015\061" +
    "\011\062\007\063\027\064\026\065\056\066\023\001\002" +
    "\000\004\035\166\001\002\000\116\006\022\011\021\015" +
    "\014\017\013\020\012\022\010\023\006\024\005\026\004" +
    "\027\057\030\053\032\052\033\051\034\050\036\047\037" +
    "\046\040\044\041\043\042\041\043\040\044\037\045\036" +
    "\046\035\047\034\050\033\051\032\052\031\053\030\054" +
    "\020\055\017\056\016\057\015\061\011\062\007\063\027" +
    "\064\026\065\056\066\023\001\002\000\026\002\uffed\004" +
    "\uffed\007\uffed\012\uffed\013\uffed\014\uffed\021\uffed\031\uffed" +
    "\035\uffed\060\uffed\001\002\000\116\006\022\011\021\015" +
    "\014\017\013\020\012\022\010\023\006\024\005\026\004" +
    "\027\057\030\053\032\052\033\051\034\050\036\047\037" +
    "\046\040\044\041\043\042\041\043\040\044\037\045\036" +
    "\046\035\047\034\050\033\051\032\052\031\053\030\054" +
    "\020\055\017\056\016\057\015\061\011\062\007\063\027" +
    "\064\026\065\056\066\023\001\002\000\004\013\172\001" +
    "\002\000\116\006\022\011\021\015\014\017\013\020\012" +
    "\022\010\023\006\024\005\026\004\027\057\030\053\032" +
    "\052\033\051\034\050\036\047\037\046\040\044\041\043" +
    "\042\041\043\040\044\037\045\036\046\035\047\034\050" +
    "\033\051\032\052\031\053\030\054\020\055\017\056\016" +
    "\057\015\061\011\062\007\063\027\064\026\065\056\066" +
    "\023\001\002\000\004\007\174\001\002\000\026\002\uffdb" +
    "\004\uffdb\007\uffdb\012\uffdb\013\uffdb\014\uffdb\021\uffdb\031" +
    "\uffdb\035\uffdb\060\uffdb\001\002\000\116\006\022\011\021" +
    "\015\014\017\013\020\012\022\010\023\006\024\005\026" +
    "\004\027\057\030\053\032\052\033\051\034\050\036\047" +
    "\037\046\040\044\041\043\042\041\043\040\044\037\045" +
    "\036\046\035\047\034\050\033\051\032\052\031\053\030" +
    "\054\020\055\017\056\016\057\015\061\011\062\007\063" +
    "\027\064\026\065\056\066\023\001\002\000\004\013\177" +
    "\001\002\000\116\006\022\011\021\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\004\007\201\001\002\000\026\002" +
    "\uffdc\004\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\021\uffdc" +
    "\031\uffdc\035\uffdc\060\uffdc\001\002\000\006\007\uffd4\066" +
    "\075\001\002\000\004\007\204\001\002\000\004\010\205" +
    "\001\002\000\022\006\103\011\021\015\014\020\012\023" +
    "\006\024\005\026\004\027\057\001\002\000\004\011\207" +
    "\001\002\000\116\006\022\011\021\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\004\012\211\001\002\000\026\002" +
    "\uffec\004\uffec\007\uffec\012\uffec\013\uffec\014\uffec\021\uffec" +
    "\031\uffec\035\uffec\060\uffec\001\002\000\116\006\022\011" +
    "\021\015\014\017\013\020\012\022\010\023\006\024\005" +
    "\026\004\027\057\030\053\032\052\033\051\034\050\036" +
    "\047\037\046\040\044\041\043\042\041\043\040\044\037" +
    "\045\036\046\035\047\034\050\033\051\032\052\031\053" +
    "\030\054\020\055\017\056\016\057\015\061\011\062\007" +
    "\063\027\064\026\065\056\066\023\001\002\000\004\007" +
    "\214\001\002\000\026\002\uffe4\004\uffe4\007\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\021\uffe4\031\uffe4\035\uffe4\060\uffe4\001" +
    "\002\000\120\006\022\007\uffff\011\021\015\014\017\013" +
    "\020\012\022\010\023\006\024\005\026\004\027\057\030" +
    "\053\032\052\033\051\034\050\036\047\037\046\040\044" +
    "\041\043\042\041\043\040\044\037\045\036\046\035\047" +
    "\034\050\033\051\032\052\031\053\030\054\020\055\017" +
    "\056\016\057\015\061\011\062\007\063\027\064\026\065" +
    "\056\066\023\001\002\000\004\007\217\001\002\000\026" +
    "\002\uffe0\004\uffe0\007\uffe0\012\uffe0\013\uffe0\014\uffe0\021" +
    "\uffe0\031\uffe0\035\uffe0\060\uffe0\001\002\000\120\006\022" +
    "\007\uffff\011\021\015\014\017\013\020\012\022\010\023" +
    "\006\024\005\026\004\027\057\030\053\032\052\033\051" +
    "\034\050\036\047\037\046\040\044\041\043\042\041\043" +
    "\040\044\037\045\036\046\035\047\034\050\033\051\032" +
    "\052\031\053\030\054\020\055\017\056\016\057\015\061" +
    "\011\062\007\063\027\064\026\065\056\066\023\001\002" +
    "\000\004\007\222\001\002\000\026\002\uffdf\004\uffdf\007" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\021\uffdf\031\uffdf\035\uffdf" +
    "\060\uffdf\001\002\000\116\006\022\011\021\015\014\017" +
    "\013\020\012\022\010\023\006\024\005\026\004\027\057" +
    "\030\053\032\052\033\051\034\050\036\047\037\046\040" +
    "\044\041\043\042\041\043\040\044\037\045\036\046\035" +
    "\047\034\050\033\051\032\052\031\053\030\054\020\055" +
    "\017\056\016\057\015\061\011\062\007\063\027\064\026" +
    "\065\056\066\023\001\002\000\004\013\225\001\002\000" +
    "\116\006\022\011\021\015\014\017\013\020\012\022\010" +
    "\023\006\024\005\026\004\027\057\030\053\032\052\033" +
    "\051\034\050\036\047\037\046\040\044\041\043\042\041" +
    "\043\040\044\037\045\036\046\035\047\034\050\033\051" +
    "\032\052\031\053\030\054\020\055\017\056\016\057\015" +
    "\061\011\062\007\063\027\064\026\065\056\066\023\001" +
    "\002\000\004\007\227\001\002\000\026\002\uffd9\004\uffd9" +
    "\007\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\031\uffd9\035" +
    "\uffd9\060\uffd9\001\002\000\120\006\022\007\uffff\011\021" +
    "\015\014\017\013\020\012\022\010\023\006\024\005\026" +
    "\004\027\057\030\053\032\052\033\051\034\050\036\047" +
    "\037\046\040\044\041\043\042\041\043\040\044\037\045" +
    "\036\046\035\047\034\050\033\051\032\052\031\053\030" +
    "\054\020\055\017\056\016\057\015\061\011\062\007\063" +
    "\027\064\026\065\056\066\023\001\002\000\004\007\232" +
    "\001\002\000\026\002\uffe1\004\uffe1\007\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\021\uffe1\031\uffe1\035\uffe1\060\uffe1\001\002" +
    "\000\026\002\uffd7\004\uffd7\007\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\021\uffd7\031\uffd7\035\uffd7\060\uffd7\001\002\000\022" +
    "\006\103\011\021\015\014\020\012\023\006\024\005\026" +
    "\004\027\057\001\002\000\130\006\uffba\007\uffba\011\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\001\002\000\004\002\001\001\002\000\120\006" +
    "\022\007\uffc7\011\021\015\014\017\013\020\012\022\010" +
    "\023\006\024\005\026\004\027\057\030\053\032\052\033" +
    "\051\034\050\036\047\037\046\040\044\041\043\042\041" +
    "\043\040\044\037\045\036\046\035\047\034\050\033\051" +
    "\032\052\031\053\030\054\020\055\017\056\016\057\015" +
    "\061\011\062\007\063\027\064\026\065\056\066\243\001" +
    "\002\000\004\066\241\001\002\000\026\002\uffee\004\uffee" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\021\uffee\031\uffee\035" +
    "\uffee\060\uffee\001\002\000\026\002\uffc6\004\uffc6\007\uffc6" +
    "\012\uffc6\013\250\014\uffc6\021\uffc6\031\uffc6\035\uffc6\060" +
    "\uffc6\001\002\000\030\002\ufff3\004\ufff3\006\237\007\ufff3" +
    "\012\ufff3\013\ufff3\014\240\021\ufff3\031\ufff3\035\ufff3\060" +
    "\ufff3\001\002\000\004\007\247\001\002\000\026\002\uffc3" +
    "\004\uffc3\007\uffc3\012\uffc3\013\uffc3\014\uffc3\021\uffc3\031" +
    "\uffc3\035\uffc3\060\uffc3\001\002\000\026\002\uffc8\004\uffc8" +
    "\007\uffc8\012\uffc8\013\uffc8\014\uffc8\021\uffc8\031\uffc8\035" +
    "\uffc8\060\uffc8\001\002\000\026\002\uffef\004\uffef\007\uffef" +
    "\012\uffef\013\uffef\014\uffef\021\uffef\031\uffef\035\uffef\060" +
    "\uffef\001\002\000\142\002\uffc7\004\uffc7\006\022\007\uffc7" +
    "\011\021\012\uffc7\013\uffc7\014\uffc7\015\014\017\013\020" +
    "\012\021\uffc7\022\010\023\006\024\005\026\004\027\057" +
    "\030\053\031\uffc7\032\052\033\051\034\050\035\uffc7\036" +
    "\047\037\046\040\044\041\043\042\041\043\040\044\037" +
    "\045\036\046\035\047\034\050\033\051\032\052\031\053" +
    "\030\054\020\055\017\056\016\057\015\060\uffc7\061\011" +
    "\062\007\063\027\064\026\065\056\066\243\001\002\000" +
    "\026\002\uffc5\004\uffc5\007\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\021\uffc5\031\uffc5\035\uffc5\060\uffc5\001\002\000\004\007" +
    "\254\001\002\000\006\007\111\020\060\001\002\000\026" +
    "\002\ufff1\004\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1\021" +
    "\ufff1\031\ufff1\035\ufff1\060\ufff1\001\002\000\004\012\256" +
    "\001\002\000\130\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001" +
    "\002\000\004\006\260\001\002\000\004\063\261\001\002" +
    "\000\004\007\262\001\002\000\026\002\uffe3\004\uffe3\007" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\021\uffe3\031\uffe3\035\uffe3" +
    "\060\uffe3\001\002\000\004\005\264\001\002\000\024\006" +
    "\103\011\021\015\014\020\012\023\006\024\005\026\004" +
    "\027\057\066\266\001\002\000\116\006\022\011\021\015" +
    "\014\017\013\020\012\022\010\023\006\024\005\026\004" +
    "\027\057\030\053\032\052\033\051\034\050\036\047\037" +
    "\046\040\044\041\043\042\041\043\040\044\037\045\036" +
    "\046\035\047\034\050\033\051\032\052\031\053\030\054" +
    "\020\055\017\056\016\057\015\061\011\062\007\063\027" +
    "\064\026\065\056\066\023\001\002\000\142\002\uffc7\004" +
    "\uffc7\006\022\007\uffc7\011\021\012\uffc7\013\uffc7\014\uffc7" +
    "\015\014\017\013\020\012\021\uffc7\022\010\023\006\024" +
    "\005\026\004\027\057\030\053\031\uffc7\032\052\033\051" +
    "\034\050\035\uffc7\036\047\037\046\040\044\041\043\042" +
    "\041\043\040\044\037\045\036\046\035\047\034\050\033" +
    "\051\032\052\031\053\030\054\020\055\017\056\016\057" +
    "\015\060\uffc7\061\011\062\007\063\027\064\026\065\056" +
    "\066\243\001\002\000\026\002\ufff8\004\ufff8\007\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\021\ufff8\031\ufff8\035\ufff8\060\ufff8" +
    "\001\002\000\026\002\ufff9\004\ufff9\007\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\021\ufff9\031\ufff9\035\ufff9\060\ufff9\001\002" +
    "\000\004\006\272\001\002\000\006\007\uffd4\066\075\001" +
    "\002\000\004\007\274\001\002\000\026\002\ufff0\004\ufff0" +
    "\007\ufff0\012\ufff0\013\ufff0\014\ufff0\021\ufff0\031\ufff0\035" +
    "\ufff0\060\ufff0\001\002\000\004\016\276\001\002\000\132" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000" +
    "\004\066\300\001\002\000\004\013\301\001\002\000\004" +
    "\006\125\001\002\000\004\007\303\001\002\000\026\002" +
    "\uffea\004\uffea\007\uffea\012\uffea\013\uffea\014\uffea\021\uffea" +
    "\031\uffea\035\uffea\060\uffea\001\002\000\004\021\305\001" +
    "\002\000\132\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\001\002\000\116\006\022\011\021\015\014\017\013\020" +
    "\012\022\010\023\006\024\005\026\004\027\057\030\053" +
    "\032\052\033\051\034\050\036\047\037\046\040\044\041" +
    "\043\042\041\043\040\044\037\045\036\046\035\047\034" +
    "\050\033\051\032\052\031\053\030\054\020\055\017\056" +
    "\016\057\015\061\011\062\007\063\027\064\026\065\056" +
    "\066\023\001\002\000\004\013\310\001\002\000\116\006" +
    "\022\011\021\015\014\017\013\020\012\022\010\023\006" +
    "\024\005\026\004\027\057\030\053\032\052\033\051\034" +
    "\050\036\047\037\046\040\044\041\043\042\041\043\040" +
    "\044\037\045\036\046\035\047\034\050\033\051\032\052" +
    "\031\053\030\054\020\055\017\056\016\057\015\061\011" +
    "\062\007\063\027\064\026\065\056\066\023\001\002\000" +
    "\004\013\312\001\002\000\116\006\022\011\021\015\014" +
    "\017\013\020\012\022\010\023\006\024\005\026\004\027" +
    "\057\030\053\032\052\033\051\034\050\036\047\037\046" +
    "\040\044\041\043\042\041\043\040\044\037\045\036\046" +
    "\035\047\034\050\033\051\032\052\031\053\030\054\020" +
    "\055\017\056\016\057\015\061\011\062\007\063\027\064" +
    "\026\065\056\066\023\001\002\000\004\007\314\001\002" +
    "\000\026\002\uffe5\004\uffe5\007\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\021\uffe5\031\uffe5\035\uffe5\060\uffe5\001\002\000\004" +
    "\031\316\001\002\000\004\006\317\001\002\000\116\006" +
    "\022\011\021\015\014\017\013\020\012\022\010\023\006" +
    "\024\005\026\004\027\057\030\053\032\052\033\051\034" +
    "\050\036\047\037\046\040\044\041\043\042\041\043\040" +
    "\044\037\045\036\046\035\047\034\050\033\051\032\052" +
    "\031\053\030\054\020\055\017\056\016\057\015\061\011" +
    "\062\007\063\027\064\026\065\056\066\023\001\002\000" +
    "\004\007\321\001\002\000\026\002\uffe2\004\uffe2\007\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\021\uffe2\031\uffe2\035\uffe2\060" +
    "\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\016\002\023\003\041\004\044\005\054\016" +
    "\024\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\314\005\054\016\024\017" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\024\017\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\024\017\254\001\001\000" +
    "\012\004\251\005\054\016\024\017\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\162\005\054\016\024\017\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\060\005\054\016\024" +
    "\017\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\063\004\044\005\054\016\024\017\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\066\005" +
    "\054\016\024\017\053\001\001\000\002\001\001\000\012" +
    "\004\070\005\054\016\024\017\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\076" +
    "\012\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\103\016\024" +
    "\017\101\001\001\000\002\001\001\000\006\016\024\017" +
    "\107\001\001\000\002\001\001\000\012\004\105\005\054" +
    "\016\024\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\112" +
    "\012\075\001\001\000\002\001\001\000\006\016\024\017" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\024\017\117\001\001\000\002\001\001\000\006\016" +
    "\024\017\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\125\011\126\001\001\000\012\004\132\005" +
    "\054\016\024\017\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\125\011\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\134" +
    "\005\054\016\024\017\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\137\004\044\005\054\016\024" +
    "\017\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\142\005\054\016\024\017\053\001\001\000\002" +
    "\001\001\000\012\004\144\005\054\016\024\017\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\151" +
    "\004\044\005\054\016\024\017\053\001\001\000\014\003" +
    "\150\004\044\005\054\016\024\017\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\153\005\054\016" +
    "\024\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\156\005\054\016\024\017\053\001\001\000" +
    "\002\001\001\000\012\004\160\005\054\016\024\017\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\164\005\054\016\024\017\053\001\001" +
    "\000\002\001\001\000\012\004\166\005\054\016\024\017" +
    "\053\001\001\000\002\001\001\000\012\004\170\005\054" +
    "\016\024\017\053\001\001\000\002\001\001\000\012\004" +
    "\172\005\054\016\024\017\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\175\005\054\016\024\017" +
    "\053\001\001\000\002\001\001\000\012\004\177\005\054" +
    "\016\024\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\202\012\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\205\016\024\017\101\001" +
    "\001\000\002\001\001\000\012\004\207\005\054\016\024" +
    "\017\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\212\005\054\016\024\017\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\215\004\044\005" +
    "\054\016\024\017\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\220\004\044\005\054\016\024\017" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\223\005\054\016\024\017\053\001\001\000\002\001" +
    "\001\000\012\004\225\005\054\016\024\017\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\230\004" +
    "\044\005\054\016\024\017\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\024\017" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\244\005\054\013\243\014\245\015\241\016\024\017" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\244" +
    "\005\054\014\250\015\241\016\024\017\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\024\017\264\001\001\000" +
    "\012\004\267\005\054\016\024\017\053\001\001\000\020" +
    "\004\244\005\054\013\266\014\245\015\241\016\024\017" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\272\012\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\306\005\054\016\024\017" +
    "\053\001\001\000\002\001\001\000\012\004\310\005\054" +
    "\016\024\017\053\001\001\000\002\001\001\000\012\004" +
    "\312\005\054\016\024\017\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\317\005\054\016\024\017\053\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_7 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_42 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_42 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_22 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_43 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _IDENT_ _SYMB_2 Args _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Args p_3 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_8 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_30 Expr _SYMB_44 Expr _SYMB_25 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_33 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= _SYMB_23 _IDENT_ _SYMB_9 Type _SYMB_7 Type _SYMB_10 _SYMB_2 ListPair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Type p_6 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListPair p_9 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictConstructor(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_11 _SYMB_2 _IDENT_ _SYMB_7 Pair _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Pair p_5 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictSet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Type _SYMB_12 Expr _SYMB_13 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_28 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_28 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Last(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_29 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayGet(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_14 _SYMB_2 Expr _SYMB_7 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_7 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArraySet(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_34 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayLength(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= _SYMB_40 _SYMB_17 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= _SYMB_46 Expr _SYMB_21 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_38 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_35 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_36 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_24 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_26 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_32 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_31 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= _SYMB_20 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= _SYMB_37 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= _SYMB_41 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= _SYMB_39 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bool ::= _SYMB_45 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bool ::= _SYMB_27 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pair ::= _SYMB_2 Expr _SYMB_8 Expr _SYMB_3 
            {
              fafl.Absyn.Pair RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.DictPair(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pair",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListPair ::= 
            {
              fafl.Absyn.ListPair RESULT =null;
		 RESULT = new fafl.Absyn.ListPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListPair ::= Pair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListPair ::= Pair _SYMB_7 ListPair 
            {
              fafl.Absyn.ListPair RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Pair p_1 = (fafl.Absyn.Pair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListPair p_3 = (fafl.Absyn.ListPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPair",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListArg ::= Arg _SYMB_7 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type1 ::= _SYMB_15 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type1 ::= _SYMB_18 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Type1 ::= _SYMB_16 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Type1 ::= _SYMB_19 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type1 ::= _SYMB_12 Type _SYMB_13 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type1 ::= _SYMB_9 _IDENT_ _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
