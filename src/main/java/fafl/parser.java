
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fafl;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\003\000\002\003\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\014\000\002\004\005\000\002\004\007\000\002\004\006" +
    "\000\002\004\005\000\002\004\010\000\002\004\013\000" +
    "\002\004\011\000\002\004\006\000\002\004\010\000\002" +
    "\004\006\000\002\004\007\000\002\004\010\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\003\000\002" +
    "\004\004\000\002\005\003\000\002\005\003\000\002\006" +
    "\002\000\002\006\003\000\002\006\005\000\002\006\002" +
    "\000\002\006\003\000\002\006\005\000\002\007\003\000" +
    "\002\010\005\000\002\011\003\000\002\012\002\000\002" +
    "\012\003\000\002\012\005\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\112\002\uffff\006\017\011\016\015\013\017" +
    "\012\021\010\022\007\024\006\025\005\026\004\030\051" +
    "\031\050\033\047\034\046\035\045\036\044\037\043\040" +
    "\041\041\040\042\036\043\035\044\034\045\033\046\032" +
    "\047\031\050\030\051\027\052\026\053\025\054\015\056" +
    "\014\057\011\060\024\061\023\062\054\063\020\001\002" +
    "\000\004\006\255\001\002\000\122\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000" +
    "\122\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\001\002\000\122\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002\000\122" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\015" +
    "\uffca\016\uffca\017\uffca\021\uffca\022\uffca\024\uffca\025\uffca" +
    "\026\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\001\002\000\110\006\017\011\016\015\013\017" +
    "\012\021\010\022\007\024\006\025\005\026\004\030\051" +
    "\031\050\033\047\034\046\035\045\036\044\037\043\040" +
    "\041\041\040\042\036\043\035\044\034\045\033\046\032" +
    "\047\031\050\030\051\027\052\026\053\025\054\015\056" +
    "\014\057\011\060\024\061\023\062\054\063\020\001\002" +
    "\000\004\063\246\001\002\000\022\006\073\011\016\015" +
    "\013\017\012\021\010\022\007\024\006\025\005\001\002" +
    "\000\024\002\uffda\004\uffda\007\uffda\012\uffda\013\uffda\016" +
    "\uffda\027\uffda\032\uffda\055\uffda\001\002\000\004\063\240" +
    "\001\002\000\022\006\073\011\016\015\013\017\012\021" +
    "\010\022\007\024\006\025\005\001\002\000\110\006\017" +
    "\011\016\015\013\017\012\021\010\022\007\024\006\025" +
    "\005\026\004\030\051\031\050\033\047\034\046\035\045" +
    "\036\044\037\043\040\041\041\040\042\036\043\035\044" +
    "\034\045\033\046\032\047\031\050\030\051\027\052\026" +
    "\053\025\054\015\056\014\057\011\060\024\061\023\062" +
    "\054\063\020\001\002\000\030\002\ufff3\004\ufff3\006\220" +
    "\007\ufff3\012\ufff3\013\ufff3\014\221\016\ufff3\027\ufff3\032" +
    "\ufff3\055\ufff3\001\002\000\004\002\232\001\002\000\122" +
    "\006\uffc1\007\uffc1\010\230\011\uffc1\012\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\001\002\000\024\002\ufff7\004\ufff7\007\ufff7\012" +
    "\ufff7\013\ufff7\016\ufff7\027\ufff7\032\ufff7\055\ufff7\001\002" +
    "\000\024\002\ufff4\004\ufff4\007\ufff4\012\ufff4\013\ufff4\016" +
    "\ufff4\027\ufff4\032\ufff4\055\ufff4\001\002\000\004\063\207" +
    "\001\002\000\024\002\uffdc\004\uffdc\007\uffdc\012\uffdc\013" +
    "\uffdc\016\uffdc\027\uffdc\032\uffdc\055\uffdc\001\002\000\004" +
    "\023\203\001\002\000\004\060\202\001\002\000\004\006" +
    "\177\001\002\000\004\006\172\001\002\000\004\006\167" +
    "\001\002\000\004\006\164\001\002\000\004\006\161\001" +
    "\002\000\004\006\151\001\002\000\004\002\000\001\002" +
    "\000\004\006\144\001\002\000\004\006\137\001\002\000" +
    "\014\002\ufffe\004\133\007\ufffe\012\ufffe\013\134\001\002" +
    "\000\110\006\017\011\016\015\013\017\012\021\010\022" +
    "\007\024\006\025\005\026\004\030\051\031\050\033\047" +
    "\034\046\035\045\036\044\037\043\040\041\041\040\042" +
    "\036\043\035\044\034\045\033\046\032\047\031\050\030" +
    "\051\027\052\026\053\025\054\015\056\014\057\011\060" +
    "\024\061\023\062\054\063\020\001\002\000\004\006\121" +
    "\001\002\000\004\006\116\001\002\000\024\002\uffd9\004" +
    "\uffd9\007\uffd9\012\uffd9\013\uffd9\016\uffd9\027\uffd9\032\uffd9" +
    "\055\uffd9\001\002\000\004\006\111\001\002\000\004\006" +
    "\106\001\002\000\004\063\063\001\002\000\004\015\055" +
    "\001\002\000\024\002\ufff5\004\ufff5\007\ufff5\012\ufff5\013" +
    "\ufff5\016\ufff5\027\ufff5\032\ufff5\055\ufff5\001\002\000\024" +
    "\002\ufff6\004\ufff6\007\ufff6\012\ufff6\013\ufff6\016\ufff6\027" +
    "\ufff6\032\ufff6\055\ufff6\001\002\000\110\006\017\011\016" +
    "\015\013\017\012\021\010\022\007\024\006\025\005\026" +
    "\004\030\051\031\050\033\047\034\046\035\045\036\044" +
    "\037\043\040\041\041\040\042\036\043\035\044\034\045" +
    "\033\046\032\047\031\050\030\051\027\052\026\053\025" +
    "\054\015\056\014\057\011\060\024\061\023\062\054\063" +
    "\020\001\002\000\004\016\057\001\002\000\004\011\060" +
    "\001\002\000\112\006\017\011\016\012\uffff\015\013\017" +
    "\012\021\010\022\007\024\006\025\005\026\004\030\051" +
    "\031\050\033\047\034\046\035\045\036\044\037\043\040" +
    "\041\041\040\042\036\043\035\044\034\045\033\046\032" +
    "\047\031\050\030\051\027\052\026\053\025\054\015\056" +
    "\014\057\011\060\024\061\023\062\054\063\020\001\002" +
    "\000\004\012\062\001\002\000\024\002\uffeb\004\uffeb\007" +
    "\uffeb\012\uffeb\013\uffeb\016\uffeb\027\uffeb\032\uffeb\055\uffeb" +
    "\001\002\000\004\006\064\001\002\000\006\007\uffd8\063" +
    "\065\001\002\000\004\005\104\001\002\000\006\007\uffd7" +
    "\013\102\001\002\000\004\007\070\001\002\000\004\010" +
    "\071\001\002\000\022\006\073\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\001\002\000\004\011" +
    "\uffd2\001\002\000\022\006\073\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\001\002\000\004\011" +
    "\075\001\002\000\110\006\017\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\026\004\030\051\031" +
    "\050\033\047\034\046\035\045\036\044\037\043\040\041" +
    "\041\040\042\036\043\035\044\034\045\033\046\032\047" +
    "\031\050\030\051\027\052\026\053\025\054\015\056\014" +
    "\057\011\060\024\061\023\062\054\063\020\001\002\000" +
    "\004\012\077\001\002\000\024\002\ufff2\004\ufff2\007\ufff2" +
    "\012\ufff2\013\ufff2\016\ufff2\027\ufff2\032\ufff2\055\ufff2\001" +
    "\002\000\004\007\101\001\002\000\122\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002" +
    "\000\006\007\uffd8\063\065\001\002\000\004\007\uffd6\001" +
    "\002\000\022\006\073\011\016\015\013\017\012\021\010" +
    "\022\007\024\006\025\005\001\002\000\006\007\uffd1\013" +
    "\uffd1\001\002\000\112\006\017\007\uffff\011\016\015\013" +
    "\017\012\021\010\022\007\024\006\025\005\026\004\030" +
    "\051\031\050\033\047\034\046\035\045\036\044\037\043" +
    "\040\041\041\040\042\036\043\035\044\034\045\033\046" +
    "\032\047\031\050\030\051\027\052\026\053\025\054\015" +
    "\056\014\057\011\060\024\061\023\062\054\063\020\001" +
    "\002\000\004\007\110\001\002\000\024\002\uffe2\004\uffe2" +
    "\007\uffe2\012\uffe2\013\uffe2\016\uffe2\027\uffe2\032\uffe2\055" +
    "\uffe2\001\002\000\110\006\017\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\026\004\030\051\031" +
    "\050\033\047\034\046\035\045\036\044\037\043\040\041" +
    "\041\040\042\036\043\035\044\034\045\033\046\032\047" +
    "\031\050\030\051\027\052\026\053\025\054\015\056\014" +
    "\057\011\060\024\061\023\062\054\063\020\001\002\000" +
    "\004\013\113\001\002\000\110\006\017\011\016\015\013" +
    "\017\012\021\010\022\007\024\006\025\005\026\004\030" +
    "\051\031\050\033\047\034\046\035\045\036\044\037\043" +
    "\040\041\041\040\042\036\043\035\044\034\045\033\046" +
    "\032\047\031\050\030\051\027\052\026\053\025\054\015" +
    "\056\014\057\011\060\024\061\023\062\054\063\020\001" +
    "\002\000\004\007\115\001\002\000\024\002\uffe1\004\uffe1" +
    "\007\uffe1\012\uffe1\013\uffe1\016\uffe1\027\uffe1\032\uffe1\055" +
    "\uffe1\001\002\000\004\063\117\001\002\000\004\007\120" +
    "\001\002\000\024\002\uffea\004\uffea\007\uffea\012\uffea\013" +
    "\uffea\016\uffea\027\uffea\032\uffea\055\uffea\001\002\000\004" +
    "\063\122\001\002\000\004\013\123\001\002\000\110\006" +
    "\017\011\016\015\013\017\012\021\010\022\007\024\006" +
    "\025\005\026\004\030\051\031\050\033\047\034\046\035" +
    "\045\036\044\037\043\040\041\041\040\042\036\043\035" +
    "\044\034\045\033\046\032\047\031\050\030\051\027\052" +
    "\026\053\025\054\015\056\014\057\011\060\024\061\023" +
    "\062\054\063\020\001\002\000\004\007\125\001\002\000" +
    "\024\002\uffe9\004\uffe9\007\uffe9\012\uffe9\013\uffe9\016\uffe9" +
    "\027\uffe9\032\uffe9\055\uffe9\001\002\000\004\055\127\001" +
    "\002\000\110\006\017\011\016\015\013\017\012\021\010" +
    "\022\007\024\006\025\005\026\004\030\051\031\050\033" +
    "\047\034\046\035\045\036\044\037\043\040\041\041\040" +
    "\042\036\043\035\044\034\045\033\046\032\047\031\050" +
    "\030\051\027\052\026\053\025\054\015\056\014\057\011" +
    "\060\024\061\023\062\054\063\020\001\002\000\004\032" +
    "\131\001\002\000\110\006\017\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\026\004\030\051\031" +
    "\050\033\047\034\046\035\045\036\044\037\043\040\041" +
    "\041\040\042\036\043\035\044\034\045\033\046\032\047" +
    "\031\050\030\051\027\052\026\053\025\054\015\056\014" +
    "\057\011\060\024\061\023\062\054\063\020\001\002\000" +
    "\024\002\uffed\004\uffed\007\uffed\012\uffed\013\uffed\016\uffed" +
    "\027\uffed\032\uffed\055\uffed\001\002\000\116\002\uffff\006" +
    "\017\007\uffff\011\016\012\uffff\015\013\017\012\021\010" +
    "\022\007\024\006\025\005\026\004\030\051\031\050\033" +
    "\047\034\046\035\045\036\044\037\043\040\041\041\040" +
    "\042\036\043\035\044\034\045\033\046\032\047\031\050" +
    "\030\051\027\052\026\053\025\054\015\056\014\057\011" +
    "\060\024\061\023\062\054\063\020\001\002\000\116\002" +
    "\uffff\006\017\007\uffff\011\016\012\uffff\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\026\004\030\051\031" +
    "\050\033\047\034\046\035\045\036\044\037\043\040\041" +
    "\041\040\042\036\043\035\044\034\045\033\046\032\047" +
    "\031\050\030\051\027\052\026\053\025\054\015\056\014" +
    "\057\011\060\024\061\023\062\054\063\020\001\002\000" +
    "\010\002\ufffa\007\ufffa\012\ufffa\001\002\000\010\002\ufffd" +
    "\007\ufffd\012\ufffd\001\002\000\110\006\017\011\016\015" +
    "\013\017\012\021\010\022\007\024\006\025\005\026\004" +
    "\030\051\031\050\033\047\034\046\035\045\036\044\037" +
    "\043\040\041\041\040\042\036\043\035\044\034\045\033" +
    "\046\032\047\031\050\030\051\027\052\026\053\025\054" +
    "\015\056\014\057\011\060\024\061\023\062\054\063\020" +
    "\001\002\000\004\013\141\001\002\000\110\006\017\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\143\001\002\000\024\002" +
    "\uffdf\004\uffdf\007\uffdf\012\uffdf\013\uffdf\016\uffdf\027\uffdf" +
    "\032\uffdf\055\uffdf\001\002\000\110\006\017\011\016\015" +
    "\013\017\012\021\010\022\007\024\006\025\005\026\004" +
    "\030\051\031\050\033\047\034\046\035\045\036\044\037" +
    "\043\040\041\041\040\042\036\043\035\044\034\045\033" +
    "\046\032\047\031\050\030\051\027\052\026\053\025\054" +
    "\015\056\014\057\011\060\024\061\023\062\054\063\020" +
    "\001\002\000\004\013\146\001\002\000\110\006\017\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\150\001\002\000\024\002" +
    "\uffe0\004\uffe0\007\uffe0\012\uffe0\013\uffe0\016\uffe0\027\uffe0" +
    "\032\uffe0\055\uffe0\001\002\000\006\007\uffd8\063\065\001" +
    "\002\000\004\007\153\001\002\000\004\010\154\001\002" +
    "\000\022\006\073\011\016\015\013\017\012\021\010\022" +
    "\007\024\006\025\005\001\002\000\004\011\156\001\002" +
    "\000\110\006\017\011\016\015\013\017\012\021\010\022" +
    "\007\024\006\025\005\026\004\030\051\031\050\033\047" +
    "\034\046\035\045\036\044\037\043\040\041\041\040\042" +
    "\036\043\035\044\034\045\033\046\032\047\031\050\030" +
    "\051\027\052\026\053\025\054\015\056\014\057\011\060" +
    "\024\061\023\062\054\063\020\001\002\000\004\012\160" +
    "\001\002\000\024\002\uffec\004\uffec\007\uffec\012\uffec\013" +
    "\uffec\016\uffec\027\uffec\032\uffec\055\uffec\001\002\000\004" +
    "\063\162\001\002\000\004\007\163\001\002\000\024\002" +
    "\uffe8\004\uffe8\007\uffe8\012\uffe8\013\uffe8\016\uffe8\027\uffe8" +
    "\032\uffe8\055\uffe8\001\002\000\112\006\017\007\uffff\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\166\001\002\000\024\002" +
    "\uffe4\004\uffe4\007\uffe4\012\uffe4\013\uffe4\016\uffe4\027\uffe4" +
    "\032\uffe4\055\uffe4\001\002\000\112\006\017\007\uffff\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\171\001\002\000\024\002" +
    "\uffe3\004\uffe3\007\uffe3\012\uffe3\013\uffe3\016\uffe3\027\uffe3" +
    "\032\uffe3\055\uffe3\001\002\000\110\006\017\011\016\015" +
    "\013\017\012\021\010\022\007\024\006\025\005\026\004" +
    "\030\051\031\050\033\047\034\046\035\045\036\044\037" +
    "\043\040\041\041\040\042\036\043\035\044\034\045\033" +
    "\046\032\047\031\050\030\051\027\052\026\053\025\054" +
    "\015\056\014\057\011\060\024\061\023\062\054\063\020" +
    "\001\002\000\004\013\174\001\002\000\110\006\017\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\176\001\002\000\024\002" +
    "\uffdd\004\uffdd\007\uffdd\012\uffdd\013\uffdd\016\uffdd\027\uffdd" +
    "\032\uffdd\055\uffdd\001\002\000\112\006\017\007\uffff\011" +
    "\016\015\013\017\012\021\010\022\007\024\006\025\005" +
    "\026\004\030\051\031\050\033\047\034\046\035\045\036" +
    "\044\037\043\040\041\041\040\042\036\043\035\044\034" +
    "\045\033\046\032\047\031\050\030\051\027\052\026\053" +
    "\025\054\015\056\014\057\011\060\024\061\023\062\054" +
    "\063\020\001\002\000\004\007\201\001\002\000\024\002" +
    "\uffe5\004\uffe5\007\uffe5\012\uffe5\013\uffe5\016\uffe5\027\uffe5" +
    "\032\uffe5\055\uffe5\001\002\000\024\002\uffdb\004\uffdb\007" +
    "\uffdb\012\uffdb\013\uffdb\016\uffdb\027\uffdb\032\uffdb\055\uffdb" +
    "\001\002\000\004\006\204\001\002\000\004\060\205\001" +
    "\002\000\004\007\206\001\002\000\024\002\uffe7\004\uffe7" +
    "\007\uffe7\012\uffe7\013\uffe7\016\uffe7\027\uffe7\032\uffe7\055" +
    "\uffe7\001\002\000\004\005\210\001\002\000\024\006\073" +
    "\011\016\015\013\017\012\021\010\022\007\024\006\025" +
    "\005\063\212\001\002\000\110\006\017\011\016\015\013" +
    "\017\012\021\010\022\007\024\006\025\005\026\004\030" +
    "\051\031\050\033\047\034\046\035\045\036\044\037\043" +
    "\040\041\041\040\042\036\043\035\044\034\045\033\046" +
    "\032\047\031\050\030\051\027\052\026\053\025\054\015" +
    "\056\014\057\011\060\024\061\023\062\054\063\020\001" +
    "\002\000\132\002\uffcf\004\uffcf\006\017\007\uffcf\011\016" +
    "\012\uffcf\013\uffcf\015\013\016\uffcf\017\012\021\010\022" +
    "\007\024\006\025\005\026\004\027\uffcf\030\051\031\050" +
    "\032\uffcf\033\047\034\046\035\045\036\044\037\043\040" +
    "\041\041\040\042\036\043\035\044\034\045\033\046\032" +
    "\047\031\050\030\051\027\052\026\053\025\054\015\055" +
    "\uffcf\056\014\057\011\060\024\061\023\062\054\063\214" +
    "\001\002\000\024\002\uffce\004\uffce\007\uffce\012\uffce\013" +
    "\225\016\uffce\027\uffce\032\uffce\055\uffce\001\002\000\030" +
    "\002\ufff3\004\ufff3\006\220\007\ufff3\012\ufff3\013\ufff3\014" +
    "\221\016\ufff3\027\ufff3\032\ufff3\055\ufff3\001\002\000\024" +
    "\002\ufff8\004\ufff8\007\ufff8\012\ufff8\013\ufff8\016\ufff8\027" +
    "\ufff8\032\ufff8\055\ufff8\001\002\000\024\002\uffcb\004\uffcb" +
    "\007\uffcb\012\uffcb\013\uffcb\016\uffcb\027\uffcb\032\uffcb\055" +
    "\uffcb\001\002\000\024\002\uffd0\004\uffd0\007\uffd0\012\uffd0" +
    "\013\uffd0\016\uffd0\027\uffd0\032\uffd0\055\uffd0\001\002\000" +
    "\112\006\017\007\uffcf\011\016\015\013\017\012\021\010" +
    "\022\007\024\006\025\005\026\004\030\051\031\050\033" +
    "\047\034\046\035\045\036\044\037\043\040\041\041\040" +
    "\042\036\043\035\044\034\045\033\046\032\047\031\050" +
    "\030\051\027\052\026\053\025\054\015\056\014\057\011" +
    "\060\024\061\023\062\054\063\214\001\002\000\004\063" +
    "\222\001\002\000\024\002\uffee\004\uffee\007\uffee\012\uffee" +
    "\013\uffee\016\uffee\027\uffee\032\uffee\055\uffee\001\002\000" +
    "\004\007\224\001\002\000\024\002\uffef\004\uffef\007\uffef" +
    "\012\uffef\013\uffef\016\uffef\027\uffef\032\uffef\055\uffef\001" +
    "\002\000\132\002\uffcf\004\uffcf\006\017\007\uffcf\011\016" +
    "\012\uffcf\013\uffcf\015\013\016\uffcf\017\012\021\010\022" +
    "\007\024\006\025\005\026\004\027\uffcf\030\051\031\050" +
    "\032\uffcf\033\047\034\046\035\045\036\044\037\043\040" +
    "\041\041\040\042\036\043\035\044\034\045\033\046\032" +
    "\047\031\050\030\051\027\052\026\053\025\054\015\055" +
    "\uffcf\056\014\057\011\060\024\061\023\062\054\063\214" +
    "\001\002\000\024\002\uffcd\004\uffcd\007\uffcd\012\uffcd\013" +
    "\uffcd\016\uffcd\027\uffcd\032\uffcd\055\uffcd\001\002\000\024" +
    "\002\ufff9\004\ufff9\007\ufff9\012\ufff9\013\ufff9\016\ufff9\027" +
    "\ufff9\032\ufff9\055\ufff9\001\002\000\022\006\073\011\016" +
    "\015\013\017\012\021\010\022\007\024\006\025\005\001" +
    "\002\000\120\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\004\002\001\001\002\000\004" +
    "\007\235\001\002\000\006\007\101\015\055\001\002\000" +
    "\024\002\ufff1\004\ufff1\007\ufff1\012\ufff1\013\ufff1\016\ufff1" +
    "\027\ufff1\032\ufff1\055\ufff1\001\002\000\004\012\237\001" +
    "\002\000\120\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\001\002\000\004\006\241\001\002\000\006" +
    "\007\uffd8\063\065\001\002\000\004\007\243\001\002\000" +
    "\024\002\ufff0\004\ufff0\007\ufff0\012\ufff0\013\ufff0\016\ufff0" +
    "\027\ufff0\032\ufff0\055\ufff0\001\002\000\004\016\245\001" +
    "\002\000\122\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\001\002\000\004\020\247\001\002" +
    "\000\122\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\001\002\000\004\027\251\001\002\000" +
    "\004\006\252\001\002\000\110\006\017\011\016\015\013" +
    "\017\012\021\010\022\007\024\006\025\005\026\004\030" +
    "\051\031\050\033\047\034\046\035\045\036\044\037\043" +
    "\040\041\041\040\042\036\043\035\044\034\045\033\046" +
    "\032\047\031\050\030\051\027\052\026\053\025\054\015" +
    "\056\014\057\011\060\024\061\023\062\054\063\020\001" +
    "\002\000\004\007\254\001\002\000\024\002\uffe6\004\uffe6" +
    "\007\uffe6\012\uffe6\013\uffe6\016\uffe6\027\uffe6\032\uffe6\055" +
    "\uffe6\001\002\000\110\006\017\011\016\015\013\017\012" +
    "\021\010\022\007\024\006\025\005\026\004\030\051\031" +
    "\050\033\047\034\046\035\045\036\044\037\043\040\041" +
    "\041\040\042\036\043\035\044\034\045\033\046\032\047" +
    "\031\050\030\051\027\052\026\053\025\054\015\056\014" +
    "\057\011\060\024\061\023\062\054\063\020\001\002\000" +
    "\004\013\257\001\002\000\110\006\017\011\016\015\013" +
    "\017\012\021\010\022\007\024\006\025\005\026\004\030" +
    "\051\031\050\033\047\034\046\035\045\036\044\037\043" +
    "\040\041\041\040\042\036\043\035\044\034\045\033\046" +
    "\032\047\031\050\030\051\027\052\026\053\025\054\015" +
    "\056\014\057\011\060\024\061\023\062\054\063\020\001" +
    "\002\000\004\007\261\001\002\000\024\002\uffde\004\uffde" +
    "\007\uffde\012\uffde\013\uffde\016\uffde\027\uffde\032\uffde\055" +
    "\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\016\002\020\003\036\004\041\005\052\014" +
    "\021\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\247\005\052\014\021\015\051\001\001\000\002" +
    "\001\001\000\006\014\021\015\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\021\015\235\001\001" +
    "\000\012\004\232\005\052\014\021\015\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\125\005\052\014\021\015\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\055\005\052\014" +
    "\021\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\060\004\041\005\052\014\021\015\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\066\010\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\073\014\021\015\071\001\001\000\002\001\001\000" +
    "\006\014\021\015\077\001\001\000\002\001\001\000\012" +
    "\004\075\005\052\014\021\015\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\102\010\065\001\001\000\002\001\001\000" +
    "\006\014\021\015\104\001\001\000\002\001\001\000\014" +
    "\003\106\004\041\005\052\014\021\015\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\111\005\052" +
    "\014\021\015\051\001\001\000\002\001\001\000\012\004" +
    "\113\005\052\014\021\015\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\123\005\052\014\021\015\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\127" +
    "\005\052\014\021\015\051\001\001\000\002\001\001\000" +
    "\012\004\131\005\052\014\021\015\051\001\001\000\002" +
    "\001\001\000\014\003\135\004\041\005\052\014\021\015" +
    "\051\001\001\000\014\003\134\004\041\005\052\014\021" +
    "\015\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\137\005\052\014\021\015\051\001\001\000\002" +
    "\001\001\000\012\004\141\005\052\014\021\015\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\144" +
    "\005\052\014\021\015\051\001\001\000\002\001\001\000" +
    "\012\004\146\005\052\014\021\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\151\010\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\154" +
    "\014\021\015\071\001\001\000\002\001\001\000\012\004" +
    "\156\005\052\014\021\015\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\164\004\041\005\052\014\021" +
    "\015\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\167\004\041\005\052\014\021\015\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\172\005" +
    "\052\014\021\015\051\001\001\000\002\001\001\000\012" +
    "\004\174\005\052\014\021\015\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\177\004\041\005\052" +
    "\014\021\015\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\021\015\210\001\001\000\012\004\226\005\052" +
    "\014\021\015\051\001\001\000\020\004\215\005\052\011" +
    "\214\012\216\013\212\014\021\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\215\005\052\011\222" +
    "\012\216\013\212\014\021\015\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\215\005\052\012\225\013\212\014\021\015" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\021\015\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\241\010\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\252\005\052\014\021\015\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\255\005\052" +
    "\014\021\015\051\001\001\000\002\001\001\000\012\004" +
    "\257\005\052\014\021\015\051\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public fafl.Absyn.ProgramExprs pProgramExprs() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (fafl.Absyn.ProgramExprs) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramExprs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ProgramExprs start_val = (fafl.Absyn.ProgramExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramExprs ::= ListExpr 
            {
              fafl.Absyn.ProgramExprs RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_1 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramExprs",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListExpr ::= Expr _SYMB_0 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListExpr ::= 
            {
              fafl.Absyn.ListExpr RESULT =null;
		 RESULT = new fafl.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListExpr ::= Expr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListExpr ::= Expr _SYMB_7 ListExpr 
            {
              fafl.Absyn.ListExpr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= _SYMB_39 _IDENT_ _SYMB_1 Type Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_4 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqSimple(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expr ::= _SYMB_39 _IDENT_ _SYMB_1 _IDENT_ Args 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Args p_5 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.SetqStruct(p_2,p_4,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= _INTEGER_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.IntConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= _DOUBLE_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.DoubleConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Bool 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Bool p_1 = (fafl.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.BoolConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StringConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Id(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= _SYMB_20 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_7 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_9 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Define(p_2,p_4,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= _SYMB_40 _IDENT_ _SYMB_2 ListATypedArg _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListATypedArg p_4 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructInit(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= _IDENT_ _SYMB_2 Args _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Args p_3 = (fafl.Absyn.Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructConstructor(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= _IDENT_ _SYMB_8 _IDENT_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.StructField(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= _SYMB_27 Expr _SYMB_41 Expr _SYMB_22 Expr 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Expr p_4 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_6 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.If(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= _SYMB_30 _SYMB_2 ListATypedArg _SYMB_3 _SYMB_4 AFuncReturnType _SYMB_5 Expr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.AFuncReturnType p_6 = (fafl.Absyn.AFuncReturnType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_8 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Lambda(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Type _SYMB_9 Expr _SYMB_10 _SYMB_5 ListExpr _SYMB_6 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_6 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayConstructor(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= _SYMB_25 _SYMB_2 _IDENT_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.First(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= _SYMB_26 _SYMB_2 _IDENT_ _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Get(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= _SYMB_31 _SYMB_2 _IDENT_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Length(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= _SYMB_37 _SYMB_15 _SYMB_2 _STRING_ _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.RaiseEx(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= _SYMB_43 Expr _SYMB_19 _SYMB_2 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		fafl.Absyn.Expr p_2 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.TryCatch(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= _SYMB_35 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Plus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= _SYMB_32 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Minus(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= _SYMB_33 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Mul(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= _SYMB_21 _SYMB_2 ListExpr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.ListExpr p_3 = (fafl.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Div(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= _SYMB_23 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Equals(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= _SYMB_29 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsLess(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= _SYMB_28 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.IsGreater(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= _SYMB_18 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.And(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= _SYMB_34 _SYMB_2 Expr _SYMB_7 Expr _SYMB_3 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fafl.Absyn.Expr p_3 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p_5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Expr p_5 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.Or(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= _SYMB_38 
            {
              fafl.Absyn.Expr RESULT =null;
		 RESULT = new fafl.Absyn.ReadLine(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= _SYMB_36 _STRING_ 
            {
              fafl.Absyn.Expr RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.PrintLine(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Bool ::= _SYMB_42 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Bool ::= _SYMB_24 
            {
              fafl.Absyn.Bool RESULT =null;
		 RESULT = new fafl.Absyn.BoolFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListATypedArg ::= 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		 RESULT = new fafl.Absyn.ListATypedArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListATypedArg ::= ATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListATypedArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListATypedArg ::= ATypedArg _SYMB_7 ListATypedArg 
            {
              fafl.Absyn.ListATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.ATypedArg p_1 = (fafl.Absyn.ATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListATypedArg p_3 = (fafl.Absyn.ListATypedArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListATypedArg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AFuncReturnType ::= Type 
            {
              fafl.Absyn.AFuncReturnType RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncReturnType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFuncReturnType",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATypedArg ::= _IDENT_ _SYMB_1 Type 
            {
              fafl.Absyn.ATypedArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.TypedArg(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATypedArg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Args ::= ListArg 
            {
              fafl.Absyn.Args RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_1 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.Arguments(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListArg ::= 
            {
              fafl.Absyn.ListArg RESULT =null;
		 RESULT = new fafl.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListArg ::= Arg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListArg ::= Arg _SYMB_7 ListArg 
            {
              fafl.Absyn.ListArg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Arg p_1 = (fafl.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.ListArg p_3 = (fafl.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arg ::= _IDENT_ 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.NameArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arg ::= Expr 
            {
              fafl.Absyn.Arg RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Expr p_1 = (fafl.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.ExprArg(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type1 ::= _SYMB_13 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type1 ::= _SYMB_16 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type1 ::= _SYMB_14 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type1 ::= _SYMB_17 
            {
              fafl.Absyn.Type RESULT =null;
		 RESULT = new fafl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type1 ::= _SYMB_9 Type _SYMB_10 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.ArrayType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type1 ::= _SYMB_11 _IDENT_ _SYMB_12 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type1 ::= _SYMB_2 Type _SYMB_3 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Type ::= _SYMB_5 Type _SYMB_6 
            {
              fafl.Absyn.Type RESULT =null;
		int p_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		fafl.Absyn.Type p_2 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fafl.Absyn.StructFieldType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= Type1 _SYMB_4 Type 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_3 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new fafl.Absyn.FuncType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= Type1 
            {
              fafl.Absyn.Type RESULT =null;
		int p_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		fafl.Absyn.Type p_1 = (fafl.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
