define minElement (array : [Int], size:Int) -> Int {
    if equals(size, 1)
    then first(array)
    else    if  isless(
                    array-get(array, minus(size, 1)),
                    call minElement(array, minus(size, 2))
                )
            then array-get(array, minus(size, 1))
            else call minElement(array, minus(size, 2))
};

define factorial (num:Int) -> Int {
    if equals(num, 1)
    then 1
    else mul(num, call factorial(minus(num, 1)))
};

setq pi:Double 3.14159;

define even(n:Int) -> Bool {
    if equals(n, 0)
    then true
    else    if equals(n, 1)
            then false
            else call even(minus(n, 2))
};

define odd(n:Int) -> Bool {
    if equals(n, 0)
    then false
    else    if equals(n, 1)
            then true
            else call even(minus(n, 2))
};

define accuracy(n:Int) -> Double {
    div(1.0, call positivePow(10.0, n))
};

define positivePow(x:Double, n:Int) -> Double {
    if equals(n, 1)
    then x
    else mul(x, call positivePow(x, minus(n, 1)))
};


define sinCalculator(x:Double, n:Int) -> Double {
    if equals(n, 0)
    then x
    else plus(
        div(
            double (
                mul(
                    call positivePow(minus(0, 1), n),
                    call positivePow(1.0, plus(mul(2, n), 1))
                )
            ),
            double (call factorial(plus(mul(2, n), 1)))
        ),
        call sinCalculator(x,   minus(n, 1))
    )
};

call sinCalculator(3.14159, 3);